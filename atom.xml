<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wupengli Blog</title>
  <subtitle>我分享，我快乐</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-30T02:35:06.068Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>吴鹏丽</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ES6基础语法</title>
    <link href="http://yoursite.com/2017/05/29/ES6%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://yoursite.com/2017/05/29/ES6基础语法/</id>
    <published>2017-05-29T06:51:35.000Z</published>
    <updated>2017-05-30T02:35:06.068Z</updated>
    
    <content type="html"><![CDATA[<p>ES6更加的高效写代码,更加的简洁，提高开发的效率</p>
<ul>
<li>默认参数- 增加代码的安全性</li>
<li>研究源码  Element Vue 等都有用到ES6</li>
<li>面试 ES6 是很重要的</li>
</ul>
<ul>
<li>模块化概念</li>
<li>工程构建  文件之间的位置 上线 </li>
<li>编程经验  </li>
</ul>
<h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><p>变量的交换：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let a = <span class="number">1</span><span class="comment">;</span></div><div class="line">let <span class="keyword">b </span>= <span class="number">2</span><span class="comment">;</span></div><div class="line">[a, <span class="keyword">b] </span>= [<span class="keyword">b, </span>a]<span class="comment">;</span></div><div class="line">console.log(a, <span class="keyword">b);</span></div></pre></td></tr></table></figure></p>
<p>选择性的取值，只关心其中一部分的取值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> a, b;</div><div class="line">[a, , , ,b] = f();</div><div class="line"><span class="built_in">console</span>.log(a, b);<span class="comment">// 1, 5</span></div></pre></td></tr></table></figure></p>
<p>避免赋值是undefined,给参数默认值</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let a, <span class="keyword">b, </span>c<span class="comment">;</span></div><div class="line">[a, <span class="keyword">b, </span>c = <span class="number">4</span>] = [<span class="number">1</span>, <span class="number">4</span>]<span class="comment">;</span></div><div class="line">console.log(a, <span class="keyword">b, </span>c)<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>拓展运算符和剩余运算符</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let a, b, rest;</div><div class="line">[a, b, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</div><div class="line">console.log(a, b, rest);</div></pre></td></tr></table></figure>
<p>有默认值的结构赋值</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let <span class="comment">&#123; a = 3, b = 5&#125;</span> = <span class="comment">&#123; a: 4&#125;</span></div><div class="line">console.log(a, b);<span class="comment">// 4 5</span></div></pre></td></tr></table></figure>
<p>多层嵌套的对象结构赋值</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> mock = &#123;</div><div class="line">  title: <span class="string">'父标题'</span>,</div><div class="line">  address: [</div><div class="line">  &#123;</div><div class="line">    title: <span class="string">'子标题'</span>,</div><div class="line">    office: <span class="string">'公司地址'</span></div><div class="line">  &#125;]</div><div class="line">&#125;;</div><div class="line"><span class="keyword">let</span> &#123;title: esTitle, address: [&#123;home: cnTitle&#125;]&#125; = mock</div><div class="line">console.log(esTitle, cnTitle);</div></pre></td></tr></table></figure>
<h1 id="正则的扩展"><a href="#正则的扩展" class="headerlink" title="正则的扩展"></a>正则的扩展</h1><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>在ES5中构造函数的写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reg1 = <span class="built_in">RegExp</span>(<span class="string">'xyz'</span>, <span class="string">'i'</span>);</div><div class="line"><span class="keyword">var</span> reg2 = <span class="built_in">RegExp</span>(<span class="regexp">/xyz/i</span>);</div></pre></td></tr></table></figure>
<p>ES6新增的写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> reg3 = <span class="built_in">RegExp</span>(<span class="regexp">/xyz/ig</span>, <span class="string">'i'</span>);<span class="comment">//后面的一个参数会覆盖前面的修饰符</span></div><div class="line"><span class="built_in">console</span>.log(reg3.flags);<span class="comment">//flags 是ES6中用来获取修饰符的</span></div></pre></td></tr></table></figure></p>
<h2 id="y修饰符"><a href="#y修饰符" class="headerlink" title="y修饰符"></a>y修饰符</h2><p><code>g</code>, <code>y</code> 都是全局匹配, y必须是紧跟着下一个字符进行匹配， <code>g</code>会跳过<code>_</code>, 但是<code>y</code>修饰符不会忽略</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">let str = &apos;bbb_bb_b&apos;;</div><div class="line">var reg1 = /b+/g;</div><div class="line">var reg2 = /b+/y;</div><div class="line">console.log(reg1.exec(str), reg2.exec(str));</div><div class="line">console.log(reg1.exec(str), reg2.exec(str));</div><div class="line"></div><div class="line">返回的结果如下：</div><div class="line">[ &apos;bbb&apos;, index: 0, input: &apos;bbb_bb_b&apos; ] [ &apos;bbb&apos;, index: 0, input: &apos;bbb_bb_b&apos; ]</div><div class="line">[ &apos;bb&apos;, index: 4, input: &apos;bbb_bb_b&apos; ] null</div><div class="line"></div><div class="line">console.log(reg1.sticky, reg2.sticky);//sticky 获取正则表达式是否开启了y模式，返回的式boolean值</div></pre></td></tr></table></figure>
<h1 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h1><p>字符串的遍历器,可以处理unicode编码大于0xFFFF的编码</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> <span class="built_in">str</span> = '\u&#123;<span class="number">20</span>bb7&#125;abc';</div><div class="line"><span class="keyword">for</span>(<span class="built_in">let</span> i=<span class="number">0</span>; i&lt;<span class="built_in">str</span>.length;i++)&#123;</div><div class="line">  console.<span class="built_in">log</span>(<span class="string">"es5"</span>, <span class="built_in">str</span>[i]);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="built_in">let</span> code of <span class="built_in">str</span>)&#123;</div><div class="line">  console.<span class="built_in">log</span>(<span class="string">"es6"</span>, code);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出的结果如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">es5 �</div><div class="line">es5 �</div><div class="line">es5 <span class="selector-tag">a</span></div><div class="line">es5 <span class="selector-tag">b</span></div><div class="line">es5 c</div><div class="line">es6 𠮷</div><div class="line">es6 <span class="selector-tag">a</span></div><div class="line">es6 <span class="selector-tag">b</span></div><div class="line">es6 c</div></pre></td></tr></table></figure>
<p>字符串的方法<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let <span class="built_in">str</span> = <span class="string">"string"</span>;</div><div class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.includes(<span class="string">'r'</span>));<span class="comment">// true</span></div><div class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.startsWidth(<span class="string">'s'</span>));<span class="comment">// true</span></div><div class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.endsWidth(<span class="string">'ng'</span>));<span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>字符串的赋值<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">let</span> <span class="built_in">str</span> = 'abc';</div><div class="line">console.<span class="built_in">log</span>(<span class="built_in">str</span>.repeat(<span class="number">2</span>));<span class="comment">// abcab</span></div></pre></td></tr></table></figure></p>
<p>模板字符串的拼接, 数据项是通过${}包裹</p>
<p><code>i am ${name}, ${info}</code>;</p>
<p>es7的草案  padStart(2, ‘0’);//补白的作用</p>
<p>参数一： 总长度<br>参数二： 长度不足的情况下补充’0’</p>
<p>时间的转换<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">console.<span class="built_in">log</span>(<span class="string">'1'</span>.padStart(<span class="number">2</span>, <span class="string">'0'</span>));<span class="comment">//10</span></div><div class="line">console.<span class="built_in">log</span>(<span class="string">'1'</span>.padEnd(<span class="number">2</span>, <span class="string">'0'</span>));<span class="comment">// 01</span></div></pre></td></tr></table></figure></p>
<p>标签模板<br>1、处理多语言<br>2、过滤html字符串的时候，防止xss攻击</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> user=&#123;</div><div class="line">  <span class="attr">name</span>:<span class="string">'list'</span>,</div><div class="line">  <span class="attr">info</span>: <span class="string">'hello world'</span></div><div class="line">&#125;;</div><div class="line"><span class="built_in">console</span>.log(abc<span class="string">`i am <span class="subst">$&#123;user.name&#125;</span>, <span class="subst">$&#123;user.info&#125;</span>`</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params">s, v1,v2</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(s, v1, v2);</div><div class="line">  <span class="keyword">return</span> s + v1 + v2; <span class="comment">//通过不同的return 进行处理了模板， 多语言转换的</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>返回的结果如下：<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[ <span class="symbol">'i</span> am ', ', ', '' ] <span class="symbol">'list</span>' <span class="symbol">'hello</span> world'</div><div class="line">i am ,, ,listhello world</div></pre></td></tr></table></figure></p>
<p>raw的用法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.raw<span class="string">`hello\nancy`</span>);<span class="comment">//在\n前面实现的了转义</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">`hello\nancy`</span>);</div></pre></td></tr></table></figure>
<p>打印结果：</p>
<figure class="highlight livescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hello<span class="string">\nnancy</span></div><div class="line">hello</div><div class="line">nancy</div></pre></td></tr></table></figure>
<h1 id="数值扩展"><a href="#数值扩展" class="headerlink" title="数值扩展"></a>数值扩展</h1><h2 id="进制表示法"><a href="#进制表示法" class="headerlink" title="进制表示法"></a>进制表示法</h2><p>二进制： 0b11110010101,b不区分大小写<br>八进制： 0o 八进制   0O </p>
<h2 id="isFinite-是否是无穷大"><a href="#isFinite-是否是无穷大" class="headerlink" title="isFinite 是否是无穷大"></a>isFinite 是否是无穷大</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Number</span>.isFinite(<span class="number">16</span>); <span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="built_in">Number</span>.isFinite(<span class="number">17</span>/<span class="number">0</span>);<span class="comment">// false</span></div><div class="line"><span class="built_in">Number</span>.isFinite(<span class="literal">NaN</span>);<span class="comment">// false</span></div><div class="line"><span class="built_in">Number</span>.isFinite(<span class="literal">undefined</span>));<span class="comment">// false</span></div><div class="line"></div><div class="line"><span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>);<span class="comment">//true</span></div><div class="line"><span class="built_in">Number</span>.isNaN(<span class="number">0</span>);<span class="comment">//false</span></div></pre></td></tr></table></figure>
<h2 id="是否是整数"><a href="#是否是整数" class="headerlink" title="是否是整数"></a>是否是整数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Number</span>.isInteger(<span class="number">25</span>);<span class="comment">// true</span></div><div class="line"><span class="built_in">Number</span>.isInteger(<span class="number">25.1</span>);<span class="comment">// false</span></div><div class="line"><span class="built_in">Number</span>.isInteger(<span class="literal">NaN</span>);<span class="comment">//false</span></div><div class="line"><span class="built_in">Number</span>.isInteger(<span class="string">'str'</span>);<span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>在js中Number类型的实质是64为浮点数，JavaScript所能表示的数值范围为正负1.7976931348623157乘以10的308次方，其最小所能表示的小数为正负5乘以10的负324次方，这两个边界值可以分别通过访问Number对象的属性和MIN_VALUE属性来获取.<br><code>Number.MIN_VALUE</code>  1.7976931348623157e+308<br><code>Number.MAX_VALUE</code> 5e-324<br>对于整数，在ECMAScript5规范中规定，表示的范围 -2^53~2^53,在这个范围内，js的计算时精确的，一旦超出，js依旧可以计算，但是无法保证数值的精确。<br>对于整数的<strong>位运算</strong>，js仅支持32位整型数字，也就-2^32到2^32之间的整数</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Number</span>.MAX_SAFE_INTEGER;</div><div class="line"><span class="built_in">Number</span>.MIN_SAFE_INTEGER;</div><div class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="number">10</span>)<span class="comment">// true</span></div><div class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="string">'a'</span>);<span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>// 取整数部分的值<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Math.<span class="built-in">trunc</span>(<span class="number">4.1</span>);<span class="comment">// 4</span></div><div class="line">Math.<span class="built-in">trunc</span>(<span class="number">4.9</span>);<span class="comment">// 4</span></div></pre></td></tr></table></figure></p>
<p>// 判断正负数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.sign(<span class="number">-5</span>);<span class="comment">// -1</span></div><div class="line"><span class="built_in">Math</span>.sign(<span class="number">5</span>);<span class="comment">// 1</span></div><div class="line"><span class="built_in">Math</span>.sign(<span class="number">0</span>);<span class="comment">//0</span></div><div class="line"><span class="built_in">Math</span>.sign(<span class="string">'foo'</span>); <span class="comment">// NaN</span></div><div class="line"><span class="built_in">Math</span>.cbrt(<span class="number">-1</span>);<span class="comment">// -1的立方根</span></div><div class="line"><span class="built_in">Math</span>.cbrt(<span class="number">8</span>);<span class="comment">// 2</span></div></pre></td></tr></table></figure></p>
<h1 id="数组的扩展的方法"><a href="#数组的扩展的方法" class="headerlink" title="数组的扩展的方法"></a>数组的扩展的方法</h1><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h2><p>//把数据变量转换为数据类型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">9</span>);</div><div class="line">  <span class="built_in">console</span>.log(arr);<span class="comment">//[ 3, 4, 7, 9 ]</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">  <span class="keyword">let</span> arr = <span class="built_in">Array</span>.of();</div><div class="line">  <span class="built_in">console</span>.log(arr);<span class="comment">//[]</span></div></pre></td></tr></table></figure></p>
<p>Array把类数组转换为数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> p = <span class="built_in">document</span>.querySelectorAll(<span class="string">'p'</span>);</div><div class="line"><span class="built_in">console</span>.log(p);</div><div class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(p);</div><div class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(item.textContent);<span class="comment">//获取元素的内容</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>相当于 map的形式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from([<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>], <span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> item * <span class="number">2</span></div><div class="line">&#125;));<span class="comment">// [2, 6, 8]</span></div></pre></td></tr></table></figure>
<h2 id="Array-fill"><a href="#Array-fill" class="headerlink" title="Array.fill"></a>Array.fill</h2><p>arg0： 表示替换的元素<br>arg1： 表示替换的起始位置<br>arg2:  表示替换的结束位置, 但是不包括该位置</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[<span class="name">1</span>, <span class="symbol">'a</span>', undefined].fill(<span class="name">7</span>)<span class="comment">;//[ 7, 7, 7 ]</span></div><div class="line">[<span class="symbol">'a</span>', <span class="symbol">'b</span>', <span class="symbol">'c</span>'].fill(<span class="name">7</span>, <span class="number">1</span>, <span class="number">3</span>)<span class="comment">;//[ 'a', 7, 7 ]</span></div></pre></td></tr></table></figure>
<h2 id="let…-of…"><a href="#let…-of…" class="headerlink" title="let… of…"></a>let… of…</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'1'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].keys())&#123;</div><div class="line">   <span class="built_in">console</span>.log(index);<span class="comment">// 0 1 2</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">values  具有兼容性问题</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'1'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].values())&#123;</div><div class="line">  <span class="built_in">console</span>.log(index);<span class="comment">// 0 1 2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> index <span class="keyword">of</span> [<span class="string">'1'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>].entries())&#123;</div><div class="line">  <span class="built_in">console</span>.log(index);<span class="comment">// 0 1 2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*</div><div class="line">[ 0, '1' ]</div><div class="line">[ 1, 'b' ]</div><div class="line">[ 2, 'c' ]</div><div class="line"> */</span></div></pre></td></tr></table></figure>
<h2 id="copyWith"><a href="#copyWith" class="headerlink" title="copyWith"></a>copyWith</h2><p>arg0: 表示开始替换的位置<br>arg1: 表示开始替换的位置<br>arg2: 表示结束替换的位置，不包括该位置</p>
<p>通俗的讲就是用[arg1, arg2) 的值去替换arg0开始的之后的数组项<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].copyWithin(<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>);<span class="comment">//[ 4, 2, 3, 4, 5 ]</span></div><div class="line"></div><div class="line">[<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].copyWithin(<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>);<span class="comment">//[ 1, 3, 4, 5, 5 ]</span></div></pre></td></tr></table></figure></p>
<h2 id="find-amp-amp-findIndex"><a href="#find-amp-amp-findIndex" class="headerlink" title="find &amp;&amp; findIndex"></a>find &amp;&amp; findIndex</h2><p>findIndex  是查找索引  都是查找到了就不会往后面再查找了</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//是否包含这个值</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,NaN].includes(NaN);<span class="comment">// true</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,NaN].includes(<span class="number">1</span>);<span class="comment">// true</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,NaN].includes(<span class="number">5</span>);<span class="comment">// false</span></div></pre></td></tr></table></figure>
<h1 id="尾调用"><a href="#尾调用" class="headerlink" title="尾调用"></a>尾调用</h1><p>尾调用, 可以提高性能</p>
<p>下面就是一个尾调用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tail</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"tail:"</span>, x);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fx</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> tail(x)</div><div class="line">&#125;</div><div class="line">fx(<span class="number">123</span>);</div></pre></td></tr></table></figure>
<p>尾调用详解<br>[<a href="http://www.open-open.com/lib/view/open1482475025907.html#articleHeader0">http://www.open-open.com/lib/view/open1482475025907.html#articleHeader0</a>]</p>
<h1 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h1><h2 id="简洁表示法"><a href="#简洁表示法" class="headerlink" title="简洁表示法"></a>简洁表示法</h2><p>ES5的写法：<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="attr">o</span> = <span class="number">1</span>;</div><div class="line"><span class="keyword">let</span> <span class="attr">k</span> = <span class="number">2</span>;</div><div class="line"><span class="keyword">let</span> <span class="attr">es5</span> =&#123;</div><div class="line">  o: o,</div><div class="line">  k: k</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ES6的写法<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="attr">es6</span> = &#123;</div><div class="line">    o,</div><div class="line">    k</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>结果都是：<code>{ o: 1, k: 2 }</code></p>
<p>对象中存在方法</p>
<p>ES5的写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> es5_method = &#123;</div><div class="line">  <span class="attr">hello</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"hello"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ES6的写法</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> es6_method = &#123;</div><div class="line">  hello()&#123;</div><div class="line">    console.log(<span class="string">'hello'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="属性表达式"><a href="#属性表达式" class="headerlink" title="属性表达式"></a>属性表达式</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="string">'b'</span>;</div><div class="line"><span class="keyword">let</span> es5_obj = &#123;</div><div class="line">  a: <span class="string">'c'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> es6_obj = &#123;</div><div class="line">  [a]: <span class="string">'c'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">console.log(es5_obj, es6_obj);</div><div class="line">//&#123; a: <span class="string">'c'</span> &#125; &#123; b: <span class="string">'c'</span> &#125;</div><div class="line">两个对象表示的是不一样的 key值</div></pre></td></tr></table></figure>
<h2 id="Object新增方法"><a href="#Object新增方法" class="headerlink" title="Object新增方法"></a>Object新增方法</h2><h3 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is"></a>Object.is</h3><p>与<code>===</code>功能是一致的</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.<span class="keyword">is</span>(<span class="string">'abc'</span>, <span class="string">'abc'</span>);<span class="comment">// true</span></div><div class="line"><span class="built_in">Object</span>.<span class="keyword">is</span>([], []);<span class="comment">// false</span></div></pre></td></tr></table></figure>
<h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h3><p>实现对象的拷贝的功能，<br>注意</p>
<ul>
<li>是浅拷贝</li>
<li>只拷贝自身对象，继承下来的属性是拷贝的</li>
<li>不拷贝不可以枚举的属性</li>
</ul>
<p>遍历的时候使用entries, 因为values具有兼容性的问题<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> test = &#123;k: <span class="number">123</span>, o: <span class="number">456</span>&#125;;</div><div class="line"><span class="keyword">for</span>( <span class="keyword">let</span> [key, <span class="keyword">value</span>] <span class="keyword">of</span> Object.entries(test))&#123;</div><div class="line">  console.log([key, value]);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>babel-polyfill对它的支持也不是很好</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let &#123;a, b,...c&#125; = &#123; <span class="string">a:</span> <span class="string">'test'</span>, <span class="string">b:</span> <span class="string">'kill'</span>, <span class="string">c:</span> <span class="string">'ddd'</span>, <span class="string">d:</span> <span class="string">'ccc'</span>&#125;;</div></pre></td></tr></table></figure>
<h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><p>Symbol是ES6中新增的数据类型，作用是提供一个独一无二的值</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let <span class="built_in">a1</span> = Symbol()<span class="comment">;</span></div><div class="line">let <span class="built_in">a2</span> = Symbol()<span class="comment">;</span></div><div class="line">console.log(<span class="built_in">a1</span> === <span class="built_in">a2</span>)<span class="comment">;// false</span></div></pre></td></tr></table></figure>
<p>如何去拿Symbol赋的值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> t = <span class="built_in">Symbol</span>.for(<span class="string">'a3'</span>);<span class="comment">// 这个参数是一个key值</span></div><div class="line"><span class="keyword">let</span> t2 = <span class="built_in">Symbol</span>.for(<span class="string">'a3'</span>);<span class="comment">// 这个参数是一个key值</span></div><div class="line"><span class="built_in">console</span>.log(t === t2);<span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a1 = Symbol.<span class="keyword">for</span>(<span class="string">'abc'</span>);</div><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  [a1]: <span class="string">'123'</span>,</div><div class="line">  <span class="string">'abc'</span>: <span class="number">234</span>,</div><div class="line">  <span class="string">'c'</span>: <span class="number">456</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>打印的结果如下:<br><img src="/img/symbol.png" alt="symbol"></p>
<figure class="highlight plain"><figcaption><span>6</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">let a1 = Symbol.for(&apos;abc&apos;);</div><div class="line">let obj = &#123;</div><div class="line">  [a1]: &apos;123&apos;,</div><div class="line">  &apos;abc&apos;: 234,</div><div class="line">  &apos;c&apos;: 456</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// console.log(obj);</div><div class="line">// 拿到非symbol的属性</div><div class="line">for(let [key, value] of Object.entries(obj))&#123;</div><div class="line">  console.log(key, value);</div><div class="line">&#125;</div><div class="line">/*</div><div class="line">abc 234</div><div class="line">c 456</div><div class="line"> */</div><div class="line"></div><div class="line">// 拿到了symbol的属性</div><div class="line">// Object.getOwnPropertySymbols(obj).forEach(function(item)&#123;</div><div class="line">//   console.log(item);</div><div class="line">// &#125;);//Symbol(abc)</div></pre></td></tr></table></figure>
<p>如果是使用的式Reflect.ownKeys的方法, 显示的结果如下所示</p>
<p><img src="/img/ownKeys.png" alt=""></p>
<h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><p>set集合是不存在两个相同的值的</p>
<p>利用set去重, 相等的昂志时候是<code>===</code>, 不会做相关的强制数据类型转换</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let arr = [<span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>,<span class="number">4</span>];</div><div class="line">let a = new Set(arr);</div><div class="line">console.log(a.size);<span class="comment">// 4</span></div></pre></td></tr></table></figure>
<p>下面遍历set的结果都是一样的<br><figure class="highlight qml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="string">'add'</span>, <span class="string">'delete'</span>, <span class="string">'clear'</span>, <span class="string">'has'</span>];</div><div class="line"><span class="keyword">let</span> <span class="built_in">list</span> = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">list</span>.keys())&#123;</div><div class="line">  <span class="built_in">console</span>.log(key);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> <span class="built_in">list</span>.values())&#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">of</span> <span class="built_in">list</span>)&#123;<span class="comment">// 这里默认的是values()</span></div><div class="line">  <span class="built_in">console</span>.log(item);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">add</div><div class="line">delete</div><div class="line">clear</div><div class="line">has</div></pre></td></tr></table></figure>
<figure class="highlight ocaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> <span class="keyword">value</span> <span class="keyword">of</span> <span class="built_in">list</span>.values<span class="literal">()</span>)&#123;</div><div class="line">  console.log(<span class="keyword">value</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印如下结果：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">add</span> <span class="built_in">add</span></div><div class="line"><span class="built_in">delete</span> <span class="built_in">delete</span></div><div class="line"><span class="built_in">clear</span> <span class="built_in">clear</span></div><div class="line">has has</div></pre></td></tr></table></figure>
<h1 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h1><p>WeakSet和set的主要的区别是存储的数据类型有区别，WeakSet值能存储对象数据类型，<br>Weakset里面存储的式引用的地址，不会检测该对象是否在其他地方被引用，不会被垃圾回收机制回收</p>
<p>size属性是没有的, 没有clear方法<br>不能遍历</p>
<p>has / add / delete 方法和Set方法是一致的</p>
<h1 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h1><p>Map的数据类型可以是任意的<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> <span class="built_in">map</span> = new <span class="type">Map</span>();</div><div class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>];</div><div class="line"><span class="built_in">map</span>.<span class="keyword">set</span>(arr,<span class="number">456</span> );<span class="comment">// &#123; [ 1, 2, 4 ] =&gt; 456 &#125;</span></div><div class="line"><span class="built_in">map</span>.<span class="keyword">get</span>(arr);<span class="comment">// 456</span></div></pre></td></tr></table></figure></p>
<p>第二种定义的方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'a'</span>, <span class="number">123</span>], [<span class="string">'b'</span>, <span class="number">456</span>]]);</div><div class="line"><span class="comment">//&#123; 'a' =&gt; 123, 'b' =&gt; 456 &#125;</span></div></pre></td></tr></table></figure></p>
<p>获取具有多少个元素<br>map.size<br>获取某一项  get()<br>删除某一项  delete(key);  <code>map.delete(&#39;a&#39;)</code><br>清空： clear()</p>
<h1 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h1><p>WeakMap 接受的key值也必须是对象的形式<br>没有size属性和clear方法<br>不能遍历</p>
<h1 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h1><p>Proxy 起代理商的作用， 连接了用户和最真实对象的一个中间层<br>拿数据法时候需要经过代理做一些的操作</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  <span class="attr">time</span>: <span class="string">'2017-03-11'</span>,</div><div class="line">  <span class="attr">name</span>: <span class="string">'net'</span>,</div><div class="line">  <span class="attr">_r</span>: <span class="number">123</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> monitor = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj,&#123;</div><div class="line">  <span class="comment">//实现真正要代理的东西读取</span></div><div class="line">  <span class="comment">//拦截对象属性的</span></div><div class="line">  get(target, key)&#123;</div><div class="line">    <span class="keyword">return</span> target[key].replace(<span class="string">'2017'</span>, <span class="string">'2018'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//最后访问的都是monitor，不管是设置还是获取，都是通过代理实现的</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'get'</span>, monitor.time);</div></pre></td></tr></table></figure>
<p>除了设置值get还有set的操作</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">let obj = &#123;</div><div class="line">  time: <span class="string">'2017-03-11'</span>,</div><div class="line">  name: <span class="string">'net'</span>,</div><div class="line">  _r: <span class="number">123</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">let monitor = <span class="keyword">new</span> Proxy(obj,&#123;</div><div class="line">  <span class="comment">//实现真正要代理的东西读取</span></div><div class="line">  <span class="comment">//拦截对象属性的</span></div><div class="line">  <span class="built_in">get</span>(target, <span class="built_in">key</span>)&#123;</div><div class="line">    <span class="comment">// target 表示的式Obj的这个对象</span></div><div class="line">    console.<span class="built_in">log</span>(target, <span class="built_in">key</span>);</div><div class="line">    <span class="keyword">return</span> target[<span class="built_in">key</span>].replace(<span class="string">'2017'</span>, <span class="string">'2018'</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//拦截对象设置属性</span></div><div class="line">  <span class="built_in">set</span>(target, <span class="built_in">key</span>, value)&#123;</div><div class="line">  <span class="keyword">if</span>(<span class="built_in">key</span> === <span class="string">'name'</span>)&#123;</div><div class="line">    <span class="keyword">return</span> target[<span class="built_in">key</span>] = value</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">return</span> target[<span class="built_in">key</span>]</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"><span class="comment">//最后访问的都是monitor，不管是设置还是获取，都是通过代理实现的</span></div><div class="line"></div><div class="line"></div><div class="line">console.<span class="built_in">log</span>(<span class="string">'get'</span>, monitor.time);</div><div class="line"></div><div class="line">monitor.time = <span class="string">'2018'</span></div><div class="line">console.<span class="built_in">log</span>(monitor.time);</div><div class="line">monitor.name=<span class="string">"张三"</span>;</div><div class="line">console.<span class="built_in">log</span>(monitor.name);</div></pre></td></tr></table></figure>
<p>has 拦截key in object的操作<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> </div><div class="line">  has(target, key)&#123;</div><div class="line">    //只暴露name属性</div><div class="line">    if(key === 'name')&#123;</div><div class="line">     <span class="built_in"> return </span>target[key];</div><div class="line">    &#125;else&#123;</div><div class="line">     <span class="built_in"> return </span>false</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">'name' in<span class="built_in"> monitor </span> // true</div><div class="line">'time' in<span class="built_in"> monitor </span> // false</div></pre></td></tr></table></figure></p>
<p>实现对delete的代理<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">let obj = &#123;</div><div class="line">  time: <span class="string">'2017-03-11'</span>,</div><div class="line">  name: <span class="string">'net'</span>,</div><div class="line">  _r: <span class="number">123</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">let monitor = <span class="keyword">new</span> Proxy(obj,&#123;</div><div class="line">  <span class="comment">//实现真正要代理的东西读取</span></div><div class="line">  <span class="comment">//拦截对象属性的</span></div><div class="line">  <span class="built_in">get</span>(target, <span class="built_in">key</span>)&#123;</div><div class="line">    <span class="comment">// target 表示的式Obj的这个对象</span></div><div class="line">    console.<span class="built_in">log</span>(target, <span class="built_in">key</span>);</div><div class="line">    <span class="keyword">return</span> target[<span class="built_in">key</span>].replace(<span class="string">'2017'</span>, <span class="string">'2018'</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//拦截对象设置属性</span></div><div class="line">  <span class="built_in">set</span>(target, <span class="built_in">key</span>, value)&#123;</div><div class="line">      <span class="keyword">if</span>(<span class="built_in">key</span> === <span class="string">'name'</span>)&#123;</div><div class="line">        <span class="keyword">return</span> target[<span class="built_in">key</span>] = value</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> target[<span class="built_in">key</span>]</div><div class="line">      &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 拦截key in object的操作</span></div><div class="line">  has(target, <span class="built_in">key</span>)&#123;</div><div class="line">    <span class="comment">//只暴露name属性</span></div><div class="line">    <span class="keyword">if</span>(<span class="built_in">key</span> === <span class="string">'name'</span>)&#123;</div><div class="line">      <span class="keyword">return</span> target[<span class="built_in">key</span>];</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  deleteProperty(target, <span class="built_in">key</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">key</span>.indexOf(<span class="string">'_'</span>) &gt; <span class="number">-1</span>)&#123;</div><div class="line">      delete target[<span class="built_in">key</span>];</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">return</span> target[<span class="built_in">key</span>];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">delete monitor.time</div><div class="line">delete monitor._r</div><div class="line">console.<span class="built_in">log</span>(monitor);</div></pre></td></tr></table></figure></p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">let obj = &#123;</div><div class="line">  time: <span class="string">'2017-03-11'</span>,</div><div class="line">  name: <span class="string">'net'</span>,</div><div class="line">  _r: <span class="number">123</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line">let monitor = <span class="keyword">new</span> Proxy(obj,&#123;</div><div class="line">  <span class="comment">//实现真正要代理的东西读取</span></div><div class="line">  <span class="comment">//拦截对象属性的</span></div><div class="line">  <span class="built_in">get</span>(target, <span class="built_in">key</span>)&#123;</div><div class="line">    <span class="comment">// target 表示的式Obj的这个对象</span></div><div class="line">    console.<span class="built_in">log</span>(target, <span class="built_in">key</span>);</div><div class="line">    <span class="keyword">return</span> target[<span class="built_in">key</span>].replace(<span class="string">'2017'</span>, <span class="string">'2018'</span>);</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//拦截对象设置属性</span></div><div class="line">  <span class="built_in">set</span>(target, <span class="built_in">key</span>, value)&#123;</div><div class="line">      <span class="keyword">if</span>(<span class="built_in">key</span> === <span class="string">'name'</span>)&#123;</div><div class="line">        <span class="keyword">return</span> target[<span class="built_in">key</span>] = value</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> target[<span class="built_in">key</span>]</div><div class="line">      &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">// 拦截key in object的操作</span></div><div class="line">  has(target, <span class="built_in">key</span>)&#123;</div><div class="line">    <span class="comment">//只暴露name属性</span></div><div class="line">    <span class="keyword">if</span>(<span class="built_in">key</span> === <span class="string">'name'</span>)&#123;</div><div class="line">      <span class="keyword">return</span> target[<span class="built_in">key</span>];</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  deleteProperty(target, <span class="built_in">key</span>)&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">key</span>.indexOf(<span class="string">'_'</span>) &gt; <span class="number">-1</span>)&#123;</div><div class="line">      delete target[<span class="built_in">key</span>];</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="keyword">return</span> target[<span class="built_in">key</span>];</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="comment">//拦截Object.keys, Object.getOwnProperty, Object.getPropertySymbols</span></div><div class="line">  ownKeys(target)&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">Object</span>.keys(target).<span class="built_in">filter</span>(item =&gt; item != <span class="string">'time'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">console.<span class="built_in">log</span>(<span class="keyword">Object</span>.keys(monitor));<span class="comment">//[ 'name', '_r' ]</span></div></pre></td></tr></table></figure>
<h1 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h1><p>Reflect是一个反射的作用</p>
<p>get的用法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  <span class="attr">time</span>: <span class="string">'2017-03-11'</span>,</div><div class="line">  <span class="attr">name</span>: <span class="string">'net'</span>,</div><div class="line">  <span class="attr">_r</span>: <span class="number">123</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.get(obj, <span class="string">'time'</span>));<span class="comment">//2017-03-11</span></div></pre></td></tr></table></figure></p>
<p>set的用法</p>
<figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Reflect.<span class="keyword">set</span>(obj, <span class="string">'name'</span>, <span class="string">'wpl'</span>);</div><div class="line">//&#123; <span class="keyword">time</span>: <span class="string">'2017-03-11'</span>, name: <span class="string">'wpl'</span>, _r: <span class="number">123</span> &#125;</div></pre></td></tr></table></figure>
<p>has的用法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.has(obj, <span class="string">'name'</span>))<span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>如何在真正的项目中使用, 一个校验的解耦合</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">validator</span>(<span class="params">target, validator</span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, &#123;</div><div class="line">     _validator = validator,</div><div class="line">     set(target, key, value, proxy)&#123;</div><div class="line">       <span class="keyword">if</span>(target.hasOwnProperty(key))&#123;</div><div class="line">         <span class="keyword">let</span> va = <span class="keyword">this</span>._validator[key];</div><div class="line">         <span class="keyword">if</span>(!!va(value))&#123;</div><div class="line">           <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, proxy);</div><div class="line">         &#125;<span class="keyword">else</span>&#123;</div><div class="line">           <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`不能设置<span class="subst">$&#123;key&#125;</span> 到 <span class="subst">$&#123;value&#125;</span>`</span>);</div><div class="line">         &#125;</div><div class="line">       &#125;<span class="keyword">else</span>&#123;</div><div class="line">         <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span> 不存在`</span>);</div><div class="line">       &#125;</div><div class="line">     &#125;</div><div class="line">   &#125;)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">const</span> personValidator = &#123;</div><div class="line">   name(val)&#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">'string'</span>;</div><div class="line">   &#125;,</div><div class="line">   age(val)&#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">'number'</span> &amp;&amp; val &gt; <span class="number">18</span></div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="title">name</span>, <span class="title">age</span>)</span>&#123;</div><div class="line">   <span class="keyword">constructor</span>(name, age)&#123;</div><div class="line">     <span class="keyword">this</span>.name = name;</div><div class="line">     <span class="keyword">this</span>.age = age;</div><div class="line">     <span class="keyword">return</span> validator(<span class="keyword">this</span>, personValidator);</div><div class="line">   &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"></div><div class="line"> <span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">'lilei'</span>, <span class="number">30</span>);</div><div class="line"> <span class="built_in">console</span>.log(person);</div><div class="line"> person.name = <span class="number">48</span>;</div></pre></td></tr></table></figure>
<h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><h2 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h2><p>类的基本定义和生成实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(name = 'wpl', age)&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Parent(<span class="string">'wxq'</span>, <span class="number">22</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(p.name);<span class="comment">// wxq</span></div><div class="line"><span class="built_in">console</span>.log(p.age);<span class="comment">// 22</span></div></pre></td></tr></table></figure></p>
<p>继承和参数的传递<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</div><div class="line">  constructor(name = <span class="symbol">'wp</span>l')&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</div><div class="line">  <span class="comment">// 子类如何覆盖子类中的</span></div><div class="line">  constructor(name, age)&#123;</div><div class="line">    <span class="keyword">super</span>(name);<span class="comment">// 一定放在第一行，否则会报错</span></div><div class="line">    <span class="keyword">this</span>.age = age;<span class="comment">// 子类也增加了自己的属性</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let child = <span class="keyword">new</span> <span class="type">Child</span>(<span class="symbol">'wx</span>q', <span class="number">20</span>);<span class="comment">// 参数会覆盖默认值</span></div><div class="line">console.log(child);<span class="comment">//&#123; name: 'wxq', age: 20 &#125;</span></div></pre></td></tr></table></figure></p>
<h2 id="get-和-set方法"><a href="#get-和-set方法" class="headerlink" title="get 和 set方法"></a>get 和 set方法</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</div><div class="line">  constructor(name = <span class="symbol">'wp</span>l')&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">   <span class="comment">//这是一个属性</span></div><div class="line">  get longName()&#123;</div><div class="line">    <span class="keyword">return</span> <span class="symbol">'m</span>k' + <span class="keyword">this</span>.name;</div><div class="line">  &#125;</div><div class="line">  set longName(value)&#123;</div><div class="line">    <span class="keyword">this</span>.name = value;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 继承</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span></span>&#123;</div><div class="line">  <span class="comment">// 子类如何覆盖子类中的</span></div><div class="line">  constructor(name, age)&#123;</div><div class="line">    <span class="keyword">super</span>(name);</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">let p = <span class="keyword">new</span> <span class="type">Parent</span>();</div><div class="line">console.log(p.longName);<span class="comment">// mkwpl</span></div><div class="line">p.longName = <span class="symbol">'hell</span>o';</div><div class="line">console.log(p.longName);<span class="comment">// mkhello</span></div></pre></td></tr></table></figure>
<h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p><code>static</code>关键字<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(name = 'wpl')&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">static</span> tell()&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'test'</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Parent.tell();<span class="comment">// test</span></div></pre></td></tr></table></figure></p>
<h2 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h2><figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">class <span class="keyword">Parent</span>&#123;</div><div class="line">    constructor(name = <span class="string">'wpl'</span>)&#123;</div><div class="line">      this.name = name;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 静态属性在 ES6中没有关键字</span></div><div class="line">  &#125;</div><div class="line">  <span class="comment">//这里没有创建实例也可以照常调用</span></div><div class="line">  <span class="keyword">Parent</span>.<span class="keyword">type</span> = <span class="string">"type"</span>;</div><div class="line">  console.<span class="keyword">log</span>(<span class="keyword">Parent</span>.<span class="keyword">type</span>);<span class="comment">// type</span></div></pre></td></tr></table></figure>
<h1 id="Iterator-接口"><a href="#Iterator-接口" class="headerlink" title="Iterator 接口"></a>Iterator 接口</h1><p>统一的读取的方式</p>
<p>for… of的原理： 不断的调用Iterator 接口来实现的<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">let arr = ['hello', 'world'];</div><div class="line">let map = arr[<span class="string">Symbol.iterator</span>](<span class="link"></span>)</div></pre></td></tr></table></figure></p>
<p>返回的结果如下：<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">()</span> </span>&#123; [<span class="keyword">native</span> code] &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">()</span> </span>&#123; [<span class="keyword">native</span> code] &#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">next</span><span class="params">()</span> </span>&#123; [<span class="keyword">native</span> code] &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight fsharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">    start: [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>],</div><div class="line">    <span class="keyword">end</span>: [<span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>],</div><div class="line">    [Symbol.iterator]()&#123;</div><div class="line">      <span class="keyword">let</span> self = this;</div><div class="line">      <span class="keyword">let</span> index = <span class="number">0</span>;</div><div class="line">      <span class="keyword">let</span> arr = self.start.concat(self.<span class="keyword">end</span>);</div><div class="line">      <span class="keyword">let</span> len = arr.length;</div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        next()&#123;</div><div class="line">          <span class="keyword">if</span>(index&lt; len)&#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">              value: arr[index++],</div><div class="line">              <span class="keyword">done</span>: <span class="keyword">false</span></div><div class="line">            &#125;</div><div class="line">          &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">              value: arr[index++],</div><div class="line">              <span class="keyword">done</span>: <span class="keyword">true</span></div><div class="line">            &#125;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//遍历obj, 先遍历start 然后遍历end</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> obj)&#123;</div><div class="line">    console.log(key);<span class="comment">// 1 3 2 7 9 8</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>不管是遍历任何数据类型的数据， 都可以通过这个方式去遍历，然后通过<code>let...of 去遍历</code></p>
<h1 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h1><p>基本概念： 通常来说是一种异步编程的解决方案<br>例如：早期： 回调 Promise<br>Generator 相比更加的高级</p>
<p>yield*的用法</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  let tell = function* ()&#123;</div><div class="line">    yield 'a';</div><div class="line">    yield 'b';</div><div class="line">    return 'c'</div><div class="line">  &#125;<span class="comment">;</span></div><div class="line"></div><div class="line">  let k = tell()<span class="comment">;</span></div><div class="line">  console.log(<span class="name">k.next</span>())<span class="comment">;// 调用next会执行第一个yield</span></div><div class="line">  console.log(<span class="name">k.next</span>())<span class="comment">;</span></div><div class="line">  console.log(<span class="name">k.next</span>())<span class="comment">;</span></div><div class="line">  console.log(<span class="name">k.next</span>())<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印的结果如下：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attribute">value</span>: <span class="string">'a'</span>, done: false &#125;</div><div class="line">&#123; <span class="attribute">value</span>: <span class="string">'b'</span>, done: false &#125;</div><div class="line">&#123; <span class="attribute">value</span>: <span class="string">'c'</span>, done: true &#125;</div><div class="line">&#123; <span class="attribute">value</span>: undefined, done: true &#125;</div></pre></td></tr></table></figure>
<p>Generator 函数的应用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123;&#125;</div><div class="line">obj[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">of</span> obj)&#123;</div><div class="line">  <span class="built_in">console</span>.log(key);<span class="comment">// 1 2 3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> state = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'A'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'B'</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="string">'C'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> status = state();</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(status.next());</div><div class="line"><span class="built_in">console</span>.log(status.next());</div><div class="line"><span class="built_in">console</span>.log(status.next());</div><div class="line"><span class="built_in">console</span>.log(status.next());</div><div class="line"><span class="built_in">console</span>.log(status.next());</div></pre></td></tr></table></figure>
<p>打印的结果<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attribute">value</span>: <span class="string">'A'</span>, done: false &#125;</div><div class="line">&#123; <span class="attribute">value</span>: <span class="string">'B'</span>, done: false &#125;</div><div class="line">&#123; <span class="attribute">value</span>: <span class="string">'C'</span>, done: false &#125;</div><div class="line">&#123; <span class="attribute">value</span>: <span class="string">'A'</span>, done: false &#125;</div><div class="line">&#123; <span class="attribute">value</span>: <span class="string">'B'</span>, done: false &#125;</div></pre></td></tr></table></figure></p>
<p>如果还要接着调用next将会一直是ABC重复</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> state = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">    <span class="keyword">await</span> <span class="string">'A'</span>;</div><div class="line">    <span class="keyword">await</span> <span class="string">'B'</span>;</div><div class="line">    <span class="keyword">await</span> <span class="string">'C'</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个抽奖的案例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> draw = <span class="function"><span class="keyword">function</span>(<span class="params">count</span>)</span>&#123;</div><div class="line">  <span class="comment">//具体的抽奖逻辑</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="string">`剩余的<span class="subst">$&#123;count&#125;</span>次`</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> residue = <span class="function"><span class="keyword">function</span>* (<span class="params">count</span>)</span>&#123;</div><div class="line">  <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</div><div class="line">    count--;</div><div class="line">    <span class="keyword">yield</span> draw(count);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> star =residue(<span class="number">5</span>);</div><div class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.createElement(<span class="string">'button'</span>);</div><div class="line">btn.id = <span class="string">'start'</span>;</div><div class="line"><span class="built_in">document</span>.body.appendChild(btn);</div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">'start'</span>).addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  start.next();</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>长轮询， 定时的去服务器上取数据，但是websocket的兼容性不好</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> ajax = <span class="function"><span class="keyword">function</span>* (<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      resolve(&#123; <span class="attr">code</span>: <span class="number">0</span> &#125;);</div><div class="line">    &#125;, <span class="number">200</span>);<span class="comment">//模拟去取数据</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">let</span> pull = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">let</span> generator = ajax();</div><div class="line">  <span class="keyword">let</span> step = generator.next();<span class="comment">// 运行第一次的yield</span></div><div class="line">  step.value.then(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(d.code != <span class="number">0</span>)&#123;</div><div class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'wait...'</span>);</div><div class="line">        pull();</div><div class="line">      &#125;, <span class="number">1000</span>);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(d);</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line">pull();</div></pre></td></tr></table></figure>
<p>如果换成是code: 1 则打印的结果会一直是长轮询的方式<br><figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">wait</span></span>...</div><div class="line"><span class="function"><span class="title">wait</span></span>...</div><div class="line"><span class="function"><span class="title">wait</span></span>...</div><div class="line"><span class="function"><span class="title">wait</span></span>...</div><div class="line"><span class="function"><span class="title">wait</span></span>...</div><div class="line"><span class="function"><span class="title">wait</span></span>...</div><div class="line"><span class="function"><span class="title">wait</span></span>...</div></pre></td></tr></table></figure></p>
<h1 id="Decorator"><a href="#Decorator" class="headerlink" title="Decorator"></a>Decorator</h1><p>Decorator  表示的式修饰器</p>
<blockquote>
<p>修饰器是一个函数，用来修改类（扩展类的功能）的行为<br>修饰器只有在类的范畴中能用，在其他的范畴中是不能用的</p>
</blockquote>
<p>es7中的装饰器就是返回一个函数的表达式，他接受三个参数: 目标对象，属性名，以及一个属性描述符</p>
<p> 你可以通过把他放在你想要修饰的函数上面，并在最前面加上@符号来使用他。 装饰器可以设计用来修饰类或者属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="keyword">let</span> readonly = <span class="function"><span class="keyword">function</span>(<span class="params">target, name, descriptor</span>)</span>&#123;</div><div class="line">    descriptor.writable = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> descriptor</div><div class="line">  &#125;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</div><div class="line">    @readonly</div><div class="line">    time()&#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">'2017-03-11'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> test = <span class="keyword">new</span> Test();</div><div class="line"></div><div class="line">  test.time = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'reset time'</span>); <span class="comment">// 这是不允许的</span></div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(test.time);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们先申明一个类</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</div><div class="line">      meow() &#123;<span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> says Meow!`</span>;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>假如我们想要将meow方法放入到Cat.prototype上，大致上就像下面这样<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Object.defineProperty(Cat.prototype, <span class="string">'meow'</span>, &#123;</div><div class="line"><span class="attr">   value:</span> specifiedFunction,</div><div class="line"><span class="attr">   enumerable:</span> <span class="literal">false</span>,</div><div class="line"><span class="attr">   configurable:</span> <span class="literal">true</span>,</div><div class="line"><span class="attr">   writable:</span><span class="literal">true</span>   </div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>想象一下如果我们想要让一个属性或者方法名称不能修改，我们需要声明一个装饰器放在这个属性或者方法声明前。所以我们声明了@readonly装饰器，如下：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">readonly</span><span class="params">(target, key, descriptor)</span> </span>&#123;</div><div class="line">      descriptor.writable = <span class="literal">false</span>;</div><div class="line">      <span class="keyword">return</span> descriptor;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们把它放在我们的meow方法上面<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</div><div class="line">      <span class="meta">@readonly</span></div><div class="line">      meow() &#123;<span class="keyword">return</span> `$&#123;<span class="keyword">this</span>.name&#125; says Meow!`;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>把这个装饰器挂到meow方法上之后，实际是执行了以下的代码：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> descriptor = &#123;</div><div class="line">   <span class="keyword">value</span>: specifiedFunction,</div><div class="line">   enumerable: <span class="literal">false</span>,</div><div class="line">   configurable: <span class="literal">true</span>,</div><div class="line">   writable:<span class="literal">true</span> </div><div class="line">&#125;;</div><div class="line"></div><div class="line">descriptor = <span class="keyword">readonly</span>(Cat.prototype, <span class="string">'meow'</span>, descriptor) || descriptor;</div><div class="line">Object.defineProperty(Cat.prototypr, <span class="string">'meow'</span>, descriptor);</div></pre></td></tr></table></figure>
<p>现在meow方法现在是只读的了。我们可以通过以下代码来验证：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> garfield = <span class="keyword">new</span> Cat();</div><div class="line">garfield.meow = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'I want lasagne'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>// Exception:attempted to assign to readonly property</p>
<h1 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h1><p>ES6把模块化都标准化了<br>import<br>export 导出模块<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>箭头函数的this指向是在定义时确定的，而不是在运行时确定的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6更加的高效写代码,更加的简洁，提高开发的效率&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认参数- 增加代码的安全性&lt;/li&gt;
&lt;li&gt;研究源码  Element Vue 等都有用到ES6&lt;/li&gt;
&lt;li&gt;面试 ES6 是很重要的&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;模块化概念
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>vue2.0知识点总结</title>
    <link href="http://yoursite.com/2017/04/30/vue2.0%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/04/30/vue2.0知识点总结/</id>
    <published>2017-04-30T15:06:49.000Z</published>
    <updated>2017-05-07T16:49:14.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vue的特点"><a href="#vue的特点" class="headerlink" title="vue的特点"></a>vue的特点</h1><p>模板渲染、模块化、扩展功能（路由、ajax）</p>
<h1 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h1><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">首先获取用户是否完成了登录</div><div class="line"></div><div class="line">computed: mapGetters</div><div class="line">  userProfile: <span class="string">'userProfile'</span></div><div class="line"></div><div class="line">如果没有登录然后进行登录操作</div><div class="line"></div><div class="line"><span class="keyword">unless</span> @userProfile.uuid</div><div class="line"><span class="keyword">return</span> @$router.push name: <span class="string">'login'</span></div></pre></td></tr></table></figure>
<h1 id="vue关于路由方面"><a href="#vue关于路由方面" class="headerlink" title="vue关于路由方面"></a>vue关于路由方面</h1><h2 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h2><p><router-link></p>
<p><router-link> 组件支持用户在具有路由功能的应用中（点击）导航。 通过 to 属性指定目标地址，默认渲染成带有正确链接的 <a> 标签，可以通过配置 tag 属性生成别的标签.。另外，当目标路由成功激活时，链接元素自动设置一个表示激活的 CSS 类名。</p>
<p><router-link> 比起写死的 <a href="..."> 会好一些，理由如下：</p>
<ul>
<li>无论是 HTML5 history 模式还是 hash 模式，它的表现行为一致，所以，当你要切换路由模式，或者在 IE9 降级使用 hash 模式，无须作任何变动。</li>
<li>在 HTML5 history 模式下，router-link 会拦截点击事件，让浏览器不在重新加载页面。</li>
<li>当你在 HTML5 history 模式下使用 base 选项之后，所有的 to 属性都不需要写（基路径）了。</li>
</ul>
<h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><p>to<br>类型: string | Location<br>required<br>表示目标路由的链接。当被点击后，内部会立刻把 to 的值传到 router.push()，所以这个值可以是一个字符串或者是描述目标位置的对象。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 字符串 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 渲染结果 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 使用 v-bind 的 JS 表达式 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">"'home'"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'home'"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 同上 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; path: 'home' &#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 命名的路由 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;"</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; path: 'register', query: &#123; plan: 'private' &#125;&#125;"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><p>replace<br>类型: boolean<br>默认值: false<br>设置 replace 属性的话，当点击时，会调用 router.replace() 而不是 router.push()，于是导航后不会留下 history 记录。</p>
<p><router-link :to="{ path: '/abc'}" replace></router-link></p>
<p>##　append<br>类型: boolean<br>默认值: false<br>设置 append 属性后，则在当前（相对）路径前添加基路径。例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b<br>  <router-link :to="{ path: 'relative/path'}" append></router-link></p>
<h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><p>类型: string<br>默认值: “a”<br>有时候想要 <router-link> 渲染成某种标签，例如 <li>。 于是我们使用 tag prop 类指定何种标签，同样它还是会监听点击，触发导航。</p>
<p><router-link to="/foo" tag="li">foo</router-link></p>
<!-- 渲染结果 -->
<li>foo</li>

<h2 id="active-class"><a href="#active-class" class="headerlink" title="active-class"></a>active-class</h2><p>类型: string<br>默认值: “router-link-active”<br>设置 链接激活时使用的 CSS 类名。默认值可以通过路由的构造选项 linkActiveClass 来全局配置。</p>
<h2 id="exact"><a href="#exact" class="headerlink" title="exact"></a>exact</h2><p>类型: boolean<br>默认值: false<br>“是否激活” 默认类名的依据是 inclusive match （全包含匹配）。 举个例子，如果当前的路径是 /a 开头的，那么 <router-link to="/a"> 也会被设置 CSS 类名。<br>按照这个规则，<router-link to="/"> 将会点亮各个路由！想要链接使用 “exact 匹配模式”，则使用 exact 属性：<br>  <!-- 这个链接只会在地址为 / 的时候被激活 --><br>  <router-link to="/" exact></p>
<p>查看更多关于激活链接类名的例子 可运行.<br>将”激活时的CSS类名”应用在外层元素<br>有时候我们要让 “激活时的CSS类名” 应用在外层元素，而不是 <a> 标签本身，那么可以用 <router-link> 渲染外层元素，包裹着内层的原生 <a> 标签：</p>
<p><router-link tag="li" to="/foo"><br>  <a>/foo</a><br></router-link><br>在这种情况下，<a> 将作为真实的链接（它会获得正确的 href 的），而 “激活时的CSS类名” 则设置到外层的 <li>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vue的特点&quot;&gt;&lt;a href=&quot;#vue的特点&quot; class=&quot;headerlink&quot; title=&quot;vue的特点&quot;&gt;&lt;/a&gt;vue的特点&lt;/h1&gt;&lt;p&gt;模板渲染、模块化、扩展功能（路由、ajax）&lt;/p&gt;
&lt;h1 id=&quot;登录验证&quot;&gt;&lt;a href=&quot;#登录验
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>element.ui 常用组件</title>
    <link href="http://yoursite.com/2017/04/16/element_ui%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/04/16/element_ui常用组件/</id>
    <published>2017-04-16T12:42:15.000Z</published>
    <updated>2017-04-23T14:53:34.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在v-for中动态的绑定多次"><a href="#在v-for中动态的绑定多次" class="headerlink" title="在v-for中动态的绑定多次"></a>在v-for中动态的绑定多次</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">el-form-item(</div><div class="line">     v-for=&quot;(domain, index) in form.domains&quot;,</div><div class="line">     :label=&quot;&apos;域名&apos; + index&quot;,</div><div class="line">     :key=&quot;domain.key&quot;,</div><div class="line">     :prop=&quot;&apos;domains.&apos; + index + &apos;.value&apos;&quot;,</div><div class="line">     :rules=&quot;domainRule&quot;)</div><div class="line">     el-input(v-model=&quot;domain.value&quot;)</div><div class="line">     el-button(@click=&quot;deleteDomain(domain)&quot;) 删除</div><div class="line">   el-form-item</div><div class="line">     el-button(@click=&quot;addDomain&quot;) 新增域名</div></pre></td></tr></table></figure>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">deleteDomain: <span class="function"><span class="params">(domain)</span> -&gt;</span></div><div class="line">     index = @form.domains.indexOf domain</div><div class="line">     @form.domains.splice index, <span class="number">1</span></div><div class="line">   </div><div class="line">   addDomain: <span class="function">-&gt;</span></div><div class="line">     @form.domains.push</div><div class="line">       value: <span class="string">''</span></div><div class="line">       key: <span class="keyword">new</span> Date()</div></pre></td></tr></table></figure>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">domainRule:</div><div class="line">        required: <span class="literal">true</span>,</div><div class="line">        message: <span class="string">'域名不能为空'</span>,</div><div class="line">        trigger: <span class="string">'blur'</span></div></pre></td></tr></table></figure>
<h1 id="表单的验证"><a href="#表单的验证" class="headerlink" title="表单的验证"></a>表单的验证</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"> el-form(</div><div class="line">    ref=&quot;form&quot;,</div><div class="line">    :model=&quot;form&quot;,</div><div class="line">    :inline=&quot;false&quot;,</div><div class="line">    :rules=&quot;rules&quot;,</div><div class="line">    label-position=&quot;left&quot;,</div><div class="line">    label-width=&quot;150px&quot;,</div><div class="line">    style=&quot;width: 50%&quot;)   </div><div class="line">    el-form-item(label=&quot;密码：&quot;, prop=&quot;pass&quot;)</div><div class="line">      el-input(v-model=&quot;form.pass&quot;)</div><div class="line">    </div><div class="line">    el-form-item(label=&quot;再次输入密码：&quot;, prop=&quot;rePass&quot;)</div><div class="line">      el-input(v-model=&quot;form.rePass&quot;)</div><div class="line">    </div><div class="line">    el-form-item(label=&quot;数字&quot;, prop=&quot;num&quot;)</div><div class="line">      el-input(v-model=&quot;form.num&quot;)</div><div class="line">  </div><div class="line">    el-form-item(</div><div class="line">      v-for=&quot;(domain, index) in form.domains&quot;,</div><div class="line">      :label=&quot;&apos;域名&apos; + index&quot;,</div><div class="line">      :key=&quot;domain.key&quot;,</div><div class="line">      :prop=&quot;&apos;domains.&apos; + index + &apos;.value&apos;&quot;,</div><div class="line">      :rules=&quot;domainRule&quot;)</div><div class="line">      el-input(v-model=&quot;domain.value&quot;)</div><div class="line">      el-button(@click=&quot;deleteDomain(domain)&quot;) 删除</div><div class="line">    el-form-item</div><div class="line">      el-button(@click=&quot;addDomain&quot;) 新增域名</div><div class="line">     </div><div class="line">    el-form-item</div><div class="line">      el-button(type=&quot;primary&quot;, @click=&quot;onSubmit&quot;) onSubmit</div><div class="line">      el-button(@click=&quot;reset&quot;) 重置</div><div class="line"></div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script lang=&quot;coffee&quot;&gt;</div><div class="line">module.exports =</div><div class="line">  data: -&gt;</div><div class="line">    validateRePass = (rule, value, callback) =&gt;</div><div class="line">      unless value </div><div class="line">        return callback new Error &apos;请输入重复密码&apos;</div><div class="line">      </div><div class="line">      if value isnt @form.pass</div><div class="line">        return callback new Error &apos;密码和重复密码不一致&apos;</div><div class="line">      </div><div class="line">      do callback</div><div class="line">    domainRule:</div><div class="line">        required: true,</div><div class="line">        message: &apos;域名不能为空&apos;,</div><div class="line">        trigger: &apos;blur&apos;</div><div class="line">      </div><div class="line">    form:</div><div class="line">      rePass: &apos;&apos;</div><div class="line">      pass: &apos;&apos;</div><div class="line">      num: &apos;&apos;</div><div class="line">      domains: [</div><div class="line">          value: &apos;&apos;</div><div class="line">          key: 1</div><div class="line">        ,</div><div class="line">          value: &apos;&apos;</div><div class="line">          key: 2</div><div class="line">        ,</div><div class="line">          value: &apos;&apos;</div><div class="line">          key: 1</div><div class="line">      ]</div><div class="line">        </div><div class="line">    rules:</div><div class="line">      pass: [</div><div class="line">        &#123; required: true, message: &apos;请输入密码&apos;,</div><div class="line">          trigger: &apos;blur&apos; &#125;</div><div class="line">      ]</div><div class="line">      rePass: [</div><div class="line">        &#123; validator: validateRePass, trigger: &apos;blur&apos; &#125;</div><div class="line">      ]</div><div class="line">      num: [</div><div class="line">        &#123; required: true, message: &apos;请输入数字，必填&apos;,</div><div class="line">          trigger: &apos;blur&apos; &#125;</div><div class="line">        &#123; type: &apos;number&apos;, message: &apos;请输入数字&apos;,</div><div class="line">          trigger: &apos;change&apos; &#125;</div><div class="line">      ]</div><div class="line">  </div><div class="line">  methods:</div><div class="line">    deleteDomain: (domain) -&gt;</div><div class="line">      index = @form.domains.indexOf domain</div><div class="line">      @form.domains.splice index, 1</div><div class="line">    </div><div class="line">    addDomain: -&gt;</div><div class="line">      @form.domains.push</div><div class="line">        value: &apos;&apos;</div><div class="line">        key: new Date()</div><div class="line">      </div><div class="line"></div><div class="line">    onSubmit: -&gt;</div><div class="line">      @$refs.form.validate (valid) -&gt;</div><div class="line">        return unless valid</div><div class="line">        alert &apos;submit&apos;    </div><div class="line"></div><div class="line">    reset: -&gt;</div><div class="line">      do @$refs.form.resetFields</div><div class="line">      </div><div class="line">  components:</div><div class="line">    ImageUpload: require &apos;./ImageUpload&apos;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;style lang=&quot;stylus&quot;&gt;</div><div class="line">  .el-form</div><div class="line">    margin: 20px auto</div><div class="line"></div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h1 id="表格的单选和多选"><a href="#表格的单选和多选" class="headerlink" title="表格的单选和多选"></a>表格的单选和多选</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">&lt;template lang=&quot;pug&quot;&gt;</div><div class="line">  .show-songs-list</div><div class="line">    el-table(</div><div class="line">      :data=&quot;tableData&quot;,</div><div class="line">      stripe,</div><div class="line">      ref=&quot;myForm&quot;,</div><div class="line">      style=&quot;width: 100%&quot;,</div><div class="line">      tooltip-effect=&quot;dark&quot;,</div><div class="line">      :reserve-selection=&quot;true&quot;,</div><div class="line">      @selection-change=&quot;handleSelectionChange&quot;)</div><div class="line">      el-table-column(</div><div class="line">        type=&quot;selection&quot;,</div><div class="line">        width=&quot;55&quot;)</div><div class="line">      el-table-column(</div><div class="line">        prop=&quot;date&quot;,</div><div class="line">        label=&quot;日期&quot;,</div><div class="line">        width=&quot;180&quot;)</div><div class="line">      el-table-column(</div><div class="line">        prop=&quot;name&quot;,</div><div class="line">        width=&quot;180&quot;,</div><div class="line">        label=&quot;姓名&quot;)</div><div class="line">      el-table-column(</div><div class="line">        prop=&quot;address&quot;,</div><div class="line">        :show-overflow-tooltip=&quot;true&quot;,</div><div class="line">        label=&quot;地址&quot;)</div><div class="line">    </div><div class="line">    </div><div class="line">    el-badge(:value=&quot;selectedList.length&quot;)</div><div class="line">      el-button(@click=&quot;add&quot;) 添加</div><div class="line">    el-dialog(title=&quot;选中列表&quot;, v-model=&quot;showList&quot;)</div><div class="line">      div(v-if=&quot;!selectedList.length&quot;) 暂时还没有数据</div><div class="line">      div(v-else)</div><div class="line">        h3 一共 &#123;&#123; selectedList.length &#125;&#125;</div><div class="line">        ul</div><div class="line">          li(v-for=&quot;item in selectedList&quot;)</div><div class="line">            | &#123;&#123; item.date &#125;&#125;</div><div class="line">            el-button(icon=&quot;delete&quot;, size=&quot;mini&quot;,</div><div class="line">            @click=&quot;deleteItem(item)&quot;)</div><div class="line">        el-button(@click=&quot;isOk&quot;) oK</div><div class="line">&lt;/template&gt;</div><div class="line">&lt;script lang=&quot;coffee&quot;&gt;</div><div class="line">module.exports =</div><div class="line">  data: -&gt;</div><div class="line">    selectedList: []</div><div class="line">    showList: false</div><div class="line">    tableData: [</div><div class="line">        date: &apos;2015-09-21&apos;</div><div class="line">        name: &apos;王小虎&apos;,</div><div class="line">        address: &apos;昌平区小辛庄村&apos;</div><div class="line">      ,</div><div class="line">        date: &apos;2015-09-21&apos;</div><div class="line">        name: &apos;王小虎&apos;,</div><div class="line">        address: &apos;昌平区小辛庄村&apos;</div><div class="line">      ,</div><div class="line">        date: &apos;2015-09-21&apos;</div><div class="line">        name: &apos;王小虎&apos;,</div><div class="line">        address: &apos;昌平区小辛庄村&apos;</div><div class="line">      ,</div><div class="line">        date: &apos;2015-09-21&apos;</div><div class="line">        name: &apos;王小虎&apos;,</div><div class="line">        address: &apos;昌平区小辛庄村&apos;</div><div class="line">      , </div><div class="line">        date: &apos;2015-09-21&apos;</div><div class="line">        name: &apos;王小虎&apos;,</div><div class="line">        address: &apos;昌平区小辛庄村&apos;</div><div class="line">    ]</div><div class="line">  methods:</div><div class="line">    handleSelectionChange: (selectList) -&gt;</div><div class="line">      @selectedList = selectList</div><div class="line">      console.log @selectedList</div><div class="line">    </div><div class="line">    add: -&gt;</div><div class="line">      @showList = true</div><div class="line">    </div><div class="line">    isOk: -&gt;</div><div class="line">      do @$refs.myForm.clearSelection</div><div class="line">      @selectedList = []</div><div class="line">      @showList = false</div><div class="line">    </div><div class="line">    deleteItem: (item) -&gt;</div><div class="line">      @selectedList.splice (@selectedList.indexOf item), 1</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;style lang=&quot;stylus&quot;&gt;</div><div class="line">  .el-table</div><div class="line">    margin: 20px auto</div><div class="line"></div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;在v-for中动态的绑定多次&quot;&gt;&lt;a href=&quot;#在v-for中动态的绑定多次&quot; class=&quot;headerlink&quot; title=&quot;在v-for中动态的绑定多次&quot;&gt;&lt;/a&gt;在v-for中动态的绑定多次&lt;/h1&gt;&lt;figure class=&quot;highlight 
    
    </summary>
    
    
      <category term="组件" scheme="http://yoursite.com/tags/%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>git工作中常见操作详解</title>
    <link href="http://yoursite.com/2017/04/14/git%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E8%A7%81%E6%93%8D%E4%BD%9C%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/04/14/git工作中常见操作详解/</id>
    <published>2017-04-14T15:02:56.000Z</published>
    <updated>2017-04-23T15:44:42.444Z</updated>
    
    <content type="html"><![CDATA[<p>git命令速查表<br>[<a href="https://segmentfault.com/a/1190000008535266">https://segmentfault.com/a/1190000008535266</a>]</p>
<h1 id="修改上一次提交的信息"><a href="#修改上一次提交的信息" class="headerlink" title="修改上一次提交的信息"></a>修改上一次提交的信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit --amend -m&apos;commit message&apos;</div></pre></td></tr></table></figure>
<h1 id="合并commit"><a href="#合并commit" class="headerlink" title="合并commit"></a>合并commit</h1><p>在不适用id号的情况下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase -i HEAD^^</div></pre></td></tr></table></figure>
<h1 id="用户设置"><a href="#用户设置" class="headerlink" title="用户设置"></a>用户设置</h1><p>设置全局的用户信息<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user<span class="selector-class">.name</span> <span class="string">'wplnancy'</span></div><div class="line">git config --global user<span class="selector-class">.email</span> <span class="string">'1138617421@qq.com'</span></div></pre></td></tr></table></figure></p>
<p>查看用户设置</p>
<p><code>git config --list</code><br><code>git config user.name</code><br><code>git config user.email</code></p>
<p>状态简览表</p>
<p><code>git status -s</code></p>
<p>跳过暂存区提交<br><code>git commit -a -m update some file&#39;</code></p>
<p>关于 -a 参数，Git 的文档是这么描述的：</p>
<blockquote>
<p>通知命令自动索引那些被修改或者被删除的文件，但是新添加的文件不会受到影响（即新添加的文件要通过 git add 来显式添加）。</p>
</blockquote>
<h1 id="移除文件"><a href="#移除文件" class="headerlink" title="移除文件"></a>移除文件</h1><p>把文件删除 git不再跟踪</p>
<p><code>get rm &lt;some file&gt;</code></p>
<p>从git中移除但是文件本身不删除</p>
<p><code>git rm --cache &lt;some file&gt;</code></p>
<p>如果是删除文件夹，则需要加上 <code>-r</code>  的参数</p>
<p><code>git rm --cache -r &lt;some folder&gt;</code></p>
<h1 id="查看修改"><a href="#查看修改" class="headerlink" title="查看修改"></a>查看修改</h1><p><code>git log</code> 查看日志<br><code>git log -p</code> 查看内容差异<br><code>git log --stat</code> 查看统计信息<br><code>git log --author= &#39;Tony Wu&#39;</code> 查看用户的提交</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">-<span class="ruby">p	按补丁格式显示每个更新之间的差异。</div><div class="line"></span>-<span class="ruby">-word-diff	按 word diff 格式显示差异。</div><div class="line"></span>-<span class="ruby">-stat	显示每次更新的文件修改统计信息。</div><div class="line"></span>-<span class="ruby">-shortstat	只显示 --stat 中最后的行数修改添加移除统计。</div><div class="line"></span>-<span class="ruby">-name-only	仅在提交信息后显示已修改的文件清单。</div><div class="line"></span>-<span class="ruby">-name-status	显示新增、修改、删除的文件清单。</div><div class="line"></span>-<span class="ruby">-abbrev-commit	仅显示 SHA-<span class="number">1</span> 的前几个字符，而非所有的 <span class="number">40</span> 个字符。</div><div class="line"></span>-<span class="ruby">-relative-date	使用较短的相对时间显示（比如，“<span class="number">2</span> weeks ago”）。</div><div class="line"></span>-<span class="ruby">-graph	显示 ASCII 图形表示的分支合并历史。</div><div class="line"></span>-<span class="ruby">-pretty 使用其他格式显示历史提交信息。可用的选项包括 oneline，short，</div><div class="line"></span>full，fuller 和 format（后跟指定格式）。 </div><div class="line">例如： git log --pretty=oneline</div></pre></td></tr></table></figure>
<p>下面是 <code>git log --pretty=oneline</code> 的显示效果如下所示：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git <span class="built_in">log</span> <span class="comment">--pretty=oneline</span></div><div class="line">ca82a6dff817ec66f44342063949 changed <span class="keyword">the</span> <span class="built_in">version</span> <span class="built_in">number</span></div><div class="line"><span class="number">085</span>bb3bcb608e1e8451d4b2e6306e7e7 removed unnecessary test code</div><div class="line">a11bef06a3f659402fe75630de2209e6 <span class="keyword">first</span> commit</div></pre></td></tr></table></figure>
<p>限制输出长度</p>
<p>除了定制输出格式的选项之外，git log 还有许多非常实用的限制输出长度的选项，也就是只输出部分提交信息。之前我们已经看到过 -2 了，它只显示最近的两条提交，实际上，这是 -<n> 选项的写法，其中的 n 可以是任何自然数，表示仅显示最近的若干条提交。不过实践中我们是不太用这个选项的，Git 在输出所有提交时会自动调用分页程序（less），要看更早的更新只需翻到下页即可。<br>另外还有按照时间作限制的选项，比如 –since 和 –until。下面的命令列出所有最近两周内的提交：</p>
<p>$ git log –since=2.weeks<br>你可以给出各种时间格式，比如说具体的某一天（“2008-01-15”），或者是多久以前（“2 years 1 day 3 minutes ago”）。</p>
<p>还可以给出若干搜索条件，列出符合的提交。用 –author 选项显示指定作者的提交，用 –grep 选项搜索提交说明中的关键字。（请注意，如果要得到同时满足这两个选项搜索条件的提交，就必须用 –all-match 选项。否则，满足任意一个条件的提交都会被匹配出来）</p>
<p>另一个真正实用的git log选项是路径(path)，如果只关心某些文件或者目录的历史提交，可以在 git log 选项的最后指定它们的路径。因为是放在最后位置上的选项，所以用两个短划线（–）隔开之前的选项和后面限定的路径名。</p>
<p>表 2-3 还列出了其他常用的类似选项。</p>
<p>选项    说明<br>-(n)    仅显示最近的 n 条提交<br>–since, –after    仅显示指定时间之后的提交。<br>–until, –before    仅显示指定时间之前的提交。<br>–author    仅显示指定作者相关的提交。<br>–committer    仅显示指定提交者相关的提交。<br>来看一个实际的例子，如果要查看 Git 仓库中，2008 年 10 月期间，Junio Hamano 提交的但未合并的测试脚本（位于项目的 t/ 目录下的文件），可以用下面的查询命令：</p>
<p>$ git log –pretty=”%h - %s” –author=gitster –since=”2008-10-01” \<br>   –before=”2008-11-01” –no-merges – t/<br>5610e3b - Fix testcase failure when extended attribute<br>acd3b9e - Enhance hold_lock_file<em>for</em>{update,append}()<br>f563754 - demonstrate breakage of detached checkout wi<br>d1a43f2 - reset –hard/read-tree –reset -u: remove un<br>51a94af - Fix “checkout –track -b newbranch” on detac<br>b0ad11e - pull: allow “git pull origin $something:$cur<br>Git 项目有 20,000 多条提交，但我们给出搜索选项后，仅列出了其中满足条件的 6 条。</p>
<h1 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h1><p>取消上一次的提交<br><code>git reset HEAD^</code><br>同理，如果是取消上两次的提交就是<code>HEAD^^</code></p>
<p>修改上一次的提交</p>
<p><code>git commit --amend</code></p>
<p>撤销文件在暂存区的修改（回到工作区）</p>
<p><code>git reset HEAD &lt;some file&gt;</code></p>
<p>撤销所有文件的修改</p>
<p><code>git checkout -- .</code></p>
<p>从暂存区撤销添加的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm --cached [filename]</div></pre></td></tr></table></figure>
<h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><p>git remote show origin # 显示 origin 远程库的详情<br>git remote rm origin把 origin 重新命名为 default<br>git remote rm origin 移除连接</p>
<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><p>git branch -r 查看远程分支<br>git branch -a 查看所有的分支</p>
<h1 id="合并请求"><a href="#合并请求" class="headerlink" title="合并请求"></a>合并请求</h1><p><code>git rebase -i --root</code></p>
<h1 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h1><p>不是万不得已的情况下，尽量不要使用 –hard 这个参数，因为这个是不可逆的操作。</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> git reset --hard HEAD^    <span class="comment">//回退到上一个提交版本</span></div><div class="line"><span class="symbol">$</span> git reset --hard HEAD^^    <span class="comment">//回退到上两个提交版本</span></div><div class="line"><span class="symbol">$</span> git reset --hard HEAD~<span class="number">100</span>    <span class="comment">//回退到上100个提交版本</span></div><div class="line"><span class="symbol">$</span> git reset --hard <span class="number">123456.</span>..    <span class="comment">//回退到提交id为123456...的版本</span></div></pre></td></tr></table></figure>
<h1 id="git-diff-的用法"><a href="#git-diff-的用法" class="headerlink" title="git diff 的用法"></a>git diff 的用法</h1><ul>
<li><p>git diff<br>表示的是目前尚无任何提交，显示的是工作区和最后一个commit的区别</p>
</li>
<li><p>git diff –cached<br>表示的是已经做了<code>git add fileName</code>的操作了，但是还没有commit，比较的是最后同最后一次commit的差异。</p>
</li>
</ul>
<h1 id="zsh下git-alias"><a href="#zsh下git-alias" class="headerlink" title="zsh下git alias"></a>zsh下git alias</h1><p>gst = git status<br>gcm = git commit -m<br>gps = git push<br>glg = git log –graph<br>gb = git branch<br>g = git<br>gbr = git branch -r<br>gbnm = git branch –no-merged</p>
<p>查看别名<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alias</span> <span class="title">gcm</span></div><div class="line"><span class="title">gcm</span> = git checkoout master</div></pre></td></tr></table></figure></p>
<p>原来配置成了其他命令。<br>但是奇怪的是，在 .zshrc 文件中并没有找到相关配置。经过仔细阅读，最终发现了下面这条语句：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/.oh-my-zsh/plugins/git</div><div class="line">ls</div><div class="line">README<span class="selector-class">.md</span>      git<span class="selector-class">.plugin</span><span class="selector-class">.zsh</span></div></pre></td></tr></table></figure>
<p>可以看到一个 git.plugin.zsh 文件，vi 打开，看到一些 functions 和 N 多的 alias。</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line">g=git</div><div class="line">ga=<span class="symbol">'git</span> add'</div><div class="line">gaa=<span class="symbol">'git</span> add <span class="comment">--all'</span></div><div class="line">gapa=<span class="symbol">'git</span> add <span class="comment">--patch'</span></div><div class="line">gb=<span class="symbol">'git</span> branch'</div><div class="line">gba=<span class="symbol">'git</span> branch -a'</div><div class="line">gbd=<span class="symbol">'git</span> branch -d'</div><div class="line">gbda=<span class="symbol">'git</span> branch <span class="comment">--no-color --merged | command grep -vE "^(\*|\s*(master|develop|dev)\s*$)" | command xargs -n 1 git branch -d'</span></div><div class="line">gbl=<span class="symbol">'git</span> blame -b -w'</div><div class="line">gbnm=<span class="symbol">'git</span> branch <span class="comment">--no-merged'</span></div><div class="line">gbr=<span class="symbol">'git</span> branch <span class="comment">--remote'</span></div><div class="line">gbs=<span class="symbol">'git</span> bisect'</div><div class="line">gbsb=<span class="symbol">'git</span> bisect bad'</div><div class="line">gbsg=<span class="symbol">'git</span> bisect good'</div><div class="line">gbsr=<span class="symbol">'git</span> bisect reset'</div><div class="line">gbss=<span class="symbol">'git</span> bisect start'</div><div class="line">gc=<span class="symbol">'git</span> commit -v'</div><div class="line"><span class="symbol">'gc</span>!<span class="string">'='</span>git commit -v <span class="comment">--amend'</span></div><div class="line">gca=<span class="symbol">'git</span> commit -v -a'</div><div class="line"><span class="symbol">'gca</span>!<span class="string">'='</span>git commit -v -a <span class="comment">--amend'</span></div><div class="line">gcam=<span class="symbol">'git</span> commit -a -m'</div><div class="line"><span class="symbol">'gcan</span>!<span class="string">'='</span>git commit -v -a <span class="comment">--no-edit --amend'</span></div><div class="line"><span class="symbol">'gcans</span>!<span class="string">'='</span>git commit -v -a -s <span class="comment">--no-edit --amend'</span></div><div class="line">gcb=<span class="symbol">'git</span> checkout -b'</div><div class="line">gcd=<span class="symbol">'git</span> checkout develop'</div><div class="line">gcf=<span class="symbol">'git</span> config <span class="comment">--list'</span></div><div class="line">gcl=<span class="symbol">'git</span> clone <span class="comment">--recursive'</span></div><div class="line">gclean=<span class="symbol">'git</span> clean -fd'</div><div class="line">gcm=<span class="symbol">'git</span> checkout master'</div><div class="line">gcmsg=<span class="symbol">'git</span> commit -m'</div><div class="line"><span class="symbol">'gcn</span>!<span class="string">'='</span>git commit -v <span class="comment">--no-edit --amend'</span></div><div class="line">gco=<span class="symbol">'git</span> checkout'</div><div class="line">gcount=<span class="symbol">'git</span> shortlog -sn'</div><div class="line">gcp=<span class="symbol">'git</span> cherry-pick'</div><div class="line">gcpa=<span class="symbol">'git</span> cherry-pick <span class="comment">--abort'</span></div><div class="line">gcpc=<span class="symbol">'git</span> cherry-pick <span class="comment">--continue'</span></div><div class="line">gcs=<span class="symbol">'git</span> commit -S'</div><div class="line">gd=<span class="symbol">'git</span> diff'</div><div class="line">gdca=<span class="symbol">'git</span> diff <span class="comment">--cached'</span></div><div class="line">gdct=<span class="symbol">'git</span> describe <span class="comment">--tags `git rev-list --tags --max-count=1`'</span></div><div class="line">gdt=<span class="symbol">'git</span> diff-tree <span class="comment">--no-commit-id --name-only -r'</span></div><div class="line">gdw=<span class="symbol">'git</span> diff <span class="comment">--word-diff'</span></div><div class="line">gf=<span class="symbol">'git</span> fetch'</div><div class="line">gfa=<span class="symbol">'git</span> fetch <span class="comment">--all --prune'</span></div><div class="line">gfo=<span class="symbol">'git</span> fetch origin'</div><div class="line">gg=<span class="symbol">'git</span> gui citool'</div><div class="line">gga=<span class="symbol">'git</span> gui citool <span class="comment">--amend'</span></div><div class="line">ggpull=<span class="symbol">'git</span> pull origin $(git_current_branch)'</div><div class="line">ggpur=ggu</div><div class="line">ggpush=<span class="symbol">'git</span> push origin $(git_current_branch)'</div><div class="line">ggsup=<span class="symbol">'git</span> branch <span class="comment">--set-upstream-to=origin/$(git_current_branch)'</span></div><div class="line">ghh=<span class="symbol">'git</span> help'</div><div class="line">gignore=<span class="symbol">'git</span> update-index <span class="comment">--assume-unchanged'</span></div><div class="line">gignored=<span class="symbol">'git</span> ls-files -v | grep <span class="string">"^[[:lower:]]"</span>'</div><div class="line">git-svn-dcommit-push=<span class="symbol">'git</span> svn dcommit &amp;&amp; git push github master:svntrunk'</div><div class="line">gk='\gitk <span class="comment">--all --branches'</span></div><div class="line">gke='\gitk <span class="comment">--all $(git log -g --pretty=%h)'</span></div><div class="line">gl=<span class="symbol">'git</span> pull'</div><div class="line">glg=<span class="symbol">'git</span> log <span class="comment">--stat'</span></div><div class="line">glgg=<span class="symbol">'git</span> log <span class="comment">--graph'</span></div><div class="line">glgga=<span class="symbol">'git</span> log <span class="comment">--graph --decorate --all'</span></div><div class="line">glgm=<span class="symbol">'git</span> log <span class="comment">--graph --max-count=10'</span></div><div class="line">glgp=<span class="symbol">'git</span> log <span class="comment">--stat -p'</span></div><div class="line">glo=<span class="symbol">'git</span> log <span class="comment">--oneline --decorate'</span></div><div class="line">globurl=<span class="symbol">'noglob</span> urlglobber '</div><div class="line">glog=<span class="symbol">'git</span> log <span class="comment">--oneline --decorate --graph'</span></div><div class="line">gloga=<span class="symbol">'git</span> log <span class="comment">--oneline --decorate --graph --all'</span></div><div class="line">glol=<span class="symbol">'git</span> log <span class="comment">--graph --pretty</span></div><div class="line">glp=_git_log_prettily</div><div class="line">glum=<span class="symbol">'git</span> pull upstream master'</div><div class="line">gm=<span class="symbol">'git</span> merge'</div><div class="line">gmom=<span class="symbol">'git</span> merge origin/master'</div><div class="line">gmt=<span class="symbol">'git</span> mergetool <span class="comment">--no-prompt'</span></div><div class="line">gmtvim=<span class="symbol">'git</span> mergetool <span class="comment">--no-prompt --tool=vimdiff'</span></div><div class="line">gmum=<span class="symbol">'git</span> merge upstream/master'</div><div class="line">gp=<span class="symbol">'git</span> push'</div><div class="line">gpd=<span class="symbol">'git</span> push <span class="comment">--dry-run'</span></div><div class="line">gpoat=<span class="symbol">'git</span> push origin <span class="comment">--all &amp;&amp; git push origin --tags'</span></div><div class="line">gpristine=<span class="symbol">'git</span> reset <span class="comment">--hard &amp;&amp; git clean -dfx'</span></div><div class="line">gpsup=<span class="symbol">'git</span> push <span class="comment">--set-upstream origin $(git_current_branch)'</span></div><div class="line">gpu=<span class="symbol">'git</span> push upstream'</div><div class="line">gpv=<span class="symbol">'git</span> push -v'</div><div class="line">gr=<span class="symbol">'git</span> remote'</div><div class="line">gra=<span class="symbol">'git</span> remote add'</div><div class="line">grb=<span class="symbol">'git</span> rebase'</div><div class="line">grba=<span class="symbol">'git</span> rebase <span class="comment">--abort'</span></div><div class="line">grbc=<span class="symbol">'git</span> rebase <span class="comment">--continue'</span></div><div class="line">grbi=<span class="symbol">'git</span> rebase -i'</div><div class="line">grbm=<span class="symbol">'git</span> rebase master'</div><div class="line">grbs=<span class="symbol">'git</span> rebase <span class="comment">--skip'</span></div><div class="line">grep=<span class="symbol">'grep</span>  <span class="comment">--color=auto --exclude-dir=&#123;.bzr,CVS,.git,.hg,.svn&#125;'</span></div><div class="line">grh=<span class="symbol">'git</span> reset HEAD'</div><div class="line">grhh=<span class="symbol">'git</span> reset HEAD <span class="comment">--hard'</span></div><div class="line">grmv=<span class="symbol">'git</span> remote rename'</div><div class="line">grrm=<span class="symbol">'git</span> remote remove'</div><div class="line">grset=<span class="symbol">'git</span> remote set-url'</div><div class="line">grt=<span class="symbol">'cd</span> $(git rev-parse <span class="comment">--show-toplevel || echo ".")'</span></div><div class="line">gru=<span class="symbol">'git</span> reset <span class="comment">--'</span></div><div class="line">grup=<span class="symbol">'git</span> remote update'</div><div class="line">grv=<span class="symbol">'git</span> remote -v'</div><div class="line">gsb=<span class="symbol">'git</span> status -sb'</div><div class="line">gsd=<span class="symbol">'git</span> svn dcommit'</div><div class="line">gsi=<span class="symbol">'git</span> submodule init'</div><div class="line">gsps=<span class="symbol">'git</span> show <span class="comment">--pretty=short --show-signature'</span></div><div class="line">gsr=<span class="symbol">'git</span> svn rebase'</div><div class="line">gss=<span class="symbol">'git</span> status -s'</div><div class="line">gst=<span class="symbol">'git</span> status'</div><div class="line">gsta=<span class="symbol">'git</span> stash save'</div><div class="line">gstaa=<span class="symbol">'git</span> stash apply'</div><div class="line">gstc=<span class="symbol">'git</span> stash clear'</div><div class="line">gstd=<span class="symbol">'git</span> stash drop'</div><div class="line">gstl=<span class="symbol">'git</span> stash list'</div><div class="line">gstp=<span class="symbol">'git</span> stash pop'</div><div class="line">gsts=<span class="symbol">'git</span> stash show <span class="comment">--text'</span></div><div class="line">gsu=<span class="symbol">'git</span> submodule update'</div><div class="line">gts=<span class="symbol">'git</span> tag -s'</div><div class="line">gtv=<span class="symbol">'git</span> tag | sort -V'</div><div class="line">gunignore=<span class="symbol">'git</span> update-index <span class="comment">--no-assume-unchanged'</span></div><div class="line">gup=<span class="symbol">'git</span> pull <span class="comment">--rebase'</span></div><div class="line">gupv=<span class="symbol">'git</span> pull <span class="comment">--rebase -v'</span></div><div class="line">gwch=<span class="symbol">'git</span> whatchanged -p <span class="comment">--abbrev-commit --pretty=medium'</span></div><div class="line">history=<span class="symbol">'fc</span> -l <span class="number">1</span>'</div><div class="line">l=<span class="symbol">'ls</span> -lah'</div></pre></td></tr></table></figure>
<h1 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h1><p>git stash 命令可以将在当前分支修改的内容放到缓存区中，并且会建立一个缓存的list集合，方便管理。<br>如果想将修改的内容重新释放出来， git stash  apply 和 git stash poop 都可以达到这个目的</p>
<p>这两者的区别是：</p>
<p><code>git stash list</code> 查看list的集合<br><code>git stash apply @{x}</code> 可以将编号为X的缓存释放出来，但是缓存还存在于list中</p>
<p><code>git stash apply</code> 会将当前的分支的最后一次缓存的内容释放出来，但是刚才的内容还在list中</p>
<p><code>git stash pop</code> 也会将当前分支的最后一次缓存的内容释放出来，但是刚才的记录不存在list中。</p>
<h1 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h1><p>在rebase 之前一定要保证本地的仓库是干净的</p>
<p><code>git pull --rebase origin branch-name</code></p>
<p>然后解决完冲突之后再执行： <code>git add</code>用来标明冲突已经解决了</p>
<p><code>git rebase --continue</code></p>
<h1 id="变基"><a href="#变基" class="headerlink" title="变基"></a>变基</h1><p>如下，在issue1分支执行指令git rebase -i HEAD^^，会进入编辑模式:</p>
<p><img src="/img/git.png" alt="rebase"></p>
<p>如图列出了HEAD~~指向的提交对象之后的所有提交对象，每一行之前默认是pick标志，表示该提交对象正在使用，我们可以修改该标记值，随后Git根据标记值执行不同操作，标记值与操作对应关系如下：</p>
<p><img src="/img/image2.png" alt=""></p>
<ul>
<li>pick(p)，表明正在使用；</li>
<li>reword(r)，表明仍然使用该提交对象，但是需修改提交信息；</li>
<li>edit(e)，使用该提交对象，但是不合并提交对象；</li>
<li>squash(s)，使用该提交对象，但是将此提交与上一次提交对象合并；</li>
<li>fixup(f)，同squash值，但是丢失此次提交的日志信息；</li>
<li>exec(x)，后接特定脚本，保存后将执行该脚本；</li>
<li>drop(d)，移除该提交对象</li>
</ul>
<h1 id="选择变基还是合并"><a href="#选择变基还是合并" class="headerlink" title="选择变基还是合并"></a>选择变基还是合并</h1><blockquote>
<p>变基会修整历史，然后将分支历史并入主线，可以理解成美化过的历史，而合并则可以不修改历史，让分支历史依然独立存在，可以看作原始的历史。</p>
</blockquote>
<p>指的注意的是：</p>
<blockquote>
<p>永远不要对已经推到主干分支服务器或者团队其他成员的提交进行变基，我们选择变基还是合并的范围应该在自己当前工作范围内。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;git命令速查表&lt;br&gt;[&lt;a href=&quot;https://segmentfault.com/a/1190000008535266&quot;&gt;https://segmentfault.com/a/1190000008535266&lt;/a&gt;]&lt;/p&gt;
&lt;h1 id=&quot;修改上一次提交的信
    
    </summary>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>sublime的配置相关知多少</title>
    <link href="http://yoursite.com/2017/04/02/sublime%E7%9A%84%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3%E7%9F%A5%E5%A4%9A%E5%B0%91/"/>
    <id>http://yoursite.com/2017/04/02/sublime的配置相关知多少/</id>
    <published>2017-04-02T06:16:28.000Z</published>
    <updated>2017-04-07T14:30:35.794Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sublime-text-3-的常规配置"><a href="#sublime-text-3-的常规配置" class="headerlink" title="sublime text 3  的常规配置"></a>sublime text 3  的常规配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	&quot;ensure_newline_at_eof_on_save&quot;: true,</div><div class="line">	&quot;font_face&quot;: &quot;Monaco&quot;,</div><div class="line">	&quot;font_size&quot;: 16,</div><div class="line">	&quot;highlight_line&quot;: false,</div><div class="line">	&quot;highlight_modified_tabs&quot;: true,</div><div class="line">	&quot;indent_to_bracket&quot;: true,</div><div class="line">	&quot;line_padding_bottom&quot;: 3,</div><div class="line">	&quot;line_padding_top&quot;: 3,</div><div class="line">	&quot;rulers&quot;:</div><div class="line">	[</div><div class="line">		80,</div><div class="line">		100</div><div class="line">	],</div><div class="line">	&quot;scroll_past_end&quot;: true,</div><div class="line">	&quot;show_encoding&quot;: true,</div><div class="line">	&quot;show_line_endings&quot;: true,</div><div class="line">	&quot;tab_size&quot;: 2,</div><div class="line">	&quot;translate_tabs_to_spaces&quot;: true,</div><div class="line">	&quot;trim_trailing_white_space_on_save&quot;: true</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="sublime常用的插件"><a href="#sublime常用的插件" class="headerlink" title="sublime常用的插件"></a>sublime常用的插件</h2><p>使用的步骤：</p>
<p>ctrl+shift+p</p>
<p>输入  ip  即   打开  Install Packages  这个面板</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">alignment</div><div class="line">autoFileName</div><div class="line">better coffeescript</div><div class="line">bracketHighlighter</div><div class="line">docBlockr</div><div class="line">editorConfig</div><div class="line">gitGutter</div><div class="line">html-css-js prettify</div><div class="line">markdown preview</div><div class="line">pug</div><div class="line">shellScript</div><div class="line">stylus</div><div class="line">stylus-Snippets</div><div class="line">vue syntax highlight</div></pre></td></tr></table></figure>
<p>具体的插件根据需求自主进行选择性的下载，上述主要是vue+coffeeScript+pug 的开发环境比较适用一点</p>
<h2 id="sublime激活相关细节"><a href="#sublime激活相关细节" class="headerlink" title="sublime激活相关细节"></a>sublime激活相关细节</h2><p>sublime 免安装版本的下载：链接：[<a href="http://pan.baidu.com/s/1qXUYYG8">http://pan.baidu.com/s/1qXUYYG8</a>] 密码：ixs4</p>
<p>下载之后可以下载最新版本的sublime版本，然后激活最新版本的sublime [<a href="http://www.jianshu.com/p/04e1b65dd2c0">http://www.jianshu.com/p/04e1b65dd2c0</a>]</p>
<p>优雅使用Sublime Text，插件则是不可缺少的存在；而插件的备份就显得非常的重要（譬如：各平台同步；更换系统/电脑，迅速使用已安装的插件）。这事儿也很简单，只需将Packages（Preferences &gt; Browse Packages）中内容拷贝一份，同步云端即可；至于存储何处，云盘，Github，皆无不可；譬如先前有存一份于sublime_packages，每有所需只要 Down 下来，替换掉原Packages下内容就好。</p>
<p><code>ctrl+</code>/`调出控制台<br>执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">import urllib.request,os; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &apos;wb&apos;).write(urllib.request.urlopen( &apos;http://sublime.wbond.net/&apos; + pf.replace(&apos; &apos;,&apos;%20&apos;)).read())</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;sublime-text-3-的常规配置&quot;&gt;&lt;a href=&quot;#sublime-text-3-的常规配置&quot; class=&quot;headerlink&quot; title=&quot;sublime text 3  的常规配置&quot;&gt;&lt;/a&gt;sublime text 3  的常规配置&lt;/h2
    
    </summary>
    
    
      <category term="sublime" scheme="http://yoursite.com/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title>vue基础入门</title>
    <link href="http://yoursite.com/2017/03/28/vue%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2017/03/28/vue基础入门/</id>
    <published>2017-03-28T09:55:18.000Z</published>
    <updated>2017-03-28T15:25:11.538Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义全局组件"><a href="#定义全局组件" class="headerlink" title="定义全局组件"></a>定义全局组件</h1><p>所谓的全局组件是在项目中的任何一个地方都是可以使用的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Vue.use(myButton);</div></pre></td></tr></table></figure>
<p>在html代码中使用自定义的全局组件</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">myButton</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">myButton</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">myButton</span>&gt;</span>哈哈<span class="tag">&lt;/<span class="name">myButton</span>&gt;</span></div></pre></td></tr></table></figure>
<p>index.js文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span>  Vue <span class="keyword">from</span>  <span class="string">"vue"</span>;</div><div class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">"./Button.vue"</span>;</div><div class="line"><span class="keyword">export</span>  <span class="keyword">default</span> &#123;</div><div class="line">    install()&#123;</div><div class="line">        Vue.component(<span class="string">"myButton"</span>, Button);<span class="comment">//注册全局组件</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Button.vue的文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;template&gt;</div><div class="line">    &lt;button @click=&quot;fn()&quot;&gt;</div><div class="line">        &lt;slot&gt;&lt;/slot&gt;</div><div class="line">    &lt;/button&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script type=&quot;text/ecmascript-6&quot;&gt;</div><div class="line">    export default &#123;</div><div class="line">        methods: &#123;</div><div class="line">            fn()&#123;</div><div class="line">                alert(1);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style lang=&quot;stylus&quot; rel=&quot;stylesheet/stylus&quot;&gt;</div><div class="line">    button</div><div class="line">        width: 100px</div><div class="line">        height: 30px</div><div class="line">        background: blue</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h1 id="vm-set-和-Vue-set-方法"><a href="#vm-set-和-Vue-set-方法" class="headerlink" title="vm.$set 和  Vue.set 方法"></a>vm.$set 和  Vue.set 方法</h1><p><img src="/img/$set.png" alt="vue中的变化检测的问题">;</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(a,index) in arr1"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>&#123;&#123;a&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(a,index) in arr2"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>&#123;&#123;a&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</div><div class="line">        <span class="attr">el</span>: <span class="string">"#app"</span>,</div><div class="line">        <span class="attr">data</span>: &#123;</div><div class="line">            <span class="attr">comp</span>: <span class="string">"hello"</span>,</div><div class="line">            <span class="attr">arr1</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</div><div class="line">            <span class="attr">arr2</span>: [<span class="string">"111"</span>, <span class="string">"222"</span>, <span class="string">"333"</span>]</div><div class="line">        &#125;,</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">    <span class="built_in">console</span>.log(vm.$data);</div><div class="line">    <span class="comment">//在vm上的属性进行了改变不具有响应式</span></div><div class="line">    vm.arr1[<span class="number">1</span>] = <span class="string">"hahhah"</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//      Vue.set(vm.arr1, 1, "hahha");</span></div><div class="line">    vm.$set(vm.$data.arr1, <span class="number">1</span>, <span class="string">"hahahah"</span>);<span class="comment">//这个时候页面会重新的跟新一遍</span></div><div class="line"></div><div class="line">    vm.arr2[<span class="number">2</span>] = <span class="string">"你好"</span>;</div><div class="line">    </div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><h2 id="vue-resource"><a href="#vue-resource" class="headerlink" title="vue-resource"></a>vue-resource</h2><p>参考vue-resource全攻略</p>
<p>[vue-resource][<a href="http://www.cnblogs.com/keepfool/p/5657065.html#h1_1">http://www.cnblogs.com/keepfool/p/5657065.html#h1_1</a>]</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;定义全局组件&quot;&gt;&lt;a href=&quot;#定义全局组件&quot; class=&quot;headerlink&quot; title=&quot;定义全局组件&quot;&gt;&lt;/a&gt;定义全局组件&lt;/h1&gt;&lt;p&gt;所谓的全局组件是在项目中的任何一个地方都是可以使用的&lt;/p&gt;
&lt;figure class=&quot;highligh
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack配置详解</title>
    <link href="http://yoursite.com/2017/03/01/webpack%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/03/01/webpack配置详解/</id>
    <published>2017-03-01T02:48:04.000Z</published>
    <updated>2017-03-05T07:03:01.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;webpack&quot;&gt;&lt;a href=&quot;#webpack&quot; class=&quot;headerlink&quot; title=&quot;webpack&quot;&gt;&lt;/a&gt;webpack&lt;/h2&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>angular中的模块化和依赖注入</title>
    <link href="http://yoursite.com/2017/02/27/angular%E4%B8%AD%E7%9A%84%E6%A8%A1%E5%9D%97%E5%8C%96%E5%92%8C%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>http://yoursite.com/2017/02/27/angular中的模块化和依赖注入/</id>
    <published>2017-02-27T07:37:34.000Z</published>
    <updated>2017-02-27T12:11:08.260Z</updated>
    
    <content type="html"><![CDATA[<h1 id="angular中模块化"><a href="#angular中模块化" class="headerlink" title="angular中模块化"></a>angular中模块化</h1><p>在Angular中，提供了一种方法来定义模块，可以用来组织应用中一块功能区域的依赖关系，同时还提供了一种机制，可以自动解析依赖关系（或者叫依赖注入），我们把这些叫做依赖服务，因为这些注入能够为应用提供特殊的服务。</p>
<p>angular.module(moduleName,requires,configFn);</p>
<p>moduleName：模块的名称<br>requires:   依赖列表（也就是被注册到模块中的有着依赖关系的服务：可以是angular自带的服务，也可以是自己定义的服务，还可以是第三方的服务）<br>configFn：(可选参数)用来对该模块进行一些配置</p>
<p>如通过配置函数定义服务、过滤器和控制器等操作</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>, [], </div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">$filterProvider, $provide, $controllerProvider</span>) </span>&#123;</div><div class="line">    $provide.service(<span class="string">'Data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">name</span>: <span class="string">'张三'</span>,</div><div class="line">                <span class="attr">age</span>: <span class="string">'20'</span>,</div><div class="line">                <span class="attr">city</span>: <span class="string">'上海'</span></div><div class="line">            &#125;</div><div class="line">        ];</div><div class="line">    &#125;);</div><div class="line">    $filterProvider.register(<span class="string">'filterAge'</span>,</div><div class="line">     <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> newObj = [];</div><div class="line">            angular.forEach(obj, <span class="function"><span class="keyword">function</span> (<span class="params">o</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (o.age &gt; <span class="number">20</span>) &#123;</div><div class="line">                    newObj.push(o);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            <span class="keyword">return</span> newObj;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="comment">//快捷方式：module.controller实现</span></div><div class="line">    $controllerProvider.register(<span class="string">'firstController'</span>, </div><div class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">$scope, Data</span>) </span>&#123;</div><div class="line">        $scope.data = Data;</div><div class="line">    &#125;)</div><div class="line">&#125;)</div><div class="line"><span class="comment">//  快捷方式：module.filter 实现</span></div><div class="line">.filter(<span class="string">'filterCity'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> newObj = [];</div><div class="line"></div><div class="line">        angular.forEach(obj, <span class="function"><span class="keyword">function</span> (<span class="params">o</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (o.city === <span class="string">'上海'</span>) &#123;</div><div class="line">                newObj.push(o);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> newObj;</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>angular.module(moduleName): 获取模块</p>
<h2 id="module和-provide"><a href="#module和-provide" class="headerlink" title="module和 $provide"></a>module和 $provide</h2><p>module和$provide都是用来注册服务的，他们都可以定义provider()、factory() 、service()、constant()、value()服务：通过$provide定义服务类似于下面的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myApp = angular.module(<span class="string">'myApp'</span>,[],<span class="function"><span class="keyword">function</span>(<span class="params">$provide</span>)</span>&#123;</div><div class="line">       $provide.provider(<span class="string">'CustomService'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.$get = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="attr">message</span> : <span class="string">'CustomService Message'</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    $provide.factory(<span class="string">'CustomFactory'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</div><div class="line">    &#125;);</div><div class="line">  </div><div class="line">    $provide.service(<span class="string">'CustomService2'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'aaa'</span>;</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>angular.Module中也提供了这5个服务注册方法。其实2者功能是完全一样的，就是用来向DI容器注册服务到injector中</p>
<h2 id="angular-injector"><a href="#angular-injector" class="headerlink" title="angular.injector()"></a>angular.injector()</h2><p>使用angular.injector();也能获取到注入器，但是没有和模块绑定。这种做法是没有意义的，相当于是你创建了一个空的DI容器，里面都没有服务别人怎么用呢。正确的做法是，在创建注入器的时候，指定需要加载的模块。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建myModule模块、注册服务</span></div><div class="line"><span class="keyword">var</span> myModule = angular.module(<span class="string">'Module0'</span>, []);</div><div class="line">myModule.service(<span class="string">'service1'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">this</span>.name = <span class="string">"wpl"</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 创建herModule模块、注册服务</span></div><div class="line"><span class="keyword">var</span> herModule = angular.module(<span class="string">'module1'</span>, []);</div><div class="line">herModule.service(<span class="string">'service2'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">			<span class="keyword">this</span>.age = <span class="number">10</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 加载了2个模块中的服务</span></div><div class="line"><span class="keyword">var</span> injector = angular.injector([<span class="string">"Module0"</span>,<span class="string">"Module1"</span>]);</div><div class="line">alert(injector.get(<span class="string">"service1"</span>).name);<span class="comment">//wpl</span></div><div class="line">alert(injector.get(<span class="string">"service2"</span>).age);<span class="comment">//10</span></div></pre></td></tr></table></figure>
<p>这个例子中如果只加载了myMoudle，那么得到的injector就不能访问herMoudle下的服务。这里特别需要注意下：angular.injector()可以调用多次，每次都返回新建的injector对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> injector1 = angular.injector([<span class="string">"Module0"</span>,<span class="string">"Module1"</span>]);</div><div class="line"><span class="keyword">var</span> injector2 = angular.injector([<span class="string">"Module0"</span>,<span class="string">"Module1"</span>]);</div><div class="line">alert(injector1 == injector2);<span class="comment">//false</span></div></pre></td></tr></table></figure>
<h1 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h1><p>在angular中是如何injector是如何处理依赖注入的关系的呢？有三种方式申明一个组件的依赖注入的关系</p>
<h2 id="隐式依赖"><a href="#隐式依赖" class="headerlink" title="隐式依赖"></a>隐式依赖</h2><p>假定函数的参数名就是所以来服务的名字</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyController</span>(<span class="params">$scope, $http</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>injector可以通过检查它的参数名来推断出哪些服务需要被注入，但是这种方式的定义在js压缩的情况下会使得参数重命名。不推荐使用。</p>
<h2 id="inject属性声明"><a href="#inject属性声明" class="headerlink" title="$inject属性声明"></a>$inject属性声明</h2><p>为了在允许压缩工具重命名函数参数的前提下还能注入正确的服务，函数需要使用$inject属性来声明依赖。$inject是一个包含被注入服务名字的数组。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">var Ctrl = function($scope, $http) &#123;</div><div class="line">  ...</div><div class="line">&#125;</div><div class="line">Ctrl[&apos;$inject&apos;] = [&apos;$scope&apos;, &apos;greeter&apos;];</div><div class="line">angular.module(&apos;Ctrl&apos;,Ctrl);</div></pre></td></tr></table></figure>
<p>在这方式中，$inject数组中服务的顺序需要与函数参数名中服务的顺序保持一致。以上边的示例代码为例，$scope服务会被注入到renamed$scope中，greeter会被注入到renamedGreeter中。这里的顺序一定要保持对应。</p>
<p>由于这种方式将声明信息作为属性赋给一个函数，它比较适合定义Controller。</p>
<h2 id="数组申明"><a href="#数组申明" class="headerlink" title="数组申明"></a>数组申明</h2><p>使用$inject属性的方式声明依赖在定义directives或services的时候并不是太方便，因为这些组件是通过factory方法定义的。</p>
<p>比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">someModule.factory(&apos;greeter&apos;, function($window) &#123;</div><div class="line">  // ...</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>会导致代码膨胀为以下的形式(需要额外定义一个临时变量)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var greeterFactory = function(renamed$window) &#123;</div><div class="line">  // ...</div><div class="line">&#125;;</div><div class="line">greeterFactory.$inject = [&apos;$window&apos;];</div><div class="line"></div><div class="line">someModule.factory(&apos;greeter&apos;, greeterFactory);</div></pre></td></tr></table></figure></p>
<p>为了避免这种情况，第三种声明方式允许你以如下方式声明：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">someModule.factory(&apos;greeter&apos;,[&apos;$window&apos;, </div><div class="line">function($window) &#123;</div><div class="line">  // ...</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>注意： 字符串是不会被压缩的，需要保证的是函数的顺序和依赖的服务顺序要保持一致</p>
<p>在这里，我们没有简单的把一个factory作为第二个参数，取而代之的是一个包含一系列服务名的字符串以及一个函数的数组。<br>以上三种方式可以互换，且可以在Angular系统中任何支持依赖注入的地方使用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;angular中模块化&quot;&gt;&lt;a href=&quot;#angular中模块化&quot; class=&quot;headerlink&quot; title=&quot;angular中模块化&quot;&gt;&lt;/a&gt;angular中模块化&lt;/h1&gt;&lt;p&gt;在Angular中，提供了一种方法来定义模块，可以用来组织应用中一块
    
    </summary>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>react基础</title>
    <link href="http://yoursite.com/2017/02/24/react%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2017/02/24/react基础/</id>
    <published>2017-02-24T11:40:19.000Z</published>
    <updated>2017-02-24T11:56:20.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="认识React"><a href="#认识React" class="headerlink" title="认识React"></a>认识React</h1><p>React是Facebook于2013年开源的一套框架，它从刚开始的UI框架逐渐演变成了新的Web解决方案。它的主要特点有三个: </p>
<p>—Just the UI</p>
<p>—Virtual DOM</p>
<p>—data flow</p>
<p>一个语言的框架，重要的不是记住它的接口，而是要掌握它的思想，要理解并掌握React，需要从这三个特性入手。</p>
<h2 id="Just-the-UI"><a href="#Just-the-UI" class="headerlink" title="Just the UI"></a>Just the UI</h2><p>没错，React在UI上有非常有优势的地方，这个优势主要来源于React可以将一个网页，甚至是一个项目工程的静态页面切割成不同的块，也就是组件。</p>
<p>组件化的开发可以避免模板(如ejs)开发复杂的逻辑，同时它不影响其他框架库类合并使用，更有利于团队开发。可见React使开发有了更便捷，使维护更简单。</p>
<h2 id="Virtual-DOM"><a href="#Virtual-DOM" class="headerlink" title="Virtual DOM"></a>Virtual DOM</h2><p>熟悉前端的人都知道，传统的DOM渲染及操作是很耗时的，特别是在DOM操作比较频繁的情况下，DOM是性能出现瓶颈的主要因素。</p>
<p>而React采用虚拟DOM，利用diff算法来进行DOM管理，这里的虚拟DOM其实是保存在内存中一种数据结构，所以速度是非常快的。而且虚拟DOM可以在服务器端渲染，在性能方面这是很有创新的。可见React使网站性能更好。</p>
<h2 id="data-flow"><a href="#data-flow" class="headerlink" title="data flow"></a>data flow</h2><p>React中的数据流与Angular是不同的，或许你认为Angular的双向数据流对于数据交互非常轻松，但是React基于属性Props和状态State的单向数据流会给你带来条理非常清晰的逻辑，当然你还可以引入其他框架或者库类来进行与后台的数据交换，这一切的数据都是由组件(React中组件就是一个个状态机)的属性和状态决定。可见React使任务逻辑更清晰。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;认识React&quot;&gt;&lt;a href=&quot;#认识React&quot; class=&quot;headerlink&quot; title=&quot;认识React&quot;&gt;&lt;/a&gt;认识React&lt;/h1&gt;&lt;p&gt;React是Facebook于2013年开源的一套框架，它从刚开始的UI框架逐渐演变成了新的Web解
    
    </summary>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>gulp详解</title>
    <link href="http://yoursite.com/2017/02/24/gulp%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/02/24/gulp详解/</id>
    <published>2017-02-24T11:20:03.000Z</published>
    <updated>2017-02-25T11:42:49.212Z</updated>
    
    <content type="html"><![CDATA[<h1 id="gulp-vs-grunt"><a href="#gulp-vs-grunt" class="headerlink" title="gulp vs  grunt"></a>gulp vs  grunt</h1><p>什么是gulp?<br>Gulp是一个基于流的自动化构建工具，gulp无需写一大堆的配置参数，API也非常的简单，gulp使用的是nodejs中的stream的读写的方式，其速度更快。需要注意两点，一为自动化，二为流。</p>
<p>在Gulp之前又一款名为Grunt的工具拉开了前端自动化的帷幕。所谓自动化，就是自动帮你完成一些工程中需要我们去手动完成的一些重复繁琐的操作，简单的比如预处理，压缩，合并文件等等。而”流”，代表着Gulp通过IO流的通道高效地进行自动化任务，前面提到的Grunt是与之相反，它每进行一次任务都会打开一次IO通道，任务耗时自然没有Gulp好。</p>
<p>Gulp应该和Grunt比较，他们的区别我就不说了，说说用处吧。Gulp / Grunt 是一种工具，能够优化前端工作流程。比如自动刷新页面、combo、压缩css、js、编译less等等。简单来说，就是使用Gulp/Grunt，然后配置你需要的插件，就可以把以前需要手工做的事情让它帮你做了</p>
<p>了解Grunt -&gt;  官网 :  [<a href="http://gruntjs.com/">http://gruntjs.com/</a>] 中文官网 :  [<a href="http://www.gruntjs.net/">http://www.gruntjs.net/</a>]</p>
<p>了解Gulp -&gt;  官网 :   [<a href="http://gulpjs.com/">http://gulpjs.com/</a>] 中文官网 :  [<a href="http://www.gulpjs.com.cn/">http://www.gulpjs.com.cn/</a>]</p>
<h1 id="browserify-vs-webpack"><a href="#browserify-vs-webpack" class="headerlink" title="browserify vs  webpack"></a>browserify vs  webpack</h1><p>browserify与webpack都是当下流行的commonjs模块(或es6模块)合并打包工具，打包后的js文件可以直接运行在浏览器环境中</p>
<p>说到 browserify / webpack ，那还要说到 seajs / requirejs 。这四个都是JS模块化的方案。其中seajs / require 是一种类型，browserify / webpack 是另一种类型。</p>
<p>seajs / require : 是一种在线”编译” 模块的方案，相当于在页面上加载一个 CMD/AMD 解释器。这样浏览器就认识了 define、exports、module 这些东西。也就实现了模块化。browserify / webpack : 是一个预编译模块的方案，相比于上面 ，这个方案更加智能。没用过browserify，这里以webpack为例。首先，它是预编译的，不需要在浏览器中译成浏览器认识的JS。这样就知道，Gulp是一个工具，而webpack等等是模块化方案。Gulp也可以配置seajs、requirejs甚至webpack的插件。</p>
<p>其实每个工具的官网上都有对工具的设计思想、要解决的问题、与其他工具的对比<br>比如，你的工程模块依赖很简单，不需要把js或各种加载解释器。另外，你在本地直接写JS，不管是 AMD / CMD / ES6 风格的模块化，它都能认识，并且编资源打包，只需要简单的合并、压缩，在页面中引用就好了。那就不需要Browserify、Webpack。Gulp就够用了。反过来，如果你的工程庞大，页面中使用了很多库（SPA很容易出现这种情况），那就可以选择某种模块化方案。至于是用Browserify还是Webpack就需要根据其他因素来判断了。比如团队已经在使用了某种方案，大家都比较熟悉了。再比如，你喜欢Unix小工具协作的方式，那就Browserify。充分了解各种工具、方案，选择合适的和自己需要的。没有绝对的好。优点换了场景也会变成缺点。</p>
<p>Browserify 可以让你使用类似于 node 的 require() 的方式来组织浏览器端的 Javascript 代码，通过预编译让前端 Javascript 可以直接使用 Node NPM 安装的一些库。</p>
<p>了解Browserify -&gt;  官网 :  [<a href="http://browserify.org/">http://browserify.org/</a>]</p>
<p>Browserify解决了js在浏览器端的依赖问题，但是还有一个更为强大的工具名曰 webpack !它可以将js,css,png，字体文件等很多文件的依赖问题解决，而Browserify只能解决js。但已经足够强大，有关webpack的内容我和大家都还需要慢慢去了解。</p>
<p>那gulp和webpack的不同之处有哪些呢？</p>
<ul>
<li>gulp的任务机制和流式管道函数和webpack的配置参数风格有着显著区别，它能使开发者更清晰地了解项目的构建流程。</li>
<li>由于gulp是编程式风格的，所以使用起来可定制化的功能也更灵活一些，可应对一些构建过程较为复杂的情况。<br>就</li>
</ul>
<p>browserify与webpack都是当下流行的commonjs模块(或es6模块)合并打包工具，打包后的js文件可以直接运行在浏览器环境中</p>
<p> Webpack 的一个最好的优点就是全包了，是一站式的、苹果式的、“omakase”式的，最多只要分享一个配置文件就可以。但是 browserify 是需要你自己去配置的。<br>详细的理解可以参考下图：</p>
<p>完全使用Browserify生成前端代码会有什么问题？<br>[<a href="https://www.zhihu.com/question/35993395/answer/65534826">https://www.zhihu.com/question/35993395/answer/65534826</a>]<br>前端构建工具webpack有什么缺陷？<br>[<a href="https://www.zhihu.com/question/34460535/answer/58752148">https://www.zhihu.com/question/34460535/answer/58752148</a>]</p>
<p>推荐博客：基于 Gulp+Browserify构建ES6 环境下的自动化前端项目<br>[<a href="https://segmentfault.com/a/1190000004917668#articleHeader0">https://segmentfault.com/a/1190000004917668#articleHeader0</a>]<br>跳出gulp打包中流的不兼容的坑<br>[<a href="https://segmentfault.com/a/1190000000711469">https://segmentfault.com/a/1190000000711469</a>]</p>
<p><img src="/img/tool.jpg" alt="比较"></p>
<h1 id="gulp的理解"><a href="#gulp的理解" class="headerlink" title="gulp的理解"></a>gulp的理解</h1><h2 id="gulp的作用"><a href="#gulp的作用" class="headerlink" title="gulp的作用"></a>gulp的作用</h2><p>gulp是可以自动化执行任务的工具 在平时开发的流程里面,一定有一些任务需要手工重复得执行，比如:</p>
<ul>
<li>把文件从开发目录拷贝到生产目录</li>
<li>把多个 JS 或者 CSS 文件合并成一个文件</li>
<li>对JS文件和CSS进行压缩</li>
<li>把sass或者less文件编译成CSS</li>
<li>压缩图像文件</li>
<li>创建一个可以实时刷新页面内容的本地服务器</li>
<li>只要你觉得有些动作是要重复去做的,就可以把这些动作创建成一个gulp任务 然后在指定的条件下自动执行 比如在less源文件发生改变后自动编译成css文件</li>
</ul>
<h2 id="gulp的特点"><a href="#gulp的特点" class="headerlink" title="gulp的特点"></a>gulp的特点</h2><ul>
<li>易于使用 通过代码优于配置的策略，Gulp 让简单的任务简单，复杂的任务可管理。</li>
<li>快速构建 利用 node.js 流的威力，你可以快速构建项目并减少频繁的 IO 操作。前一级的输出，直接变成后一级的输入，使得在操作上非常简单</li>
<li>高质量的插件 Gulp 严格的插件指南确保插件如你期望的那样简洁地工作。</li>
<li>易于学习 通过最少的 API，掌握 gulp 毫不费力，构建工作尽在掌握。</li>
</ul>
<h2 id="流"><a href="#流" class="headerlink" title="流"></a>流</h2><h2 id="流的理解"><a href="#流的理解" class="headerlink" title="流的理解"></a>流的理解</h2><ul>
<li>Stream是nodejs各种对象实现的抽象接口。</li>
<li>所有的stream对象都是EventEmitter的实例,可以发射事件。</li>
<li>流是一种有起点和终点的数据传输手段。</li>
<li>上一个的输出是下一个的输入</li>
</ul>
<h2 id="gulp中的流"><a href="#gulp中的流" class="headerlink" title="gulp中的流"></a>gulp中的流</h2><ul>
<li>gulp正是通过代码优于配置的策略来尽量简化任务编写的工作。</li>
<li>类似jquery里的链式操作，把各个方法串连起来构建完整的任务。</li>
<li>用gulp编写任务也可看作是用Node.js代码编写任务。</li>
<li>当使用流时,gulp不需要生成大量的中间文件，只将最后的输出写入磁盘，整个过程因此变得非常快。</li>
</ul>
<h1 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h1><p>首先确保你已经正确安装了nodejs环境。然后以全局方式安装gulp：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp -g</div></pre></td></tr></table></figure></p>
<p>全局安装gulp后，还需要在每个要使用gulp的项目中都单独安装一次。把目录切换到你的项目文件夹中，然后在命令行中执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp</div></pre></td></tr></table></figure>
<p>如果想在安装的时候把gulp写进项目package.json文件的依赖中，则可以加上–save-dev：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp --save-dev</div></pre></td></tr></table></figure></p>
<p>于是提出一个疑问，为什么gulp在全局安装了一次，还要在本地中安装，这样是为了做到版本灵活。比如在你的项目中使用是gulp使用的是1.0 然而其他人从github上下载你的项目运行的时候，如果他的机器上使用的gulp是2.0的话，那么这样的话，会导致版本的问题，这样项目就会由于版本的问题启动不起来，但是如果你在package.json文件中配置了gulp版本的话，这样就可以避免这样的问题。<br>参考答案： [<a href="http://stackoverflow.com/questions/25713618/what-is-the-point-of-double-install-in-gulp">http://stackoverflow.com/questions/25713618/what-is-the-point-of-double-install-in-gulp</a>]</p>
<h1 id="开始使用gulp"><a href="#开始使用gulp" class="headerlink" title="开始使用gulp"></a>开始使用gulp</h1><h2 id="创建gulpfile-js文件"><a href="#创建gulpfile-js文件" class="headerlink" title="创建gulpfile.js文件"></a>创建gulpfile.js文件</h2><p>创建gulpfile.js文件到你的项目中，之后要做的事情就是在gulpfile.js文件中定义我们的任务了。下面是一个最简单的gulpfile.js文件内容示例，它定义了一个默认的任务。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line">gulp.task(<span class="string">'default'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'hello gulp'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>此时的文件目录结构：</p>
<p>├── gulpfile.js<br>├── node_modules<br>│ └── gulp<br>└── package.json</p>
<h2 id="运行gulp任务"><a href="#运行gulp任务" class="headerlink" title="运行gulp任务"></a>运行gulp任务</h2><p>要运行gulp任务，只需切换到存放gulpfile.js文件的目录(windows平台请使用cmd或者Power Shell等工具)，然后在命令行中执行gulp命令就行了，gulp后面可以加上要执行的任务名，例如gulp task1，如果没有指定任务名，则会执行任务名为default的默认任务。</p>
<h1 id="gulp的四个API"><a href="#gulp的四个API" class="headerlink" title="gulp的四个API"></a>gulp的四个API</h1><p>使用gulp，仅需知道4个API即可：<br><code>gulp.task()</code>,<code>gulp.src()</code>,<code>gulp.dest()</code>,<code>gulp.watch()</code></p>
<h2 id="gulp-src"><a href="#gulp-src" class="headerlink" title="gulp.src()"></a>gulp.src()</h2><p>在介绍这个API之前我们首先来说一下Grunt.js和Gulp.js工作方式的一个区别。Grunt主要是以文件为媒介来运行它的工作流的，比如在Grunt中执行完一项任务后，会把结果写入到一个临时文件中，然后可以在这个临时文件内容的基础上执行其它任务，执行完成后又把结果写入到临时文件中，然后又以这个为基础继续执行其它任务…就这样反复下去。而在Gulp中，使用的是Nodejs中的stream(流)，首先获取到需要的stream，然后可以通过stream的<code>pipe()</code>方法把流导入到你想要的地方，比如Gulp的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写入到文件中。所以Gulp是以stream为媒介的，它不需要频繁的生成临时文件，这也是Gulp的速度比Grunt快的一个原因。再回到正题上来，<code>gulp.src()</code>方法正是用来获取流的，但要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流(Vinyl files)，这个虚拟文件对象中存储着原始文件的路径、文件名、内容等信息，这个我们暂时不用去深入理解，你只需简单的理解可以用这个方法来读取你需要操作的文件就行了。其语法为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.src(globs[, options])</div></pre></td></tr></table></figure>
<p><strong>globs</strong>参数是文件匹配模式(类似正则表达式)，用来匹配文件路径(包括文件名)，当然这里也可以直接指定某个具体的文件路径。当有多个匹配模式时，该参数可以为一个数组。<br><strong>options</strong>为可选参数。通常情况下我们不需要用到。</p>
<p>gulp内部使用了node-glob模块来实现其文件的匹配功能，下面是一些常见的匹配：</p>
<p><code>*</code>匹配文件路径中的0个或多个字符，但不会匹配路径分隔符，除非路径分隔符出现在末尾<br><code>**</code>匹配路径中的0个或多个目录及其子目录,需要单独出现，即它左右不能有其他东西了。如果出现在末尾，也能匹配文件。<br><code>?</code>匹配文件路径中的一个字符(不会匹配路径分隔符)<br><code>[...]</code>匹配方括号中出现的字符中的任意一个，当方括号中第一个字符为^或!时，则表示不匹配方括号中出现的其他字符中的任意一个，类似js正则表达式中的用法<br><code>!(pattern|pattern|pattern)</code> 匹配任何与括号中给定的任一模式都不匹配的<br><code>?(pattern|pattern|pattern)</code> 匹配括号中给定的任一模式0次或1次，类似于js正则中的<code>(pattern|pattern|pattern)?</code><br><code>+(pattern|pattern|pattern)</code> 匹配括号中给定的任一模式至少1次，类似于js正则中的<code>(pattern|pattern|pattern)+</code><br><code>*(pattern|pattern|pattern)</code>匹配括号中给定的任一模式0次或多次，类似于js正则中的<code>(pattern|pattern|pattern)*</code><br><code>@(pattern|pattern|pattern</code> 匹配括号中给定的任一模式1次，类似于js正则中的<code>(pattern|pattern|pattern)</code></p>
<p>示例：</p>
<p><code>*</code> 能匹配 <code>a.js</code>,<code>x.y</code>,<code>abc</code>,<code>abc/</code>,但不能匹配<code>a/b.js</code><br><code>*.*</code> 能匹配 <code>a.js</code>,<code>style.css</code>,<code>a.b</code>,<code>x.y</code><br><code>*/*/*.js</code> 能匹配 <code>a/b/c.js</code>,<code>x/y/z.js</code>,不能匹配<code>a/b.js</code>,<code>a/b/c/d.js</code><br><code>**</code>能匹配 <code>abc</code>,<code>a/b.js</code>,<code>a/b/c.js</code>,<code>x/y/z</code>,<code>x/y/z/a.b</code>,能用来匹配所有的目录和文件<br><code>**/*.js</code> 能匹配 <code>foo.js</code>,<code>a/foo.js</code>,<code>a/b/foo.js</code>,<code>a/b/c/foo.js</code><br><code>a/**/z</code> 能匹配 <code>a/z</code>,<code>a/b/z,a/b/c/z</code>,<code>a/d/g/h/j/k/z</code><br><code>a/**b/z</code>能匹配 <code>a/b/z</code>,<code>a/sb/z</code>,但不能匹配<code>a/x/sb/z</code>,因为只有单<em><em><code>**</code></em></em>单独出现才能匹配多级目录<br><code>?.js</code> 能匹配 <code>a.js</code>,<code>b.js</code>,<code>c.js</code><br><code>a??</code> 能匹配 <code>a.b</code>,<code>abc</code>,但不能匹配<code>ab/</code>,因为它不会匹配路径分隔符<br><code>[xyz].js</code> 只能匹配 <code>x.js</code>,<code>y.js</code>,<code>z.js</code>,不会匹配<code>xy.js</code>,<code>xyz.js</code>等,整个中括号只代表一个字符<br><code>[^xyz].js</code> 能匹配 <code>a.js</code>,<code>b.js</code>,<code>c.js</code>等,不能匹配<code>x.js</code>,<code>y.js</code>,<code>z.js</code></p>
<p>当有多种匹配模式时可以使用数组</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//使用数组的方式来匹配多种文件</div><div class="line">gulp.src([&apos;js/*.js&apos;,&apos;css/*.css&apos;,&apos;*.html&apos;])</div></pre></td></tr></table></figure>
<p>使用数组的方式还有一个好处就是可以很方便的使用排除模式，在数组中的单个匹配模式前加上!即是排除模式，它会在匹配的结果中排除这个匹配，要注意一点的是不能在数组中的第一个元素中使用排除模式</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//匹配所有js文件，但排除掉以b开头的js文件</div><div class="line">gulp.src([*.js,&apos;!b*.js&apos;]) </div><div class="line">//不会排除任何文件，因为排除模式不能出现在数组的第一个元素中</div><div class="line">gulp.src([&apos;!b*.js&apos;,*.js])</div></pre></td></tr></table></figure>
<p>此外，还可以使用展开模式。展开模式以花括号作为定界符，根据它里面的内容，会展开为多个模式，最后匹配的结果为所有展开的模式相加起来得到的结果。展开的例子如下：</p>
<p><code>a{b,c}d</code> 会展开为 <code>abd</code>,<code>acd</code><br><code>a{b,}c</code>会展开为 <code>abc</code>,<code>ac</code><br><code>a{0..3}d</code> 会展开为 <code>a0d</code>,<code>a1d</code>,<code>a2d</code>,<code>a3d</code><br><code>a{b,c{d,e}f}g</code> 会展开为 <code>abg</code>,<code>acdfg</code>,<code>acefg</code><br><code>a{b,c}d{e,f}g</code> 会展开为 <code>abdeg</code>,<code>acdeg</code>,<code>abdeg</code>,<code>abdfg</code></p>
<h2 id="gulp-dest"><a href="#gulp-dest" class="headerlink" title="gulp.dest()"></a>gulp.dest()</h2><p>gulp.dest()方法是用来写文件的，其语法为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.dest(path[,options])</div></pre></td></tr></table></figure>
<p>path为写入文件的路径<br>options为一个可选的参数对象，通常我们不需要用到</p>
<p>要想使用好<code>gulp.dest()</code>这个方法，就要理解给它传入的路径参数与最终生成的文件的关系。<br>gulp的使用流程一般是这样子的：首先通过<code>gulp.src()</code>方法获取到我们想要处理的文件流，然后把文件流通过pipe方法导入到gulp的插件中，最后把经过插件处理后的流再通过pipe方法导入到<code>gulp.dest()</code>中，<code>gulp.dest()</code>方法则把流中的内容写入到文件中，这里首先需要弄清楚的一点是，我们给<code>gulp.dest()</code>传入的<strong>路径参数</strong>，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，所以生成的文件名是由导入到它的文件流决定的，<strong>即使我们给它传入一个带有文件名的路径参数，然后它也会把这个文件名当做是目录名</strong>，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line">gulp.src(<span class="string">'script/jquery.js'</span>)</div><div class="line">.pipe(gulp.dest(<span class="string">'dist/foo.js'</span>));</div><div class="line"><span class="comment">//最终生成的文件路径为 dist/foo.js/jquery.js,而不是dist/foo.js</span></div></pre></td></tr></table></figure>
<p>要想改变文件名，可以使用插件gulp-rename</p>
<p>下面说说生成的文件路径与我们给<code>gulp.dest()</code>方法传入的路径参数之间的关系。<br><code>gulp.dest(path)</code>生成的文件路径是我们传入的path参数后面再加上<code>gulp.src()</code>中有通配符开始出现的那部分路径。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = reruire(<span class="string">'gulp'</span>);</div><div class="line"><span class="comment">//有通配符开始出现的那部分路径为 **/*.js</span></div><div class="line">gulp.src(<span class="string">'script/**/*.js'</span>)</div><div class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>)); </div><div class="line"><span class="comment">//最后生成的文件路径为 dist/**/*.js</span></div><div class="line"><span class="comment">//如果 **/*.js 匹配到的文件为 jquery/jquery.js ,</span></div><div class="line"><span class="comment">//则生成的文件路径为 dist/jquery/jquery.js</span></div></pre></td></tr></table></figure>
<p>再举一些例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">gulp.src(<span class="string">'script/avalon/avalon.js'</span>) </div><div class="line"><span class="comment">//没有通配符出现的情况</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>)); </div><div class="line"><span class="comment">//最后生成的文件路径为 dist/avalon.js</span></div><div class="line"></div><div class="line"><span class="comment">//有通配符开始出现的那部分路径为 **/underscore.js</span></div><div class="line">gulp.src(<span class="string">'script/**/underscore.js'</span>)</div><div class="line">    <span class="comment">//假设匹配到的文件为script/util/underscore.js</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>)); </div><div class="line">   <span class="comment">//则最后生成的文件路径为 dist/util/underscore.js</span></div><div class="line"></div><div class="line">gulp.src(<span class="string">'script/*'</span>) <span class="comment">//有通配符出现的那部分路径为 *</span></div><div class="line">    <span class="comment">//假设匹配到的文件为script/zepto.js    </span></div><div class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>)); </div><div class="line">   <span class="comment">//则最后生成的文件路径为 dist/zepto.js</span></div></pre></td></tr></table></figure>
<p>通过指定<code>gulp.src()</code>方法配置参数中的base属性，我们可以更灵活的来改变<code>gulp.dest()</code>生成的文件路径。<br>当我们没有在<code>gulp.src()</code>方法中配置base属性时，base的默认值为通配符开始出现之前那部分路径，例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.src(<span class="string">'app/src/**/*.css'</span>) <span class="comment">//此时base的值为 app/src</span></div></pre></td></tr></table></figure>
<p>上面我们说的<code>gulp.dest()</code>所生成的文件路径的规则，其实也可以理解成，用我们给gulp.dest()传入的路径替换掉<code>gulp.src()</code>中的base路径，最终得到生成文件的路径。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.src(<span class="string">'app/src/**/*.css'</span>)</div><div class="line">     <span class="comment">//此时base的值为app/src,也就是说它的base路径为app/src</span></div><div class="line">     <span class="comment">//设该模式匹配到了文件 app/src/css/normal.css</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'dist'</span>)) </div><div class="line">    <span class="comment">//用dist替换掉base路径，最终得到 dist/css/normal.css</span></div></pre></td></tr></table></figure>
<p>所以改变base路径后，gulp.dest()生成的文件路径也会改变</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">gulp.src(script/lib/*.js) </div><div class="line">    //没有配置base参数，此时默认的base路径为script/lib</div><div class="line">    //假设匹配到的文件为script/lib/jquery.js</div><div class="line">    .pipe(gulp.dest(&apos;build&apos;)) </div><div class="line">    //生成的文件路径为 build/jquery.js</div><div class="line"></div><div class="line">gulp.src(script/lib/*.js, &#123;base:&apos;script&apos;&#125;) </div><div class="line">    //配置了base参数，此时base路径为script</div><div class="line">    //假设匹配到的文件为script/lib/jquery.js</div><div class="line">    .pipe(gulp.dest(&apos;build&apos;))</div><div class="line">    //此时生成的文件路径为 build/lib/jquery.js</div></pre></td></tr></table></figure>
<p>用gulp.dest()把文件流写入文件后，文件流仍然可以继续使用,类似链式写法。</p>
<h2 id="gulp-task"><a href="#gulp-task" class="headerlink" title="gulp.task()"></a>gulp.task()</h2><p>gulp.task方法用来定义任务，内部使用的是<br>Orchestrator[<a href="https://github.com/robrich/orchestrator">https://github.com/robrich/orchestrator</a>] 其语法为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gulp.task(name[, deps], fn)</div></pre></td></tr></table></figure>
<p><strong>name</strong> 为任务名<br><strong>deps</strong> 是当前定义的任务需要依赖的其他任务，为一个数组。当前定义的任务会在所有依赖的任务执行完毕后才开始执行。如果没有依赖，则可省略这个参数<br><strong>fn</strong> 为任务函数，我们把任务要执行的代码都写在里面。该参数也是可选的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'mytask'</span>, [<span class="string">'tasks'</span>, <span class="string">'names'</span>],</div><div class="line"> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//定义一个有依赖的任务</span></div><div class="line">  <span class="comment">// Do something</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><code>gulp.task()</code>这个API没什么好讲的，但需要知道执行多个任务时怎么来控制任务执行的顺序。假设我们有三个任务：one two three 这三个任务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//只要执行default任务，就相当于把one,two,three这三个任务执行了</div><div class="line">gulp.task(&apos;default&apos;,[&apos;one&apos;,&apos;two&apos;,&apos;three&apos;]);</div></pre></td></tr></table></figure>
<p>如果任务相互之间没有依赖，任务会按你书写的顺序来执行，如果有依赖的话则会先执行依赖的任务。<br>但是如果某个任务所依赖的任务是异步的，就要注意了，gulp并不会等待那个所依赖的异步任务完成，而是会接着执行后续的任务。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'one'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="comment">//one是一个异步执行的任务</span></div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'one is done'</span>)</div><div class="line">  &#125;,<span class="number">5000</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//two任务虽然依赖于one任务,但并不会等到one任务中的异步操作完成后再执行</span></div><div class="line">gulp.task(<span class="string">'two'</span>,[<span class="string">'one'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'two is done'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>结果可以不是你所想象的，我们执行two任务的时候，不会去等one中的异步操作完成再执行two任务，而是紧接着执行two任务。所以two任务会在one任务中的异步操作完成之前就执行了。</p>
<p>那如果我们想等待异步任务中的异步操作完成后再执行后续的任务，该怎么做呢？<br>有三种方法可以实现：</p>
<p>第一：在异步操作完成后执行一个回调函数来通知gulp这个异步任务已经完成,这个回调函数就是任务函数的第一个参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'one'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123; <span class="comment">//cb为任务函数提供的回调，用来通知任务已经完成</span></div><div class="line">  <span class="comment">//one是一个异步执行的任务</span></div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'one is done'</span>);</div><div class="line">    cb();  <span class="comment">//执行回调，表示这个异步任务已经完成</span></div><div class="line">  &#125;,<span class="number">5000</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//这时two任务会在one任务中的异步操作完成后再执行</span></div><div class="line">gulp.task(<span class="string">'two'</span>,[<span class="string">'one'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'two is done'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>第二：定义任务时返回一个流对象。适用于任务就是操作gulp.src获取到的流的情况。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'one'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> stream = gulp.src(<span class="string">'client/**/*.js'</span>)</div><div class="line">      .pipe(dosomething()) <span class="comment">//dosomething()中有某些异步操作</span></div><div class="line">      .pipe(gulp.dest(<span class="string">'build'</span>));</div><div class="line">    <span class="keyword">return</span> stream;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'two'</span>,[<span class="string">'one'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'two is done'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>如果有三个任务的情况：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'one'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</div><div class="line"> <span class="comment">//one是一个异步执行的任务</span></div><div class="line">   setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'one is done'</span>);</div><div class="line">     cb();  <span class="comment">//执行回调，表示这个异步任务已经完成</span></div><div class="line">   &#125;,<span class="number">5000</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'two'</span>,[<span class="string">'one'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">       <span class="built_in">console</span>.log(<span class="string">'two is done'</span>);</div><div class="line">       cb();  <span class="comment">//执行回调，表示这个异步任务已经完成</span></div><div class="line">     &#125;,<span class="number">5000</span>);</div><div class="line">&#125;);</div><div class="line">gulp.task(<span class="string">'three'</span>,[<span class="string">'one'</span>,<span class="string">'two'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'three is done'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>第三：返回一个promise对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Q = <span class="built_in">require</span>(<span class="string">'q'</span>);</div><div class="line"><span class="comment">//一个著名的异步处理的库 https://github.com/kriskowal/q</span></div><div class="line">gulp.task(<span class="string">'one'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">cb</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> deferred = Q.defer();</div><div class="line">  <span class="comment">// 做一些异步操作</span></div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">     deferred.resolve();</div><div class="line">  &#125;, <span class="number">5000</span>);</div><div class="line">  <span class="keyword">return</span> deferred.promise;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(<span class="string">'two'</span>,[<span class="string">'one'</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'two is done'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>或者换种写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">gulp.task(<span class="string">'one'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>) </span>&#123;</div><div class="line">     setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">               resolve();</div><div class="line">            &#125;, <span class="number">5000</span>);</div><div class="line">  &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><code>gulp.task()</code>就这些了，主要是要知道默认的，task 将以最大的并发数执行，也就是说，gulp 会一次性运行所有的 task 并且不做任何等待</p>
<h1 id="gulp相关的插件"><a href="#gulp相关的插件" class="headerlink" title="gulp相关的插件"></a>gulp相关的插件</h1><h2 id="自动加载拆件"><a href="#自动加载拆件" class="headerlink" title="自动加载拆件"></a>自动加载拆件</h2><p>使用：gulp-load-plugins<br>安装：<code>npm install --save-dev gulp-load-plugins</code></p>
<p>要使用gulp的插件，首先得用require来把插件加载进来，如果我们要使用的插件非常多，那我们的gulpfile.js文件开头可能就会是这个样子的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    <span class="comment">//一些gulp插件,abcd这些命名只是用来举个例子</span></div><div class="line">    a = <span class="built_in">require</span>(<span class="string">'gulp-a'</span>), </div><div class="line">    b = <span class="built_in">require</span>(<span class="string">'gulp-b'</span>),</div><div class="line">    c = <span class="built_in">require</span>(<span class="string">'gulp-c'</span>),</div><div class="line">    d = <span class="built_in">require</span>(<span class="string">'gulp-d'</span>),</div><div class="line">    e = <span class="built_in">require</span>(<span class="string">'gulp-e'</span>),</div><div class="line">    f = <span class="built_in">require</span>(<span class="string">'gulp-f'</span>),</div><div class="line">    g = <span class="built_in">require</span>(<span class="string">'gulp-g'</span>),</div><div class="line">    <span class="comment">//更多的插件...</span></div><div class="line">    z = <span class="built_in">require</span>(<span class="string">'gulp-z'</span>);</div></pre></td></tr></table></figure>
<p>虽然这没什么问题，但会使我们的<code>gulpfile.js</code>文件变得很冗长，看上去不那么舒服。<code>gulp-load-plugins</code>插件正是用来解决这个问题。<br><code>gulp-load-plugins</code>这个插件能自动帮你加载<code>package.json</code>文件里的gulp插件。例如假设你的package.json文件里的依赖是这样的:</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">     <span class="attr">"gulp-autoprefixer"</span>: <span class="string">"^6.7.5"</span>,</div><div class="line">       <span class="attr">"babel-preset-es2015"</span>: <span class="string">"^6.22.0"</span>,</div><div class="line">       <span class="attr">"gulp"</span>: <span class="string">"^3.9.1"</span>,</div><div class="line">       <span class="attr">"gulp-babel"</span>: <span class="string">"^6.1.2"</span>,</div><div class="line">       <span class="attr">"gulp-clean-css"</span>: <span class="string">"^3.0.3"</span>,</div><div class="line">       <span class="attr">"gulp-concat"</span>: <span class="string">"^2.6.1"</span>,</div><div class="line">       <span class="attr">"gulp-connect"</span>: <span class="string">"^5.0.0"</span>,</div><div class="line">       <span class="attr">"gulp-imagemin"</span>: <span class="string">"^3.1.1"</span>,</div><div class="line">       <span class="attr">"gulp-inject"</span>: <span class="string">"^4.2.0"</span>,</div><div class="line">       <span class="attr">"gulp-less"</span>: <span class="string">"^3.3.0"</span>,</div><div class="line">       <span class="attr">"gulp-load-plugins"</span>: <span class="string">"^1.5.0"</span>,</div><div class="line">       <span class="attr">"gulp-minify-html"</span>: <span class="string">"^1.0.6"</span>,</div><div class="line">       <span class="attr">"gulp-plumber"</span>: <span class="string">"^1.1.0"</span>,</div><div class="line">       <span class="attr">"gulp-rename"</span>: <span class="string">"^1.2.2"</span>,</div><div class="line">       <span class="attr">"gulp-uglify"</span>: <span class="string">"^2.0.1"</span>,</div><div class="line">       <span class="attr">"q"</span>: <span class="string">"^1.4.1"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们可以在gulpfile.js中使用gulp-load-plugins来帮我们加载插件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="comment">//加载gulp-load-plugins插件，并马上运行它</span></div><div class="line"><span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'gulp-load-plugins'</span>)();</div></pre></td></tr></table></figure>
<p>gulp-load-plugins并不会一开始就加载所有package.json里的gulp插件，而是在我们需要用到某个插件的时候，才去加载那个插件。需要注意的是因为gulp-load-plugins是通过你的package.json文件来加载插件的，所以必须要保证你需要自动加载的插件已经写入到了package.json文件里，并且这些插件都是已经安装好了的。</p>
<p><code>gulp-load-plugins</code>插件的大概的原理：<br>1、读取package.json文件的devDependencies配置项<br>2、寻找gulp-开头的那些属性。<br>3、加载这些模块，并把返回值挂到$的属性上(属性名就是模块名去掉gulp-,后面变成驼峰命名法)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">function load() &#123;</div><div class="line">    var $=&#123;&#125;;</div><div class="line">    var package = require(&apos;./package.json&apos;);</div><div class="line">    var dev = package.devDependencies;</div><div class="line">    /*for(var key in dev)&#123;</div><div class="line">        if(/^gulp-/.test(key))&#123;</div><div class="line">            $[toKey(key)] = require(key);</div><div class="line">        &#125;</div><div class="line">    &#125;*/</div><div class="line">    Object.keys(dev).forEach(function(key)&#123;</div><div class="line">        if(/^gulp-/.test(key))&#123;</div><div class="line">            $[toKey(key)] = require(key);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    return $</div><div class="line">&#125;</div><div class="line">function toKey(key) &#123;</div><div class="line">    return key.slice(5).replace(/-(\w)/g, function () &#123;</div><div class="line">        return arguments[1].toUpperCase();</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">module.exports = load;</div></pre></td></tr></table></figure>
<h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><p>使用 gulp-rename<br>安装：<code>npm install --save-dev gulp-rename</code></p>
<p>用来重命名文件流中的文件。用<code>gulp.dest()</code>方法写入文件时，文件名使用的是文件流中的文件名，如果要想改变文件名，那可以在之前用<code>gulp-rename</code>插件来改变文件流中的文件名。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>),</div><div class="line">    uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>);</div><div class="line"> </div><div class="line">gulp.task(<span class="string">'rename'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'js/jquery.js'</span>)</div><div class="line">    .pipe(uglify())  <span class="comment">//压缩</span></div><div class="line">    .pipe(rename(<span class="string">'jquery.min.js'</span>))</div><div class="line">    <span class="comment">//会将jquery.js重命名为jquery.min.js</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'js'</span>));</div><div class="line">   </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>关于gulp-rename的更多强大的用法请参考[<a href="https://www.npmjs.com/package/gulp-rename">https://www.npmjs.com/package/gulp-rename</a>]</p>
<h2 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h2><p>使用 gulp-uglify<br>安装：<code>npm install --save-dev gulp-uglify</code><br>用来压缩js文件，使用的是uglify引擎</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>);</div><div class="line"> </div><div class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'js/*.js'</span>) <span class="comment">// 要压缩的js文件</span></div><div class="line">    .pipe(uglify())  <span class="comment">//使用uglify进行压缩,更多配置请参考：</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/js'</span>)); <span class="comment">//压缩后的路径</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="css文件压缩"><a href="#css文件压缩" class="headerlink" title="css文件压缩"></a>css文件压缩</h2><p>使用 gulp-clean-css<br>安装：<code>npm install --save-dev gulp-clean-css</code><br>要压缩css文件时可以使用该插件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    minifyCss = <span class="built_in">require</span>(<span class="string">"gulp-clean-css"</span>);</div><div class="line"> </div><div class="line">gulp.task(<span class="string">'clean-css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'css/*.css'</span>) <span class="comment">// 要压缩的css文件</span></div><div class="line">    .pipe(cleanCss()) <span class="comment">//压缩css</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/css'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="html压缩"><a href="#html压缩" class="headerlink" title="html压缩"></a>html压缩</h2><p>使用 gulp-minify-html<br>安装：<code>npm install --save-dev gulp-minify-html</code><br>用来压缩html文件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    minifyHtml = <span class="built_in">require</span>(<span class="string">"gulp-minify-html"</span>);</div><div class="line"> </div><div class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'html/*.html'</span>) <span class="comment">// 要压缩的html文件</span></div><div class="line">    .pipe(minifyHtml()) <span class="comment">//压缩</span></div><div class="line">    .pipe(gulp.dest(<span class="string">'dist/html'</span>));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="js代码检查"><a href="#js代码检查" class="headerlink" title="js代码检查"></a>js代码检查</h2><p>使用 gulp-jshint<br>安装：<code>npm install --save-dev gulp-jshint</code><br>用来检查js代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</div><div class="line">    jshint = <span class="built_in">require</span>(<span class="string">"gulp-jshint"</span>);</div><div class="line"> </div><div class="line">gulp.task(<span class="string">'jsLint'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    gulp.src(<span class="string">'js/*.js'</span>)</div><div class="line">    .pipe(jshint())</div><div class="line">    .pipe(jshint.reporter()); <span class="comment">// 输出检查结果</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="文件合并"><a href="#文件合并" class="headerlink" title="文件合并"></a>文件合并</h2><p>使用 gulp-concat<br>安装：<code>npm install --save-dev gulp-concat</code></p>
<p>用来把多个文件合并为一个文件,我们可以用它来合并js或css文件等，这样就能减少页面的http请求数了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;),</div><div class="line">    concat = require(&quot;gulp-concat&quot;);</div><div class="line"> </div><div class="line">gulp.task(&apos;concat&apos;, function () &#123;</div><div class="line">    gulp.src(&apos;js/*.js&apos;)  //要合并的文件</div><div class="line">    .pipe(concat(&apos;all.js&apos;))  // 合并匹配到的js文件并命名为 &quot;all.js&quot;</div><div class="line">    .pipe(gulp.dest(&apos;dist/js&apos;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="less的编译"><a href="#less的编译" class="headerlink" title="less的编译"></a>less的编译</h2><p>使用： gulp-less<br>安装：<code>npm install --save-dev gulp-less</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;),</div><div class="line">    less = require(&quot;gulp-less&quot;);</div><div class="line"> </div><div class="line">gulp.task(&apos;compile-less&apos;, function () &#123;</div><div class="line">    gulp.src(&apos;less/*.less&apos;)</div><div class="line">    .pipe(less())</div><div class="line">    .pipe(gulp.dest(&apos;dist/css&apos;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="sass编译"><a href="#sass编译" class="headerlink" title="sass编译"></a>sass编译</h2><p>使用：gulp-sass<br>安装：<code>npm install --save-dev gulp-sass</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;),</div><div class="line">    sass = require(&quot;gulp-sass&quot;);</div><div class="line"> </div><div class="line">gulp.task(&apos;compile-sass&apos;, function () &#123;</div><div class="line">    gulp.src(&apos;sass/*.sass&apos;)</div><div class="line">    .pipe(sass())</div><div class="line">    .pipe(gulp.dest(&apos;dist/css&apos;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h2><p>可以使用gulp-imagemin插件来压缩jpg、png、gif等图片。<br>安装：<code>npm install --save-dev gulp-imagemin</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;);</div><div class="line">var imagemin = require(&apos;gulp-imagemin&apos;);</div><div class="line">var pngquant = require(&apos;imagemin-pngquant&apos;); //png图片压缩插件</div><div class="line"></div><div class="line">gulp.task(&apos;default&apos;, function () &#123;</div><div class="line">    return gulp.src(&apos;src/images/*&apos;)</div><div class="line">        .pipe(imagemin(&#123;</div><div class="line">            progressive: true,</div><div class="line">            use: [pngquant()] //使用pngquant来压缩png图片</div><div class="line">        &#125;))</div><div class="line">        .pipe(gulp.dest(&apos;dist&apos;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>压缩图片的选项</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">gulp.task(&apos;copy&apos;, () =&gt; &#123;</div><div class="line">gulp.src(&apos;./src/images/*.&#123;png,jpg,gif,ico&#125;&apos;)</div><div class="line">.pipe($.imagemin(</div><div class="line">&#123;</div><div class="line">optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）</div><div class="line">progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片</div><div class="line">interlaced: true, //类型：Boolean 默认：false 隔行扫描gif进行渲染</div><div class="line">multipass: true //类型：Boolean 默认：false 多次优化svg直到完全优化</div><div class="line">&#125;</div><div class="line">))</div><div class="line">.pipe(gulp.dest(&apos;./build/images&apos;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="自动刷新"><a href="#自动刷新" class="headerlink" title="自动刷新"></a>自动刷新</h2><p>使用：  gulp-livereload<br>安装:  <code>npm install --save-dev gulp-livereload</code><br>当代码变化时，它可以帮我们自动刷新页面<br>该插件最好配合谷歌浏览器来使用，且要安装livereload chrome extension扩展插件,不能下载的请自行FQ。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var gulp = require(&apos;gulp&apos;),</div><div class="line">    less = require(&apos;gulp-less&apos;),</div><div class="line">    livereload = require(&apos;gulp-livereload&apos;);</div><div class="line"></div><div class="line">gulp.task(&apos;less&apos;, function() &#123;</div><div class="line">  gulp.src(&apos;less/*.less&apos;)</div><div class="line">    .pipe(less())</div><div class="line">    .pipe(gulp.dest(&apos;css&apos;))</div><div class="line">    .pipe(livereload());</div><div class="line">&#125;);</div><div class="line"></div><div class="line">gulp.task(&apos;watch&apos;, function() &#123;</div><div class="line">  livereload.listen(); //要在这里调用listen()方法</div><div class="line">  gulp.watch(&apos;less/*.less&apos;, [&apos;less&apos;]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>或者如下使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">const gulp = require(&apos;gulp&apos;);</div><div class="line">//所有模块都要加上()</div><div class="line">const $ = require(&apos;./gulp-load-plugins&apos;)();</div><div class="line"></div><div class="line">gulp.task(&apos;html&apos;, function () &#123;</div><div class="line">    gulp.src(&apos;./src/index.html&apos;)</div><div class="line">        .pipe(gulp.dest(&apos;./build&apos;))</div><div class="line">        //拷贝完成之后通知浏览器自动刷新一下</div><div class="line">        .pipe($.connect.reload())</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">gulp.task(&apos;watch&apos;, function () &#123;</div><div class="line">    gulp.watch(&apos;./src/index.html&apos;, [&apos;html&apos;]);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">const $ = require(&apos;./gulp-load-plugins&apos;)();</div><div class="line"></div><div class="line">gulp.task(&apos;serve&apos;, function () &#123;</div><div class="line">    //启动http服务</div><div class="line">    $.connect.server(&#123;</div><div class="line">        port: 9090,</div><div class="line">        root: &apos;./build&apos;,</div><div class="line">        //启动自动刷新</div><div class="line">        livereload: true</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">gulp.task(&apos;default&apos;, [&apos;serve&apos;, &apos;watch&apos;]);//此任务依赖的其他的服务</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;gulp-vs-grunt&quot;&gt;&lt;a href=&quot;#gulp-vs-grunt&quot; class=&quot;headerlink&quot; title=&quot;gulp vs  grunt&quot;&gt;&lt;/a&gt;gulp vs  grunt&lt;/h1&gt;&lt;p&gt;什么是gulp?&lt;br&gt;Gulp是一个基于流的自
    
    </summary>
    
    
      <category term="前端自动化工具" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>less语法大纲</title>
    <link href="http://yoursite.com/2017/02/19/less%E8%AF%AD%E6%B3%95%E5%A4%A7%E7%BA%B2/"/>
    <id>http://yoursite.com/2017/02/19/less语法大纲/</id>
    <published>2017-02-19T11:34:53.000Z</published>
    <updated>2017-02-25T12:01:45.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="less的特点"><a href="#less的特点" class="headerlink" title="less的特点"></a>less的特点</h1><p>css是不能定义变量，也不能嵌套。他没有编程的特性，很多时候往往在项目中有很多多相同的代码，我们往往是赋值粘贴，举个例子：假设h5应用里主题色是#FF3A6D，可能用于文字或者背景色。通常开发中，哪里需要这个颜色，我们就复制这个颜色并粘贴。下次要修改就得全部查找批量替换,less的诞生让我们可以更加优雅的编写css，增加项目开发进度，有利于项目的后期维护和可复用性。</p>
<h1 id="less是什么"><a href="#less是什么" class="headerlink" title="less是什么"></a>less是什么</h1><p>Less 是一门 CSS 预处理语言，它扩充了 CSS 语言，增加了诸如变量、混合（mixin）、函数等功能，让 CSS 更易维护、方便制作主题、扩充。less充当了css的预处理预编译的角色，市面上类似的还有sass、less、stylus,可以让我们的css像js一样成为一门编程语言.</p>
<h1 id="less如何编译"><a href="#less如何编译" class="headerlink" title="less如何编译"></a>less如何编译</h1><p>less不能直接运行在浏览器中，所以要预处理一下less，是它编译成css<br>浏览器引擎是不能直接渲染less代码的，应该先变异成正常的css，编译分成两类：</p>
<h2 id="基于客户端"><a href="#基于客户端" class="headerlink" title="基于客户端"></a>基于客户端</h2><p>基于客户端解析less(适合于本地开发)，浏览器没办法解析less代码，需要less解析器，比如下载（less-2.5.3.min.js），不建议在生产环境中使用less在客户端编译，因为在将less编译成css的时候，用户会看到加载延迟的现象，不利于用户体验。</p>
<p>在文件中引入less.min.css，这样浏览器就可以使用less文件了<br>注意：<br>引入样式的时候，<code>rel</code>属性的值是<code>stylesheet/less</code>，而不是<code>stylesheet</code><br>需要特别注意的是，由于浏览器端使用时是使用ajax来拉取.less文件，因此直接在本机文件系统打开（即地址是file://开头）或者是有跨域的情况下会拉取不到.less文件，导致样式无法生效。</p>
<p>还有一种情况容易导致样式无法生效，就是部分服务器（以IIS居多）会对未知后缀的文件返回404，导致无法正常读取.less文件。解决方案是在服务器中为.less文件配置MIME值为text/css（具体方法请搜索）。或者还有一种更简单的方法，即是直接将.less文件改名为.css文件即可。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet/less"</span> <span class="attr">href</span>=<span class="string">"style.less"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="actionscript"></div><div class="line">    <span class="keyword">var</span> less = &#123;</div><div class="line">        <span class="string">"env"</span>:<span class="string">"development"</span>,<span class="comment">//本地开发环境</span></div><div class="line">        <span class="string">"poll"</span>:<span class="number">1000</span><span class="comment">//在监视模式下，监视代码的间隔时间</span></div><div class="line">    &#125;</div><div class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"less-2.5.3.min.js"</span>&gt;</span><span class="undefined"></div><div class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="actionscript"></div><div class="line">    less.watch();<span class="comment">//开启监听者模式</span></div><div class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意：less文件的引入一定要写在配置的前面</p>
<p>参数的详细介绍如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">在引入LESS之前设置一个全局的变量less,配置一些参数值</div><div class="line">var less = &#123;</div><div class="line">evn:设置运行的环境(生产模式还是开发模式)</div><div class="line">production:编译后的CSS缓存到本地localStorage中</div><div class="line">development:没有把编译后的CSS缓存到本地,在URL不是标准的格式下</div><div class="line">(例如:file://...),自动设置为development</div><div class="line">env: &quot;development&quot;,</div><div class="line">logLevel:javascript控制台日志量</div><div class="line">logLevel: 2,</div><div class="line">async:同步或者异步导入文件,默认是false代表同步</div><div class="line">async: false,</div><div class="line">fileAsync:使用文件协议访问页面时异步加载导入的文件,默认是false, </div><div class="line">如有需要设置为true</div><div class="line">fileAsync: false,</div><div class="line">poll:在监视模式下，每两次请求之间的时间间隔(ms)</div><div class="line">poll: 1000,</div><div class="line">dumpLineNumbers:当设置dumpLineNumbers直接输出源行信息到编译好</div><div class="line">的CSS的文件中时有利于你调试指定行。comments参数用于输出用户可以理</div><div class="line">解的内容，而mediaQuery使用</div><div class="line">Firefox一个扩展来解析CSS和抽取信息。</div><div class="line">dumpLineNumbers: &quot;comments&quot;,</div><div class="line">relativeUrls：是否调整相对路径。如果为false，</div><div class="line">则url已经是相对于入口的LESS文件。</div><div class="line">relativeUrls: false</div><div class="line">&#125;;</div><div class="line">当然除此之外还有其他的参数</div></pre></td></tr></table></figure>
<p>监视模式</p>
<p>监视模式是客户端的一个功能，这个功能允许你当你改变样式的时候，客户端将自动刷新。<br>要使用它，只要在URL后面加上’#!watch’，然后刷新页面就可以了。另外，你也可以通过在终端运行less.watch()来启动监视模式。</p>
<h2 id="基于服务器"><a href="#基于服务器" class="headerlink" title="基于服务器"></a>基于服务器</h2><p>首先先安装node.js<br>安装好node.js后，在命令行中安装less<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g less</div></pre></td></tr></table></figure></p>
<p>安装 Less 后，就可以在命令行上调用 Less 编译器了，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lessc styles.less</div></pre></td></tr></table></figure></p>
<p>这将输出编译之后的 CSS 代码到stdout，你可以将输出重定向到一个文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lessc styles.less &gt; styles.css</div></pre></td></tr></table></figure></p>
<p>若要输出压缩过的 CSS，只需添加 -x 选项:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lessc styles.less &gt; styles.css -x</div></pre></td></tr></table></figure></p>
<p>如果希望获得更好的压缩效果，还可以通过 –clean-css 选项启用 Clean CSS 进行压缩，需要先安装好插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g less-plugin-clean-css</div></pre></td></tr></table></figure></p>
<p>这种方式应用于即将上线的时候，手动编译一次，让项目上线之后使用编译后的css</p>
<p>当然除了上述的几种方式还有其他的方式如:通过编译工具 kala<br>格局更高的，使用gulp、webppack  搭建工程化自动打包   编译   压缩  检测  上线等</p>
<h1 id="less使用语法"><a href="#less使用语法" class="headerlink" title="less使用语法"></a>less使用语法</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>变量作为属性 选择器  字符串的调用形式：@{val}<br>如果是作为值的调用形式： @val</p>
<h3 id="符号定义"><a href="#符号定义" class="headerlink" title="@符号定义"></a>@符号定义</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@base:</span> <span class="number">#f938ab</span>;</div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="variable">@base</span>; <span class="comment">/*变量引用*/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>变量的作用就是把值定义在一个地方（或一个文件里，通过@import导入），然后在各处使用，这样能让代码更易维护。</p>
<h3 id="定义url变量"><a href="#定义url变量" class="headerlink" title="定义url变量"></a>定义url变量</h3><p>变量也支持URLs：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Variables</span></div><div class="line"><span class="variable">@images:</span> <span class="string">"../img"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 用法</span></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#444</span>;</div><div class="line">  <span class="attribute">background</span>: url(<span class="string">"@&#123;images&#125;/white-sand.png"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="变量定义属性"><a href="#变量定义属性" class="headerlink" title="变量定义属性"></a>变量定义属性</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@property:</span> color;</div><div class="line"></div><div class="line"><span class="selector-class">.widget</span> &#123;</div><div class="line">  <span class="attribute">@&#123;property&#125;</span>: <span class="number">#0ee</span>;</div><div class="line">  <span class="selector-tag">background-</span><span class="variable">@&#123;property&#125;</span>: <span class="selector-id">#999</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="混合"><a href="#混合" class="headerlink" title="混合"></a>混合</h2><p>在 LESS 中我们可以定义一些通用的属性集为一个class，然后在另一个class中去调用这些属性. 下面有这样一个class:</p>
<h3 id="不带参数的混合"><a href="#不带参数的混合" class="headerlink" title="不带参数的混合"></a>不带参数的混合</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@base:</span> <span class="number">#f938ab</span>;</div><div class="line"><span class="selector-class">.ellipsis_txt</span> &#123;</div><div class="line">    <span class="attribute">display</span>: -webkit-box;</div><div class="line">    <span class="attribute">-webkit-line-clamp</span>: <span class="number">2</span>;</div><div class="line">    <span class="attribute">overflow</span>: hidden;</div><div class="line">    <span class="attribute">word-break</span>: break-all;</div><div class="line">    <span class="attribute">text-overflow</span>: ellipsis;</div><div class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;</div><div class="line">&#125;</div><div class="line"><span class="comment">//如果.ellipsis_txt()=&gt;.ellipsis_txt本身不会被编译，只供其他样式调用</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-class">.box</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="variable">@base</span>;</div><div class="line">    <span class="selector-class">.ellipsis_txt</span>;</div><div class="line">    <span class="comment">/*或者</div><div class="line">    .ellipsis_txt(); //括号是可选的</div><div class="line">    */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>任何 CSS class, id 或者 元素 属性集都可以以同样的方式引入.</p>
<h3 id="带参数的混合"><a href="#带参数的混合" class="headerlink" title="带参数的混合"></a>带参数的混合</h3><p>在 LESS 中，你还可以像函数一样定义一个带参数的属性集合:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.border-radius</span> (<span class="variable">@radius</span>) &#123;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</div><div class="line">  <span class="attribute">-moz-border-radius</span>: <span class="variable">@radius</span>;</div><div class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="variable">@radius</span>;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在其他的class这样来调用</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#header</span> &#123;</div><div class="line">  <span class="selector-class">.border-radius</span>(<span class="number">4px</span>);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.button</span> &#123;</div><div class="line">  <span class="selector-class">.border-radius</span>(<span class="number">6px</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还可以设置默认的参数<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.border-radius</span> (<span class="variable">@radius</span>: <span class="number">5px</span>) &#123;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="variable">@radius</span>;</div><div class="line">  <span class="attribute">-moz-border-radius</span>: <span class="variable">@radius</span>;</div><div class="line">  <span class="attribute">-webkit-border-radius</span>: <span class="variable">@radius</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>所以现在如果我们像这样调用它的话:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#header</span> &#123;</div><div class="line">  <span class="selector-class">.border-radius</span>;  <span class="comment">//radius的值就会是5px.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>你也可以定义不带参数属性集合,如果你想隐藏这个属性集合，不让它暴露到CSS中去，但是你还想在其他的属性集合中引用，你会发现这个方法非常的好用:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrap</span> () &#123;</div><div class="line">  <span class="attribute">text-wrap</span>: wrap;</div><div class="line">  <span class="attribute">white-space</span>: pre-wrap;</div><div class="line">  <span class="attribute">white-space</span>: -moz-pre-wrap;</div><div class="line">  <span class="attribute">word-wrap</span>: break-word;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">pre</span> &#123; <span class="selector-class">.wrap</span> &#125;</div></pre></td></tr></table></figure>
<p>输出:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">pre</span> &#123;</div><div class="line">  <span class="attribute">text-wrap</span>: wrap;</div><div class="line">  <span class="attribute">white-space</span>: pre-wrap;</div><div class="line">  <span class="attribute">white-space</span>: -moz-pre-wrap;</div><div class="line">  <span class="attribute">word-wrap</span>: break-word;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>@arguments变量</p>
<p>@arguments包含了所有传递进来的参数. 如果你不想单独处理每一个参数的话就可以像这样写:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.box-shadow</span> (<span class="variable">@x</span>: <span class="number">0</span>, <span class="variable">@y</span>: <span class="number">0</span>, <span class="variable">@blur</span>: <span class="number">1px</span>, <span class="variable">@color</span>: <span class="number">#000</span>) &#123;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="variable">@arguments</span>;</div><div class="line">  <span class="attribute">-moz-box-shadow</span>: <span class="variable">@arguments</span>;</div><div class="line">  <span class="attribute">-webkit-box-shadow</span>: <span class="variable">@arguments</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.box-shadow</span>(<span class="number">2px</span>, <span class="number">5px</span>);</div></pre></td></tr></table></figure></p>
<p>将会输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">box-shadow: 2px 5px 1px #000;</div><div class="line">-moz-box-shadow: 2px 5px 1px #000;</div><div class="line">-webkit-box-shadow: 2px 5px 1px #000;</div></pre></td></tr></table></figure>
<p>多参数混合</p>
<p>多个参数可以使用分号或者逗号分隔，推荐使用分号分隔，因为逗号有两重含义：它既可以表示混合的参数，也可以表示一个参数中一组值的分隔符。<br>使用同样的名字和同样数量的参数定义多个混合是合法的。在被调用时，LESS会应用到所有可以应用的混合上。比如你调用混合时只传了一个参数.mixin(green)，那么所有只强制要求一个参数的混合都会被调用：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.mixin</span>(<span class="variable">@color</span>) &#123;</div><div class="line">    <span class="attribute">color-1</span>: <span class="variable">@color</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.mixin</span>(<span class="variable">@color</span>; <span class="variable">@padding</span>:<span class="number">2</span>) &#123;</div><div class="line">    <span class="attribute">color-2</span>: <span class="variable">@color</span>;</div><div class="line">    <span class="attribute">padding-2</span>: <span class="variable">@padding</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.mixin</span>(<span class="variable">@color</span>; <span class="variable">@padding</span>; <span class="variable">@margin</span>: <span class="number">2</span>) &#123;</div><div class="line">    <span class="attribute">color-3</span>: <span class="variable">@color</span>;</div><div class="line">    <span class="attribute">padding-3</span>: <span class="variable">@padding</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="variable">@margin</span> <span class="variable">@margin</span> <span class="variable">@margin</span> <span class="variable">@margin</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.some</span> <span class="selector-class">.selector</span> <span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="selector-class">.mixin</span>(<span class="number">#008000</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译结果<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.some .selector div &#123;</div><div class="line">    color-1: #008000;</div><div class="line">    color-2: #008000;</div><div class="line">    padding-2: 2;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用表达式</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.average</span>(<span class="variable">@x</span>, <span class="variable">@y</span>) &#123;</div><div class="line">  <span class="variable">@average:</span> ((<span class="variable">@x</span> + <span class="variable">@y</span>) / <span class="number">2</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="selector-class">.average</span>(<span class="number">16px</span>, <span class="number">50px</span>); <span class="comment">// "call" the mixin</span></div><div class="line">  <span class="attribute">padding</span>: <span class="variable">@average</span>;    <span class="comment">// use its "return" value</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译结果：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">div</span> &#123;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">33px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><p>可以在一个css里有多个css块，以方便我们更好的组织代码，编写css模板。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#header</span> &#123;</div><div class="line">  <span class="attribute">color</span>: black;</div><div class="line">  <span class="selector-class">.navigation</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.logo</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#header</span> &#123;</div><div class="line">  <span class="attribute">color</span>: black;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#header</span> <span class="selector-class">.navigation</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#header</span> <span class="selector-class">.logo</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>还支持&amp;符号</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#header</span> &#123;</div><div class="line">  <span class="attribute">color</span>: black;</div><div class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">-navigation</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">-logo</span> &#123;</div><div class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line">    <span class="attribute">color</span>:<span class="number">#ccc</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>生成：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#header</span> &#123;</div><div class="line">  <span class="attribute">color</span>: black;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#header-navigation</span> &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#header-logo</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#header</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#ccc</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><p>任何数字、颜色或者变量都可以参与运算。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@base:</span> <span class="number">5%</span>;</div><div class="line"><span class="variable">@filler:</span> <span class="variable">@base</span> * <span class="number">2</span>;</div><div class="line"><span class="variable">@other:</span> <span class="variable">@base</span> + <span class="variable">@filler</span>;</div><div class="line"></div><div class="line"><span class="attribute">color</span>: <span class="number">#888</span> / <span class="number">4</span>;</div><div class="line"><span class="attribute">background-color</span>: <span class="variable">@base-color</span> + <span class="number">#111</span>;</div><div class="line"><span class="attribute">height</span>: <span class="number">100%</span> / <span class="number">2</span> + <span class="variable">@filler</span>;</div><div class="line"></div><div class="line"><span class="variable">@var:</span> <span class="number">1px</span> + <span class="number">5</span>;</div><div class="line"><span class="selector-tag">div</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="variable">@var</span>;<span class="comment">//输出width:6px</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//括号也同样允许使用</span></div><div class="line"><span class="attribute">width</span>: (<span class="variable">@var</span> + <span class="number">5</span>) * <span class="number">2</span>;</div><div class="line"><span class="comment">//在复合属性中进行计算</span></div><div class="line"></div><div class="line"><span class="attribute">border</span>: (<span class="variable">@width</span> * <span class="number">2</span>) solid black;</div></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>Less 内置了多种函数用于转换颜色、处理字符串、算术运算等</p>
<h3 id="color函数"><a href="#color函数" class="headerlink" title="color函数"></a>color函数</h3><p>LESS 提供了一系列的颜色运算函数. 颜色会先被转化成 HSL 色彩空间, 然后在通道级别操作:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="selector-tag">lighten</span>(<span class="variable">@color</span>, <span class="number">10%</span>);     <span class="comment">// return a color which is 10% *lighter* than @color</span></div><div class="line"><span class="selector-tag">darken</span>(<span class="variable">@color</span>, <span class="number">10%</span>);      <span class="comment">// return a color which is 10% *darker* than @color</span></div><div class="line"></div><div class="line"><span class="selector-tag">saturate</span>(<span class="variable">@color</span>, <span class="number">10%</span>);    <span class="comment">// return a color 10% *more* saturated than @color</span></div><div class="line"><span class="selector-tag">desaturate</span>(<span class="variable">@color</span>, <span class="number">10%</span>);  <span class="comment">// return a color 10% *less* saturated than @color</span></div><div class="line"></div><div class="line"><span class="selector-tag">fadein</span>(<span class="variable">@color</span>, <span class="number">10%</span>);      <span class="comment">// return a color 10% *less* transparent than @color</span></div><div class="line"><span class="selector-tag">fadeout</span>(<span class="variable">@color</span>, <span class="number">10%</span>);     <span class="comment">// return a color 10% *more* transparent than @color</span></div><div class="line"><span class="selector-tag">fade</span>(<span class="variable">@color</span>, <span class="number">50%</span>);        <span class="comment">// return @color with 50% transparency</span></div><div class="line"></div><div class="line"><span class="selector-tag">spin</span>(<span class="variable">@color</span>, <span class="number">10</span>);         <span class="comment">// return a color with a 10 degree larger in hue than @color</span></div><div class="line"><span class="selector-tag">spin</span>(<span class="variable">@color</span>, -<span class="number">10</span>);        <span class="comment">// return a color with a 10 degree smaller hue than @color</span></div><div class="line"></div><div class="line"><span class="selector-tag">mix</span>(<span class="variable">@color1</span>, <span class="variable">@color2</span>);    <span class="comment">// return a mix of @color1 and @color2</span></div></pre></td></tr></table></figure>
<p>提取颜色信息的函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hue(@color);        // returns the `hue` channel of @color</div><div class="line">saturation(@color); // returns the `saturation` channel of @color</div><div class="line">lightness(@color);  // returns the &apos;lightness&apos; channel of @color</div></pre></td></tr></table></figure></p>
<h3 id="Math函数"><a href="#Math函数" class="headerlink" title="Math函数"></a>Math函数</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">round</span>(<span class="number">1.67</span>); <span class="comment">// returns `2`</span></div><div class="line"><span class="selector-tag">ceil</span>(<span class="number">2.4</span>);   <span class="comment">// returns `3`</span></div><div class="line"><span class="selector-tag">floor</span>(<span class="number">2.6</span>);  <span class="comment">// returns `2`</span></div></pre></td></tr></table></figure>
<p>将一个值转换为百分比的形式：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">percentage</span>(<span class="number">0.5</span>); <span class="comment">// returns `50%`</span></div></pre></td></tr></table></figure></p>
<h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>有时候，你可能为了更好组织 CSS 或者单纯是为了更好的封装，将一些变量或者混合模块打包起来，一些属性集之后可以重复使用。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*模块*/</span></div><div class="line"><span class="selector-id">#bundle</span> &#123;</div><div class="line">  <span class="selector-class">.button</span> &#123;</div><div class="line">    <span class="attribute">display</span>: block;</div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</div><div class="line">    <span class="attribute">background-color</span>: grey;</div><div class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">      <span class="attribute">background-color</span>: white</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="selector-class">.tab</span> &#123; <span class="comment">/**/</span> &#125;</div><div class="line">  <span class="selector-class">.citation</span> &#123; <span class="comment">/**/</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*下面复用上面的一部分代码*/</span></div><div class="line"><span class="selector-id">#header</span> <span class="selector-tag">a</span> &#123;</div><div class="line">  <span class="attribute">color</span>: orange;</div><div class="line">  <span class="selector-id">#bundle</span> &gt; <span class="selector-class">.button</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译生成：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#bundle</span> <span class="selector-class">.button</span> &#123;</div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</div><div class="line">  <span class="attribute">background-color</span>: grey;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#bundle</span> <span class="selector-class">.button</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: white;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#bundle</span> <span class="selector-class">.tab</span> &#123;</div><div class="line">  <span class="comment">/**/</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#bundle</span> <span class="selector-class">.citation</span> &#123;</div><div class="line">  <span class="comment">/**/</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LESS中的命名空间，属于高级语法，在日常项目中应用比较广泛。我们可以用LESS中的命名空间为自己封装一些日常比较常用的类名，以便以后做项目的时候更有效率。</p>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>子类里面的优先，找不到才往父类里找，类似于js中的作用域链。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@var:</span> red;</div><div class="line"></div><div class="line"><span class="selector-id">#page</span> &#123;</div><div class="line">  <span class="variable">@var:</span> white;</div><div class="line">  <span class="selector-id">#header</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="variable">@var</span>; <span class="comment">// 这里值是white</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也不会因为后面定义而影响作用域</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@var:</span> red;</div><div class="line"><span class="selector-id">#page</span> &#123;</div><div class="line">  <span class="selector-id">#header</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="variable">@var</span>; <span class="comment">// white</span></div><div class="line">  &#125;</div><div class="line">  <span class="variable">@var:</span> white;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>和css一样，你可以导入一个 .less 文件，此文件中的所有变量就可以全部使用了。如果导入的文件是 .less扩展名，则可以将扩展名省略掉：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@import</span> <span class="string">"library"</span>; <span class="comment">// library.less</span></div><div class="line"><span class="keyword">@import</span> <span class="string">"library.less"</span>;</div></pre></td></tr></table></figure>
<p>如果你想导入一个CSS文件而且不想LESS对它进行处理，只需要使用.css后缀就可以:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@import</span> <span class="string">"lib.css"</span>;</div></pre></td></tr></table></figure></p>
<p>这样的话less就会跳过这个文件不去处理它</p>
<h2 id="函数参考"><a href="#函数参考" class="headerlink" title="函数参考"></a>函数参考</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">color</span>(string) 解析颜色,将代表颜色的字符串转换为颜色值</div><div class="line"><span class="selector-tag">convert</span>(value,unit) 将数字从一种单位转换到另一种单位.</div><div class="line">第一个参数为带单位的数值,第二个参数为单位.</div><div class="line"><span class="selector-tag">ceil</span>(number)向上取整</div><div class="line"><span class="selector-tag">floor</span>(number)向下取整</div><div class="line"><span class="selector-tag">percentage</span>(number)将浮点数转换为百分比字符串</div><div class="line"><span class="selector-tag">round</span>(number)四舍五入取整</div><div class="line"><span class="selector-tag">sqrt</span>(number)计算一个数的平方根,并原样保持单位</div><div class="line"><span class="selector-tag">pow</span>(number,number)设第一个参数为<span class="selector-tag">A</span>,第二个参数为<span class="selector-tag">B</span>,返回<span class="selector-tag">A</span>的<span class="selector-tag">B</span>次方.</div><div class="line"><span class="selector-tag">mod</span>(number,number)返回第一个参数对第二参数取余的结果.</div><div class="line"><span class="selector-tag">min</span>(value1, ..., valueN)返回一系列值中最小的那个.</div><div class="line"><span class="selector-tag">max</span>(value1, ..., valueN)返回一系列值中最大的那个.</div><div class="line"><span class="selector-tag">abs</span>(number)计算数字的绝对值,并原样保持单位</div><div class="line"><span class="selector-tag">sin</span>(number)正弦函数</div><div class="line"><span class="selector-tag">cos</span>(number)余弦函数</div><div class="line"><span class="selector-tag">asin</span>(number)反正弦函数.返回以弧度为单位的角度,</div><div class="line">区间在 <span class="selector-tag">-PI</span>/<span class="selector-tag">2</span> 到 <span class="selector-tag">PI</span>/<span class="selector-tag">2</span>之间.</div><div class="line"><span class="selector-tag">acos</span>(number)反余弦函数.区间在 <span class="selector-tag">0</span> 到 <span class="selector-tag">PI</span>之间.</div><div class="line"><span class="selector-tag">tan</span>(number)正切函数</div><div class="line"><span class="selector-tag">atan</span>(number)反正切函数</div><div class="line"><span class="selector-tag">pi</span>()返回圆周率 π (pi)</div><div class="line"><span class="selector-tag">isnumber</span>(value)如果待验证的值为数字则返回 <span class="selector-tag">true</span>,否则返回 <span class="selector-tag">false</span></div><div class="line"><span class="selector-tag">isstring</span>(value)如果待验证的值是字符串则返回 <span class="selector-tag">true</span>,否则返回 <span class="selector-tag">false</span></div><div class="line"><span class="selector-tag">iscolor</span>(value)如果待验证的值为颜色则返回 <span class="selector-tag">true</span>,否则返回 <span class="selector-tag">false</span></div><div class="line"><span class="selector-tag">isurl</span></div><div class="line"><span class="selector-tag">ispixel</span></div><div class="line"><span class="selector-tag">ispercentage</span></div><div class="line"><span class="selector-tag">isem</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;less的特点&quot;&gt;&lt;a href=&quot;#less的特点&quot; class=&quot;headerlink&quot; title=&quot;less的特点&quot;&gt;&lt;/a&gt;less的特点&lt;/h1&gt;&lt;p&gt;css是不能定义变量，也不能嵌套。他没有编程的特性，很多时候往往在项目中有很多多相同的代码，我们往往
    
    </summary>
    
    
      <category term="less" scheme="http://yoursite.com/tags/less/"/>
    
  </entry>
  
  <entry>
    <title>ES6中的promise</title>
    <link href="http://yoursite.com/2017/02/16/ES6%E4%B8%AD%E7%9A%84promise/"/>
    <id>http://yoursite.com/2017/02/16/ES6中的promise/</id>
    <published>2017-02-16T12:42:15.000Z</published>
    <updated>2017-02-24T11:34:00.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是Promise"><a href="#什么是Promise" class="headerlink" title="什么是Promise"></a>什么是Promise</h1><p>Promise是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了Promise对象。</p>
<p>Promise对象有以下两个特点。</p>
<p>（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：<br>等待态（Pending）、执行态（Fulfilled）和拒绝态（Rejected）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态<br>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从Pending变为Resolved和从Pending变为Rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果。就算改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p>
<h1 id="ES6中的Promise"><a href="#ES6中的Promise" class="headerlink" title="ES6中的Promise"></a>ES6中的Promise</h1><p>先在控制台打印出Promise看看，<code>console.dir(Promise);</code><br><img src="/img/promise.png" alt="显示如下">;</p>
<p>由上图可知，Promise是一个函数，自己身上有all、race、reject、resolve等方法，原型上有then、catch等方法</p>
<p>ES6规定，Promise对象是一个构造函数，用来生成Promise实例。</p>
<p>Promise的构造函数接收一个参数，是函数，并且传入两个参数：resolve，reject，分别表示异步操作执行成功后的回调函数和异步操作执行失败后的回调函数。其实这里用“成功”和“失败”来描述并不准确，按照标准来讲，resolve是将Promise的状态置为fullfiled，reject是将Promise的状态置为rejected</p>
<p>创造了一个Promise实例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;  </div><div class="line">    <span class="comment">//做一些异步操作  </span></div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'执行完成'</span>);  </div><div class="line">        <span class="keyword">var</span> num = <span class="built_in">Math</span>.random();  </div><div class="line">        <span class="keyword">if</span>(num&gt;=<span class="number">0.5</span>)&#123;  </div><div class="line">            resolve(num);  </div><div class="line">        &#125; <span class="keyword">else</span>&#123;  </div><div class="line">            reject(<span class="string">'数字小于0.5'</span>);  </div><div class="line">        &#125;  </div><div class="line">         </div><div class="line">    &#125;, <span class="number">2000</span>);  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上面的代码中，设置了一个2s后执行的定时器。</p>
<p>2s以后输出“执行完成”，然后生成一个随机数，如果数字大于等于0.5，我们认为是“成功”了，调用resolve修改Promise的状态。否则我们认为是“失败”了，调用reject并传递一个参数，作为“失败”的原因。</p>
<p>resolve函数的作用是，将Promise对象的状态从“未完成”变为“已解决”（即从Pending变为Resolved），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去；</p>
<p>reject函数的作用是，将Promise对象的状态从“未完成”变为“拒绝”（即从Pending变为Rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去。</p>
<h1 id="Promise示例"><a href="#Promise示例" class="headerlink" title="Promise示例"></a>Promise示例</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImageAsync</span>(<span class="params">url</span>) </span>&#123;  </div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;  </div><div class="line">    <span class="keyword">var</span> image = <span class="keyword">new</span> Image();  </div><div class="line">  </div><div class="line">    image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">      resolve(image);  </div><div class="line">    &#125;;  </div><div class="line">  </div><div class="line">    image.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">      reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Could not load image at '</span> + url));  </div><div class="line">    &#125;;  </div><div class="line">  </div><div class="line">    image.src = url;  </div><div class="line">  &#125;);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用Promise包装了一个图片加载的异步操作。如果加载成功，就调用resolve方法，否则就调用reject方法。reject的作用就是把Promise的状态置为rejected，这样我们在then中就能捕捉到，然后执行“失败”情况的回调。看下面的代码。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNumber</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</div><div class="line">        <span class="comment">//做一些异步操作</span></div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> num = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">10</span>); <span class="comment">//生成1-10的随机数</span></div><div class="line">            <span class="keyword">if</span>(num&lt;=<span class="number">5</span>)&#123;</div><div class="line">                resolve(num);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span>&#123;</div><div class="line">                reject(<span class="string">'数字太大了'</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="number">2000</span>);</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> p;            </div><div class="line">&#125;</div><div class="line"></div><div class="line">getNumber()</div><div class="line">.then(</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'resolved'</span>);</div><div class="line">        <span class="built_in">console</span>.log(data);</div><div class="line">    &#125;, </div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">reason, data</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'rejected'</span>);</div><div class="line">        <span class="built_in">console</span>.log(reason);</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure>
<p>getNumber函数用来异步获取一个数字，2秒后执行完成，如果数字小于等于5，我们认为是“成功”了，调用resolve修改Promise的状态。否则我们认为是“失败”了，调用reject并传递一个参数，作为失败的原因。</p>
<p>运行getNumber并且在then中传了两个参数，then方法可以接受两个参数，第一个对应resolve的回调，第二个对应reject的回调。所以我们能够分别拿到他们传过来的数据。多次运行这段代码，你会随机得到下面两种结果：</p>
<p>resolved 1（数字随机，只是个举例） 或者是  rejected 数字太小了（</p>
<h1 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h1><p>then方法的第一个参数是Resolved状态的回调函数，第二个参数（可选）是Rejected状态的回调函数。</p>
<p>从表面上看，Promise只是简化了层层回调的写法，而实质上，Promise的精髓是“状态”，用维护状态、传递状态的方式来使得回调函数能够及时调用，它比传递callback函数要简单、灵活的多。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync1</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    <span class="keyword">return</span>  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;  </div><div class="line">        <span class="comment">//做一些异步操作  </span></div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'执行完成1'</span>);  </div><div class="line">            resolve(<span class="string">'数据1'</span>);  </div><div class="line">        &#125;, <span class="number">2000</span>);  </div><div class="line">    &#125;);              </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync2</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    <span class="keyword">return</span>  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;  </div><div class="line">        <span class="comment">//做一些异步操作  </span></div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'执行完成2'</span>);  </div><div class="line">            resolve(<span class="string">'数据2'</span>);  </div><div class="line">        &#125;, <span class="number">2000</span>);  </div><div class="line">    &#125;);              </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">runAsync3</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    <span class="keyword">return</span>  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;  </div><div class="line">        <span class="comment">//做一些异步操作  </span></div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'执行完成3'</span>);  </div><div class="line">            resolve(<span class="string">'数据3'</span>);  </div><div class="line">        &#125;, <span class="number">2000</span>);  </div><div class="line">    &#125;);              </div><div class="line">&#125;  </div><div class="line"></div><div class="line"><span class="comment">//调用</span></div><div class="line">runAsync1()  </div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;  </div><div class="line">    <span class="built_in">console</span>.log(data);  </div><div class="line">    <span class="keyword">return</span> runAsync2();  <span class="comment">//return的是一个promise对象</span></div><div class="line">&#125;)  </div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;  </div><div class="line">    <span class="built_in">console</span>.log(data);  </div><div class="line">    <span class="keyword">return</span> runAsync3();  </div><div class="line">&#125;)  </div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;  </div><div class="line">    <span class="built_in">console</span>.log(data);  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">代码执行的结果</div><div class="line">执行完成1</div><div class="line">数据1</div><div class="line">执行完成2</div><div class="line">数据2</div><div class="line">执行完成3</div><div class="line">数据3</div></pre></td></tr></table></figure>
<h1 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h1><p><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;  </div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'test'</span>);  </div><div class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;  </div><div class="line">       <span class="built_in">console</span>.log(error);  </div><div class="line">   &#125;);</div></pre></td></tr></table></figure>
<p>上面代码中，promise抛出一个错误，就被catch方法指定的回调函数捕获。<br>需要注意的是，catch方法返回的还是一个 Promise对象，因此后面还可以接着调用then方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> someAsyncThing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;  </div><div class="line">    <span class="comment">// 下面一行会报错，因为x没有声明  </span></div><div class="line">    resolve(x + <span class="number">2</span>);  </div><div class="line">  &#125;);  </div><div class="line">&#125;;  </div><div class="line">  </div><div class="line">someAsyncThing()  </div><div class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;  </div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'oh no'</span>, error);  </div><div class="line">&#125;)  </div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'carry on'</span>);  </div><div class="line">&#125;);  </div><div class="line"><span class="comment">// oh no [ReferenceError: x is not defined]  </span></div><div class="line"><span class="comment">// carry on</span></div></pre></td></tr></table></figure>
<p>上面代码运行完catch方法指定的回调函数，会接着运行后面那个then方法指定的回调函数。如果没有报错，则会跳过catch方法。</p>
<h1 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h1><p>Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例。</p>
<p>下面是一个例子，其中 runAsync1、 runAsync1 和runAsync3上面的例子中已有定义</p>
<p>Promise.all方法用于将多个Promise实例，包装成一个新的Promise实例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span></div><div class="line">.all([runAsync1(), runAsync2(), runAsync3()])</div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(results);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>上述结果为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">执行完成1</div><div class="line">执行完成2</div><div class="line">执行完成3</div><div class="line">[&quot;数据1&quot;,&quot; 数据2&quot;,&quot;数据3&quot;]</div></pre></td></tr></table></figure>
<p>有了all，你就可以并行执行多个异步操作，并且在一个回调中处理所有的返回数据。</p>
<h1 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h1><p>Promise.race方法同样是将多个Promise实例，包装成一个新的Promise实例。</p>
<p>all方法的效果实际上是「谁跑的慢，以谁为准执行回调」(以执行最慢的那个为准的话这个时候所有的数据都可以获取到的，以数组的形式展现)，那么相对的就有另一个方法race「谁跑的快，以谁为准执行回调」。</p>
<p>我们把上面runAsync1的延时改为1秒来看一下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>  </div><div class="line">.race([runAsync1(), runAsync2(), runAsync3()])  </div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>)</span>&#123;  </div><div class="line">    <span class="built_in">console</span>.log(results);  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">执行完成1</div><div class="line">数据1</div><div class="line">执行完成2</div><div class="line">执行完成3</div></pre></td></tr></table></figure>
<p>在then里面的回调开始执行时，runAsync2()和runAsync3()并没有停止，仍旧再执行。于是再过1秒后，输出了他们结束的标志。</p>
<p>这个race有什么用呢？使用场景还是很多的，比如我们可以用race给某个异步请求设置超时时间，并且在超时后执行相应的操作，代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//请求某个图片资源  </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestImg</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;  </div><div class="line">        <span class="keyword">var</span> img = <span class="keyword">new</span> Image();  </div><div class="line">        img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">            resolve(img);  </div><div class="line">        &#125;  </div><div class="line">        img.src = <span class="string">'xxxxxx'</span>;  </div><div class="line">    &#125;);  </div><div class="line">    <span class="keyword">return</span> p;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="comment">//延时函数，用于给请求计时  </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">    <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;  </div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </div><div class="line">            reject(<span class="string">'图片请求超时'</span>);  </div><div class="line">        &#125;, <span class="number">5000</span>);  </div><div class="line">    &#125;);  </div><div class="line">    <span class="keyword">return</span> p;  </div><div class="line">&#125;  </div><div class="line">  </div><div class="line"><span class="built_in">Promise</span>  </div><div class="line">.race([requestImg(), timeout()])  </div><div class="line">.then(<span class="function"><span class="keyword">function</span>(<span class="params">results</span>)</span>&#123;  </div><div class="line">    <span class="built_in">console</span>.log(results);  </div><div class="line">&#125;)  </div><div class="line">.catch(<span class="function"><span class="keyword">function</span>(<span class="params">reason</span>)</span>&#123;  </div><div class="line">    <span class="built_in">console</span>.log(reason);  </div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>requestImg函数会异步请求一张图片，我把地址写为”xxxxxx”，所以肯定是无法成功请求到的。timeout函数是一个延时5秒的异步操作。我们把这两个返回Promise对象的函数放进race，于是他俩就会赛跑，如果5秒之内图片请求成功了，那么遍进入then方法行正常的流程。如果5秒钟图片还未成功返回，那么timeout就跑赢了，则进入catch，报出“图片请求超时”的信息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;什么是Promise&quot;&gt;&lt;a href=&quot;#什么是Promise&quot; class=&quot;headerlink&quot; title=&quot;什么是Promise&quot;&gt;&lt;/a&gt;什么是Promise&lt;/h1&gt;&lt;p&gt;Promise是异步编程的一种解决方案，比传统的解决方案——回调函数和事件—
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6常用语法总结</title>
    <link href="http://yoursite.com/2017/02/16/ES6%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/02/16/ES6常用语法总结/</id>
    <published>2017-02-16T00:22:42.000Z</published>
    <updated>2017-02-16T12:38:37.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ECMAScript6"><a href="#ECMAScript6" class="headerlink" title="ECMAScript6"></a>ECMAScript6</h1><p>ECMAScript简称就是ES,你可以把它看成是一套标准,JavaScript就是实施了这套标准的一门语言 现在主流浏览器使用的是ECMAScript5</p>
<h1 id="babel"><a href="#babel" class="headerlink" title="babel"></a>babel</h1><p>在我们正式讲解ES6语法之前，我们得先了解下Babel。<br>Babel是一个广泛使用的ES6转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。大家可以选择自己习惯的工具来使用使用Babel,我最喜欢的构建工具就是webpack</p>
<h1 id="作用域变量"><a href="#作用域变量" class="headerlink" title="作用域变量"></a>作用域变量</h1><h2 id="var的问题"><a href="#var的问题" class="headerlink" title="var的问题"></a>var的问题</h2><p>var没有块级作用域，定义后在当前闭包中都可以访问，如果变量名重复，就会覆盖前面定义的变量，并且也有可能被其他人更改。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">     <span class="keyword">var</span> a = <span class="string">"a"</span>; <span class="comment">// 期望a是某一个值</span></div><div class="line"> &#125;</div><div class="line"><span class="built_in">console</span>.log(a);</div></pre></td></tr></table></figure>
<p>var在for循环标记变量共享，一般在循环中使用的i会被共享，其本质上也是由于没有块级作用域造成的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">     setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">         alert(i);</div><div class="line">     &#125;, <span class="number">0</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>结果<br>弹窗三次 3</p>
<h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p>在用var定义变量的时候，变量是通过闭包进行隔离的，现在用了let，不仅仅可以通过闭包隔离，还增加了一些块级作用域隔离。 块级作用用一组大括号定义一个块,使用 let 定义的变量在大括号的外面是访问不到的</p>
<h3 id="实现块级作用域"><a href="#实现块级作用域" class="headerlink" title="实现块级作用域"></a>实现块级作用域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">    <span class="keyword">let</span> name = <span class="string">'wpl'</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(name);<span class="comment">// ReferenceError: name is not defined</span></div></pre></td></tr></table></figure>
<h3 id="不会污染全局对象"><a href="#不会污染全局对象" class="headerlink" title="不会污染全局对象"></a>不会污染全局对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">    <span class="keyword">let</span> name = <span class="string">'wpl'</span>;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.name);</div><div class="line">结果 <span class="literal">undefined</span></div></pre></td></tr></table></figure>
<h3 id="for循环中也可以使用i"><a href="#for循环中也可以使用i" class="headerlink" title="for循环中也可以使用i"></a>for循环中也可以使用i</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 嵌套循环不会相互影响</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"out"</span>, i);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">"in"</span>, i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">结果 out <span class="number">0</span> <span class="keyword">in</span> <span class="number">0</span> <span class="keyword">in</span> <span class="number">1</span> out <span class="number">1</span> <span class="keyword">in</span> <span class="number">0</span> <span class="keyword">in</span> <span class="number">1</span> out <span class="number">2</span> <span class="keyword">in</span> <span class="number">0</span> <span class="keyword">in</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="重复定义会报错"><a href="#重复定义会报错" class="headerlink" title="重复定义会报错"></a>重复定义会报错</h3><p>在同一个作用域中重复定义会报错，在不同的作用域中允许重复定义</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</div><div class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line">    <span class="keyword">let</span> a = <span class="number">2</span>; <span class="comment">//Identifier 'a' has already been declared</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="不存在变量的预解释"><a href="#不存在变量的预解释" class="headerlink" title="不存在变量的预解释"></a>不存在变量的预解释</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i ++)&#123;</div><div class="line">     <span class="built_in">console</span>.log(<span class="string">'inner'</span>,i);</div><div class="line">     <span class="keyword">let</span> i = <span class="number">100</span>;</div><div class="line"> &#125;</div><div class="line">结果 i is not defined</div></pre></td></tr></table></figure>
<p>不存在变量的预解释,使用之前必须先定义，否则会报错</p>
<h3 id="闭包的新写法"><a href="#闭包的新写法" class="headerlink" title="闭包的新写法"></a>闭包的新写法</h3><p>以前</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>现在</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="const"><a href="#const" class="headerlink" title="const"></a>const</h1><p>const也用来声明变量，但是声明的是常量。一旦声明，常量的值就不能改变。</p>
<h2 id="常量不能重新赋值"><a href="#常量不能重新赋值" class="headerlink" title="常量不能重新赋值"></a>常量不能重新赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">const</span> PI = <span class="built_in">Math</span>.PI</div><div class="line"></div><div class="line">PI = <span class="number">23</span> <span class="comment">//Module build failed: SyntaxError: "PI" is read-only</span></div></pre></td></tr></table></figure>
<h2 id="变量值可改变"><a href="#变量值可改变" class="headerlink" title="变量值可改变"></a>变量值可改变</h2><p>注意const限制的是不能给变量重新赋值，而变量的值本身是可以改变的,下面的操作是可以的<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> names = [<span class="string">'wpl'</span>];</div><div class="line">names.push(<span class="string">'lc'</span>);</div><div class="line"><span class="built_in">console</span>.log(names);</div></pre></td></tr></table></figure></p>
<h2 id="不同的块级作用域可以多次定义"><a href="#不同的块级作用域可以多次定义" class="headerlink" title="不同的块级作用域可以多次定义"></a>不同的块级作用域可以多次定义</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> A = <span class="string">"0"</span>;</div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> A = <span class="string">"A"</span>;</div><div class="line">    <span class="built_in">console</span>.log(A)</div><div class="line">&#125;</div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> A = <span class="string">"B"</span>;</div><div class="line">    <span class="built_in">console</span>.log(A)</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(A)</div><div class="line">结果 A B <span class="number">0</span></div></pre></td></tr></table></figure>
<p>const有一个很好的应用场景，就是当我们引用第三方库的时声明的变量，用const来声明可以避免未来不小心重命名而导致出现bug：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mime = <span class="built_in">require</span>(<span class="string">'mime'</span>)</div></pre></td></tr></table></figure>
<h1 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h1><p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>
<h2 id="解析数组"><a href="#解析数组" class="headerlink" title="解析数组"></a>解析数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> [name,age] = [<span class="string">'wpl'</span>,<span class="number">8</span>];</div><div class="line"><span class="built_in">console</span>.log(name,age);</div></pre></td></tr></table></figure>
<h2 id="嵌套赋值"><a href="#嵌套赋值" class="headerlink" title="嵌套赋值"></a>嵌套赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [x, [y], z] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]];</div><div class="line">   <span class="built_in">console</span>.log(x, y, z);</div><div class="line"></div><div class="line">   <span class="keyword">let</span> [x, [y,z]] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]];</div><div class="line">   <span class="built_in">console</span>.log(x,y,z);</div></pre></td></tr></table></figure>
<p>这样数组里的第一个项目就会交给前面name这个变量，第二个项目的值会分配给age这个变量</p>
<h2 id="省略赋值"><a href="#省略赋值" class="headerlink" title="省略赋值"></a>省略赋值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> [, , x] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(x);</div></pre></td></tr></table></figure>
<h2 id="解构对象"><a href="#解构对象" class="headerlink" title="解构对象"></a>解构对象</h2><p>对象也可以被解构</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">let</span> dog = &#123;<span class="attr">type</span>: <span class="string">'animal'</span>, <span class="attr">many</span>: <span class="number">2</span>&#125;</div><div class="line"><span class="keyword">let</span> &#123; type, many&#125; = dog</div><div class="line"><span class="built_in">console</span>.log(type, many)   <span class="comment">//animal 2</span></div></pre></td></tr></table></figure>
<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><p>在赋值和传参的时候可以使用默认值</p>
<p>ES5的写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">type</span>)</span>&#123;</div><div class="line">    type = type || <span class="string">'cat'</span>  </div><div class="line">    <span class="built_in">console</span>.log(type)</div><div class="line">&#125;</div><div class="line">animal()</div></pre></td></tr></table></figure>
<p>ES6<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">type = <span class="string">'cat'</span></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(type)</div><div class="line">&#125;</div><div class="line">animal()</div></pre></td></tr></table></figure></p>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h2><p>这个东西也是非常有用，当我们要插入大段的html内容到文档中时，传统的写法非常麻烦，所以之前我们通常会引用一些模板工具库，比如EJS、artTemplate等等。<br>模板字符串用反引号(数字1左边的那个键)包含，其中的变量用${}括起来</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#result"</span>).append(<span class="string">`</div><div class="line">  There are &lt;b&gt;<span class="subst">$&#123;basket.count&#125;</span>&lt;/b&gt; items</div><div class="line">   in your basket, &lt;em&gt;<span class="subst">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</div><div class="line">  are on sale!</div><div class="line">`</span>);</div></pre></td></tr></table></figure>
<h2 id="所有模板字符串的空格和换行，都是被保留的"><a href="#所有模板字符串的空格和换行，都是被保留的" class="headerlink" title="所有模板字符串的空格和换行，都是被保留的"></a>所有模板字符串的空格和换行，都是被保留的</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">`&lt;ul&gt;</div><div class="line">&lt;li&gt;a&lt;/li&gt;</div><div class="line">&lt;li&gt;b&lt;/li&gt;</div><div class="line">&lt;/ul&gt;`</span>;</div><div class="line"><span class="built_in">console</span>.log(str);</div></pre></td></tr></table></figure>
<p>其中的变量会用变量的值替换掉</p>
<h2 id="字符串新方法"><a href="#字符串新方法" class="headerlink" title="字符串新方法"></a>字符串新方法</h2><p>includes()：返回布尔值，表示是否找到了参数字符串。<br>startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。<br>endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s = <span class="string">'wpl'</span>;</div><div class="line">s.startsWith(<span class="string">'w'</span>) <span class="comment">// true</span></div><div class="line">s.endsWith(<span class="string">'l'</span>) <span class="comment">// true</span></div><div class="line">s.includes(<span class="string">'p'</span>) <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>第二个参数，表示开始搜索的位置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s=<span class="string">'hell'</span>;</div><div class="line"><span class="built_in">console</span>.log(s.startsWith(<span class="string">'h'</span>,<span class="number">2</span>)); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(s.endsWith(<span class="string">'e'</span>,<span class="number">2</span>)); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(s.includes(<span class="string">'e'</span>,<span class="number">2</span>)); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>endsWith的行为与其他两个方法有所不同。它针对前n个字符，而其他两个方法针对从第n个位置直到字符串结束</p>
<h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h2><p>repeat方法返回一个新字符串，表示将原字符串重复n次。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="string">'x'</span>.repeat(<span class="number">3</span>);</div><div class="line"><span class="string">'x'</span>.repeat(<span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h2><p>可以给定义的函数接收的参数设置默认的值 在执行这个函数的时候，如果不指定函数的参数的值，就会使用参数的这些默认的值</p>
<p>let desc  = function(name=’wpl’,age=8){<br>    console.log(<code>${name} is ${age} years old!</code>);<br>}<br>desc(‘wpl’);</p>
<h2 id="展开操作符"><a href="#展开操作符" class="headerlink" title="展开操作符"></a>展开操作符</h2><p>把…放在数组前面可以把一个数组进行展开,可以把一个数组直接传入一个函数而不需要使用apply</p>
<h3 id="传入参数"><a href="#传入参数" class="headerlink" title="传入参数"></a>传入参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> print = <span class="function"><span class="keyword">function</span>(<span class="params">a,b,c</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(a,b,c);</div><div class="line">&#125;</div><div class="line">print([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</div><div class="line">print(...[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</div></pre></td></tr></table></figure>
<h3 id="可以替代apply"><a href="#可以替代apply" class="headerlink" title="可以替代apply"></a>可以替代apply</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> m1 = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, [<span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">1</span>]);</div><div class="line"><span class="keyword">var</span> m2 = <span class="built_in">Math</span>.max(...[<span class="number">8</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">1</span>]);</div></pre></td></tr></table></figure>
<h3 id="可以替代concat"><a href="#可以替代concat" class="headerlink" title="可以替代concat"></a>可以替代concat</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">5</span>];</div><div class="line"><span class="keyword">var</span> arr3 = arr1.concat(arr2);</div><div class="line"><span class="keyword">var</span> arr4 = [...arr1, ...arr2];</div><div class="line"><span class="built_in">console</span>.log(arr3,arr4);</div></pre></td></tr></table></figure>
<h3 id="类数组的转数组"><a href="#类数组的转数组" class="headerlink" title="类数组的转数组"></a>类数组的转数组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">a,b,c</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Math</span>.max(...arguments));</div><div class="line">&#125;</div><div class="line">max(<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>);</div></pre></td></tr></table></figure>
<h2 id="剩余操作符"><a href="#剩余操作符" class="headerlink" title="剩余操作符"></a>剩余操作符</h2><p>剩余操作符可以把其余的参数的值都放到一个叫b的数组里面</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> rest = <span class="function"><span class="keyword">function</span>(<span class="params">a,...b</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(a,b);</div><div class="line">&#125;</div><div class="line">rest(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</div></pre></td></tr></table></figure>
<h2 id="解构参数"><a href="#解构参数" class="headerlink" title="解构参数"></a>解构参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> destruct = <span class="function"><span class="keyword">function</span>(<span class="params">&#123;name,age&#125;</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(name,age);</div><div class="line">&#125;</div><div class="line">destruct(&#123;<span class="attr">name</span>:<span class="string">'wpl'</span>,<span class="attr">age</span>:<span class="number">6</span>&#125;);</div></pre></td></tr></table></figure>
<p>5.5 箭头函数<br>这个恐怕是ES6最最常用的一个新特性了，用它来写function比原来的写法要简洁清晰很多:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123; <span class="keyword">return</span> i + <span class="number">1</span>; &#125; <span class="comment">//ES5</span></div><div class="line">(i) =&gt; i + <span class="number">1</span> <span class="comment">//ES6</span></div></pre></td></tr></table></figure>
<p>简直是简单的不像话对吧…<br>如果方程比较复杂，则需要用{}把代码包起来：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</div><div class="line">    x++;</div><div class="line">    y--;</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div><div class="line">(x, y) =&gt; &#123;x++; y--; <span class="keyword">return</span> x+y&#125;</div></pre></td></tr></table></figure>
<p>除了看上去更简洁以外，arrow function还有一项超级无敌的功能！<br>长期以来，JavaScript语言的this对象一直是一个令人头痛的问题，在对象方法中使用this，必须非常小心。例如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;</div><div class="line">        <span class="keyword">this</span>.type = <span class="string">'animal'</span></div><div class="line">    &#125;</div><div class="line">    says(say)&#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</div><div class="line">        &#125;, <span class="number">1000</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> <span class="keyword">var</span> animal = <span class="keyword">new</span> Animal()</div><div class="line"> animal.says(<span class="string">'hi'</span>)  <span class="comment">//undefined says hi</span></div></pre></td></tr></table></figure>
<p>运行上面的代码会报错，这是因为setTimeout中的this指向的是全局对象。所以为了让它能够正确的运行，传统的解决方法有两种：</p>
<p>第一种是将this传给self,再用self来指代this<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">says(say)&#123;</div><div class="line">      <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">          <span class="built_in">console</span>.log(self.type + <span class="string">' says '</span> + say)</div><div class="line">      &#125;, <span class="number">1000</span>);</div></pre></td></tr></table></figure></p>
<p>第二种方法是用bind(this),即<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">says(say)&#123;</div><div class="line">     setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">         <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</div><div class="line">     &#125;.bind(<span class="keyword">this</span>), <span class="number">1000</span>);</div></pre></td></tr></table></figure></p>
<p>但现在我们有了箭头函数，就不需要这么麻烦了：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;</div><div class="line">        <span class="keyword">this</span>.type = <span class="string">'animal'</span></div><div class="line">    &#125;</div><div class="line">    says(say)&#123;</div><div class="line">        setTimeout( <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.type + <span class="string">' says '</span> + say)</div><div class="line">        &#125;, <span class="number">1000</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"> <span class="keyword">var</span> animal = <span class="keyword">new</span> Animal()</div><div class="line"> animal.says(<span class="string">'hi'</span>)  <span class="comment">//animal says hi</span></div></pre></td></tr></table></figure>
<p>添加静态方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">   <span class="keyword">static</span> add(a,b)&#123;</div><div class="line">       <span class="keyword">return</span> a+b;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(Person.add(<span class="number">1</span>,<span class="number">2</span>));</div></pre></td></tr></table></figure></p>
<p>当我们使用箭头函数时，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。并不是因为箭头函数内部有绑定this的机制，<font color="red">实际原因是箭头函数根本没有自己的this，它的this是继承外面的，因此内部的this就是外层代码块的this。</font></p>
<h1 id="数组的新方法"><a href="#数组的新方法" class="headerlink" title="数组的新方法"></a>数组的新方法</h1><h2 id="from"><a href="#from" class="headerlink" title="from"></a>from</h2><p>将一个数组或者类数组变成数组,会复制一份</p>
<p><code>let newArr = Array.from(oldArr);</code></p>
<h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h2><p>of是为了将一组数值,转换为数组</p>
<p><code>console.log(Array(3, 4), Array(3, 4).length,
Array.of(3, 4), Array.of(3, 4).length);</code></p>
<h2 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin"></a>copyWithin</h2><p>target （必需）：从该位置开始替换数据。<br>start （可选）：从该位置开始读取数据，默认为 0 。如果为负值，表示倒数。<br>end （可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数。<br>这三个参数都应该是数值，如果不是，会自动转为数值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  将 3 号位复制到 0 号位  </span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>)  </div><div class="line"><span class="comment">// [4, 2, 3, 4, 5]  </span></div><div class="line"><span class="comment">// -2 相当于 3 号位， -1 相当于 4 号位  </span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">-2</span>, <span class="number">-1</span>)  </div><div class="line"><span class="comment">// [4, 2, 3, 4, 5]  </span></div><div class="line"><span class="comment">//  将 3 号位复制到 0 号位  </span></div><div class="line">[].copyWithin.call(&#123;<span class="attr">length</span>: <span class="number">5</span>, <span class="number">3</span>: <span class="number">1</span>&#125;, <span class="number">0</span>, <span class="number">3</span>)  </div><div class="line"><span class="comment">// &#123;0: 1, 3: 1, length: 5&#125;  </span></div><div class="line"><span class="comment">//  将 2 号位到数组结束，复制到 0 号位  </span></div><div class="line"><span class="keyword">var</span> i32a = <span class="keyword">new</span> <span class="built_in">Int32Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);  </div><div class="line">i32a.copyWithin(<span class="number">0</span>, <span class="number">2</span>);  </div><div class="line"><span class="comment">// Int32Array [3, 4, 5, 4, 5]  </span></div><div class="line"><span class="comment">//  对于没有部署 TypedArray 的 copyWithin 方法的平台  </span></div><div class="line"><span class="comment">//  需要采用下面的写法  </span></div><div class="line">[].copyWithin.call(<span class="keyword">new</span> <span class="built_in">Int32Array</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]), <span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>);  </div><div class="line"><span class="comment">// Int32Array [4, 2, 3, 4, 5]</span></div></pre></td></tr></table></figure>
<h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><p>查到对应的元素和索引</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span> ,<span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</div><div class="line">    <span class="keyword">let</span> find = arr.find(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> item === <span class="number">3</span>;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">let</span> findIndex = arr.findIndex(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> item === <span class="number">3</span>;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h2 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h2><p>就是填充数组的意思 会更改原数组 Array.prototype.fill(value, start, end = this.length);</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</div><div class="line">arr.fill(<span class="string">'a'</span>, <span class="number">1</span>, <span class="number">2</span>);</div><div class="line"><span class="built_in">console</span>.log(arr);<span class="comment">//[ 1, 'a', 3, 4, 5, 6 ]</span></div></pre></td></tr></table></figure>
<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><h2 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h2><p>如果你想在对象里添加跟变量名一样的属性，并且属性的值就是变量表示的值就可以直接在对象里加上这些属性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name=<span class="string">"wpl"</span>;</div><div class="line"><span class="keyword">let</span> age = <span class="number">8</span>;</div><div class="line"><span class="keyword">let</span> getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> person = &#123;</div><div class="line">    name,</div><div class="line">    age,</div><div class="line">    getName</div><div class="line">&#125;</div><div class="line">person.getName();</div></pre></td></tr></table></figure>
<h2 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is"></a>Object.is</h2><p>对比两个值是否相等</p>
<p><code>console.log(Object.is(NaN,NaN));</code>//true</p>
<h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h2><p>把多个对象的属性复制到一个对象中,第一个参数是复制的对象,从第二个参数开始往后,都是复制的源对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> nameObj = &#123;<span class="attr">name</span>:<span class="string">'wpl'</span>&#125;;</div><div class="line"><span class="keyword">var</span> ageObj = &#123;<span class="attr">age</span>:<span class="number">8</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.assign(obj,nameObj,ageObj);</div><div class="line"><span class="built_in">console</span>.log(obj);<span class="comment">//&#123; name: 'wpl', age: 8 &#125;</span></div><div class="line"></div><div class="line"><span class="comment">//克隆对象</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span> (<span class="params">obj</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf"></a>Object.setPrototypeOf</h2><p>将一个指定的对象的原型设置为另一个对象或者null<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.setPrototypeOf(obj, prototype);</div></pre></td></tr></table></figure></p>
<p>原理：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.setPrototypeOf =</div><div class="line"> <span class="built_in">Object</span>.setPrototypeOf || <span class="function"><span class="keyword">function</span>(<span class="params">obj, proto</span>) </span>&#123;</div><div class="line">  obj.__proto__ = proto;</div><div class="line">  <span class="keyword">return</span> obj; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="proto"><a href="#proto" class="headerlink" title="proto"></a>proto</h2><p>直接在对象表达式中设置prototype</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1  = &#123;<span class="attr">name</span>:<span class="string">'wpl'</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj3 = &#123;</div><div class="line">    <span class="attr">__proto__</span>:obj1</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(obj3.name);</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getPrototypeOf(obj3));</div></pre></td></tr></table></figure>
<h2 id="super"><a href="#super" class="headerlink" title="super"></a>super</h2><p>通过super可以调用prototype上的属性或方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> person =&#123;</div><div class="line">    eat()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'milk'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> student = &#123;</div><div class="line">    <span class="attr">__proto__</span>:person,</div><div class="line">    eat()&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.eat()+<span class="string">' bread'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(student.eat());</div></pre></td></tr></table></figure>
<h1 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h1><p>ES6引入了一种新的原始数据类型Symbol，表示独一无二的值 它是JavaScript语言的第七种数据类型</p>
<h2 id="生成Symbol"><a href="#生成Symbol" class="headerlink" title="生成Symbol"></a>生成Symbol</h2><p>Symbol值通过Symbol函数生成</p>
<p>let s = Symbol(‘wpl’);<br>console.log(s);</p>
<h2 id="作为属性名"><a href="#作为属性名" class="headerlink" title="作为属性名"></a>作为属性名</h2><p>由于每一个Symbol值都是不相等的，这意味着Symbol值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> luckNum = <span class="built_in">Symbol</span>();</div><div class="line"><span class="keyword">var</span> person = &#123;&#125;;</div><div class="line">person[luckNum] = <span class="string">'9'</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(person[luckNum] ); <span class="comment">// 9</span></div></pre></td></tr></table></figure>
<p>在对象的内部，使用Symbol值定义属性时，Symbol值必须放在方括号之中</p>
<p><code>var person = {[luckNum]: &#39;8&#39;};</code><br>7.3 消除魔术变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Operator = &#123;</div><div class="line">    <span class="attr">add</span>: <span class="built_in">Symbol</span>(),</div><div class="line">    <span class="attr">minus</span>:<span class="built_in">Symbol</span>()</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculate</span>(<span class="params">op, a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (op) &#123;</div><div class="line">        <span class="keyword">case</span> Operator.add:</div><div class="line">            <span class="keyword">return</span> a + b;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> Operator.minus:</div><div class="line">            <span class="keyword">return</span> a - b;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(calculate(Operator.add, <span class="number">10</span>,<span class="number">10</span>));</div><div class="line"><span class="built_in">console</span>.log(calculate(Operator.minus, <span class="number">10</span>,<span class="number">10</span>));</div></pre></td></tr></table></figure></p>
<h1 id="生成器与迭代器"><a href="#生成器与迭代器" class="headerlink" title="生成器与迭代器"></a>生成器与迭代器</h1><p>Generator是一个特殊的函数，执行它会返回一个Iterator对象。 通过遍历迭代器， Generator函数运行后会返回一个遍历器对象，而不是普通函数的返回值。</p>
<h2 id="Iterators"><a href="#Iterators" class="headerlink" title="Iterators"></a>Iterators</h2><p>迭代器有一个next方法，每次执行的时候会返回一个对象 对象里面有两个属性，一个是value表示返回的值，还有就是布尔值done,表示是否迭代完成</p>
<p>function buy(books) {<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        next()&#123;</div><div class="line">            <span class="keyword">let</span> done = i == books.length;</div><div class="line">            <span class="keyword">let</span> value = !done ? books[i++] : <span class="literal">undefined</span>;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="attr">value</span>: value,</div><div class="line">                <span class="attr">done</span>: done</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> iterators = buy([<span class="string">'js'</span>, <span class="string">'html'</span>]);</div><div class="line"><span class="keyword">var</span> curr;</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    curr = iterators.next();</div><div class="line">    <span class="built_in">console</span>.log(curr);</div><div class="line">&#125; <span class="keyword">while</span> (!curr.done);</div></pre></td></tr></table></figure></p>
<h2 id="Generators"><a href="#Generators" class="headerlink" title="Generators"></a>Generators</h2><p>生成器用于创建迭代器</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>* <span class="title">buy</span>(<span class="params">books</span>)</span>&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;books.length;i++)&#123;</div><div class="line">        <span class="keyword">yield</span> books[i];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> buying = buy([<span class="string">'js'</span>,<span class="string">'html'</span>]);</div><div class="line"><span class="keyword">var</span> curr;</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    curr = buying.next();</div><div class="line">    <span class="built_in">console</span>.log(curr);</div><div class="line">&#125; <span class="keyword">while</span> (!curr.done);</div></pre></td></tr></table></figure>
<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><p>一个Set是一堆东西的集合,Set有点像数组,不过跟数组不一样的是，Set里面不能有重复的内容</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> books = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">books.add(<span class="string">'js'</span>);</div><div class="line">books.add(<span class="string">'js'</span>);<span class="comment">//添加重复元素集合的元素个数不会改变</span></div><div class="line">books.add(<span class="string">'html'</span>);</div><div class="line">books.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">book</span>)</span>&#123;<span class="comment">//循环集合</span></div><div class="line">    <span class="built_in">console</span>.log(book);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(books.size);<span class="comment">//集合中元数的个数</span></div><div class="line"><span class="built_in">console</span>.log(books.has(<span class="string">'js'</span>));<span class="comment">//判断集合中是否有此元素</span></div><div class="line">books.delete(<span class="string">'js'</span>);<span class="comment">//从集合中删除此元素</span></div><div class="line"><span class="built_in">console</span>.log(books.size);</div><div class="line"><span class="built_in">console</span>.log(books.has(<span class="string">'js'</span>));</div><div class="line">books.clear();<span class="comment">//清空 set</span></div><div class="line"><span class="built_in">console</span>.log(books.size);</div></pre></td></tr></table></figure>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>可以使用 Map 来组织这种名值对的数据</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> books = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">books.set(<span class="string">'js'</span>,&#123;<span class="attr">name</span>:<span class="string">'js'</span>&#125;);<span class="comment">//向map中添加元素</span></div><div class="line">books.set(<span class="string">'html'</span>,&#123;<span class="attr">name</span>:<span class="string">'html'</span>&#125;);</div><div class="line"><span class="built_in">console</span>.log(books.size);<span class="comment">//查看集合中的元素</span></div><div class="line"><span class="built_in">console</span>.log(books.get(<span class="string">'js'</span>));<span class="comment">//通过key获取值</span></div><div class="line">books.delete(<span class="string">'js'</span>);<span class="comment">//执照key删除元素</span></div><div class="line"><span class="built_in">console</span>.log(books.has(<span class="string">'js'</span>));<span class="comment">//判断map中有没有key</span></div><div class="line">books.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123; <span class="comment">//forEach可以迭代map</span></div><div class="line">    <span class="built_in">console</span>.log( key + <span class="string">' = '</span> + value);</div><div class="line">&#125;);</div><div class="line">books.clear();<span class="comment">//清空map</span></div></pre></td></tr></table></figure>
<h1 id="模块的导入导出"><a href="#模块的导入导出" class="headerlink" title="模块的导入导出"></a>模块的导入导出</h1><p>我们之前写的Javascript一直都没有模块化的体系，无法将一个庞大的js工程拆分成一个个功能相对独立但相互依赖的小工程，再用一种简单的方法把这些小工程连接在一起。</p>
<p>这有可能导致两个问题：</p>
<ul>
<li>一方面js代码变得很臃肿，难以维护;</li>
<li>另一方面我们常常得很注意每个script标签在html中的位置，因为它们通常有依赖关系，顺序错了可能就会出bug;在es6之前为解决上面提到的问题，我们得利用第三方提供的一些方案，主要有两种CommonJS(服务器端)和AMD（浏览器端，如require.js）。</li>
</ul>
<p>而现在我们有了es6的module功能，它实现非常简单，可以成为服务器和浏览器通用的模块解决方案。</p>
<p>ES6模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。CommonJS和AMD模块，都只能在运行时确定这些东西。</p>
<p>传统的写法首先我们回顾下require.js的写法。假设我们有两个js文件: index.js和content.js,现在我们想要在index.js中使用content.js返回的结果，我们要怎么做呢？</p>
<p>首先定义<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//content.js</span></div><div class="line">define(<span class="string">'content.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'A cat'</span>;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>然后require<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="built_in">require</span>([<span class="string">'./content.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">animal</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(animal);   <span class="comment">//A cat</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>那CommonJS是怎么写的呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="keyword">var</span> animal = <span class="built_in">require</span>(<span class="string">'./content.js'</span>)</div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//content.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="string">'A cat'</span></div></pre></td></tr></table></figure>
<p>ES6的写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="keyword">import</span> animal <span class="keyword">from</span> <span class="string">'./content'</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//content.js</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="string">'A cat'</span></div></pre></td></tr></table></figure>
<h2 id="导入语法"><a href="#导入语法" class="headerlink" title="导入语法"></a>导入语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> name <span class="keyword">from</span> <span class="string">'module-name'</span></div><div class="line"><span class="keyword">import</span> &#123;member&#125; <span class="keyword">from</span> <span class="string">'module-name'</span></div><div class="line"><span class="keyword">import</span> &#123;member <span class="keyword">as</span> alias&#125; <span class="keyword">from</span> <span class="string">'module-name'</span></div><div class="line"><span class="keyword">import</span> &#123;member1,member2as alias2,[...]&#125; <span class="keyword">from</span> <span class="string">'module-name'</span></div><div class="line"><span class="keyword">import</span> name,&#123;member,[,[...]]&#125; <span class="keyword">from</span> <span class="string">'module-name'</span></div><div class="line"><span class="keyword">import</span> <span class="string">'module-name'</span></div></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> name <span class="keyword">from</span> <span class="string">'my-module.js'</span> ;</div><div class="line"><span class="comment">//导出整个模块到当前作用域，name作为接收该模块的对象名称</span></div><div class="line">　　</div><div class="line"><span class="keyword">import</span> &#123;moduleName&#125; <span class="keyword">from</span> <span class="string">'my-module.js'</span>;</div><div class="line"><span class="comment">//导出模块中的单个成员moduleName</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123;moduleName1,moduleName2&#125; <span class="keyword">from</span> <span class="string">'my-module'</span>;</div><div class="line"><span class="comment">//导出模块中的多个成员moduleName1、moduleName2</span></div><div class="line">　　</div><div class="line"><span class="keyword">import</span> &#123;moduleName <span class="keyword">as</span> moduleAlias&#125; <span class="keyword">from</span> <span class="string">'my-module'</span>;</div><div class="line"></div><div class="line"><span class="keyword">import</span> myDefault,&#123;moduleName1,moduleName2&#125; <span class="keyword">from</span> <span class="string">'my-module'</span>;</div><div class="line"><span class="comment">//myDefault为my-module.js文件default导出项</span></div></pre></td></tr></table></figure></p>
<h2 id="导出语法"><a href="#导出语法" class="headerlink" title="导出语法"></a>导出语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">export &#123;name1,name2,...,nameN&#125;</div><div class="line">export &#123;variable1 as name1,variable2 as name2,...&#125;</div><div class="line">export let name1,name2,...</div><div class="line">export let name1=..,name2=...</div><div class="line">export default expression</div><div class="line">export default function(...)&#123;&#125;...  //also class,function</div><div class="line">export default function name1(...)&#123;...&#125;  //also class,function</div><div class="line">export&#123;name1 as default,...&#125;</div><div class="line">export * from ...</div><div class="line">export &#123;name1,name2,...&#125; from ...</div><div class="line">expoert &#123;import1 as name1,import2 as name2,...&#125; from ...</div></pre></td></tr></table></figure>
<p>导出示例：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> &#123;<span class="function"><span class="keyword">function</span>&#125;;</div><div class="line">//导出一个函数</div><div class="line"><span class="title">export</span> <span class="title">const</span> <span class="title">foo</span> = 2;</div><div class="line">//导出一个常量</div><div class="line"><span class="title">export</span> <span class="title">default</span> <span class="title">myFunctionClass</span>;</div><div class="line">//默认导出，每个模块只有一个默认导出，导出的可以是一个函数，一个对象，一个类</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ECMAScript6&quot;&gt;&lt;a href=&quot;#ECMAScript6&quot; class=&quot;headerlink&quot; title=&quot;ECMAScript6&quot;&gt;&lt;/a&gt;ECMAScript6&lt;/h1&gt;&lt;p&gt;ECMAScript简称就是ES,你可以把它看成是一套标准,Java
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>模块</title>
    <link href="http://yoursite.com/2017/02/15/%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2017/02/15/模块/</id>
    <published>2017-02-15T08:04:41.000Z</published>
    <updated>2017-02-16T00:21:41.193Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js不足"><a href="#js不足" class="headerlink" title="js不足"></a>js不足</h2><ul>
<li>js没有模块系统，不支持封闭作用域或依赖管理</li>
<li>没有标准库，没有文件系统API</li>
<li>没有包管理系统，不能自动加载和安装依赖</li>
</ul>
<h2 id="什么是Common-js"><a href="#什么是Common-js" class="headerlink" title="什么是Common.js"></a>什么是Common.js</h2><p>CommonJS 是javascript模块化编程的一种规范，主要是在服务器端模块化的规范，一个单独的文件就是一个模块。每一个模块都是一个单独的作用域，也就是说，在该模块内部定义的变量，无法被其他模块读取，除非定义为global对象的属性。</p>
<h2 id="模块的使用"><a href="#模块的使用" class="headerlink" title="模块的使用"></a>模块的使用</h2><h3 id="模块化的概念"><a href="#模块化的概念" class="headerlink" title="模块化的概念"></a>模块化的概念</h3><p>定义模块 一个单独的文件就是一个模块。每一个模块都是一个单独的作用域</p>
<p>导出模块 使用<code>module.exports</code>或者<code>exports</code></p>
<p>在node中实际导出的模块是<code>module.exports</code></p>
<p>内部实现是：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports=exports=&#123;&#125;;</div><div class="line"><span class="comment">//stu.js文件中</span></div><div class="line">obj=&#123;<span class="attr">name</span>:<span class="string">"wpl"</span>,<span class="attr">age</span>:<span class="number">22</span>&#125;;</div><div class="line"><span class="built_in">module</span>.exports=obj;</div></pre></td></tr></table></figure></p>
<p>调用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s=<span class="built_in">require</span>(<span class="string">"./stu"</span>);</div><div class="line"><span class="built_in">console</span>.log(s.name);</div></pre></td></tr></table></figure></p>
<p>如果方式为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exports.stu=obj</div></pre></td></tr></table></figure></p>
<p>//实际上是给<code>module.exports</code>和<code>exports</code>添加了一个stu的属性，这两个变量还是指向的同一个内存地址<br>调用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> s=<span class="built_in">require</span>(<span class="string">"./stu"</span>);</div><div class="line"><span class="built_in">console</span>.log(s.stu.name);</div></pre></td></tr></table></figure></p>
<p>切记:<br><code>exports=obj;</code>//这个时候<code>module.exports</code>和<code>exports</code>的内存地址就不是一个了，然而最终导出的是<code>module.exports={}</code>,所以这种做法是错误的</p>
<p>使用模块 通过require使用模块</p>
<h3 id="文件的作用域"><a href="#文件的作用域" class="headerlink" title="文件的作用域"></a>文件的作用域</h3><p>每个模块都是一个单独的作用域,通过闭包的形式产生独立作用域</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">exports,require,module,__filename,__dirname</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>我们新建一个js文件，代码都是作用在这个闭包里面，所以<code>exports,require,module,__filename,__dirname</code>这5个形参是可以直接拿来使用的</p>
<h3 id="文件加载缓存"><a href="#文件加载缓存" class="headerlink" title="文件加载缓存"></a>文件加载缓存</h3><p>加载模块会缓存，加载多次会得到同一个对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>(<span class="string">'./test.js'</span>);</div></pre></td></tr></table></figure>
<p>查看模块的缓存<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">require</span>.cache);</div></pre></td></tr></table></figure></p>
<p>查看模块的绝对路径</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.resolve(<span class="string">'./test.js'</span>);</div></pre></td></tr></table></figure>
<p>查看单个的模块缓存</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">require</span>.cache[<span class="built_in">require</span>.resolve(<span class="string">'./test.js'</span>)]</div></pre></td></tr></table></figure>
<p>删除模块缓存</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">delete</span> <span class="built_in">require</span>.cache[<span class="string">'G:\\work\\Node\\cache.js'</span>];</div></pre></td></tr></table></figure>
<p>导出类和对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">exports,require,module,__filename,__dirname</span>)</span>&#123;</div><div class="line">    exports = <span class="built_in">module</span>.exports = &#123;&#125;;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="包和npm"><a href="#包和npm" class="headerlink" title="包和npm"></a>包和npm</h3><ul>
<li>多个模块(多个文件)可以封装成一个包</li>
<li>npm是node.js默认的模块管理器,用来安装和管理node模块</li>
<li>可以用包的方式通过npm安装、卸载、发布包</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;js不足&quot;&gt;&lt;a href=&quot;#js不足&quot; class=&quot;headerlink&quot; title=&quot;js不足&quot;&gt;&lt;/a&gt;js不足&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;js没有模块系统，不支持封闭作用域或依赖管理&lt;/li&gt;
&lt;li&gt;没有标准库，没有文件系统API&lt;/li&gt;
&lt;li
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>服务</title>
    <link href="http://yoursite.com/2017/02/15/%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2017/02/15/服务/</id>
    <published>2017-02-15T00:04:34.000Z</published>
    <updated>2017-02-15T06:19:26.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h2><p>angular会自动创建实例并注入，不需要手工创建 service在整个应用的生命周期存在，可以共享数据，服务只会实例化一次，在angular中创建服务的方式有五种，但是多数的情况下会使用app.factory来创建服务。下面就具体的介绍一下这五种创建方式的异同点</p>
<h2 id="constant服务"><a href="#constant服务" class="headerlink" title="constant服务"></a>constant服务</h2><p><code>app.constant(&#39;name&#39;,obj)</code></p>
<p>name为服务的名字,obj为一个json对象.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> serviceApp = angular.module(<span class="string">'serviceApp'</span>,[]);</div><div class="line"></div><div class="line">serviceApp.constant(<span class="string">'myConfig'</span>,&#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">'code_bunny'</span>,</div><div class="line">    <span class="attr">age</span>:<span class="number">12</span>,</div><div class="line">    <span class="attr">getId</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>constant创建服务返回一个json对象(也就是第二个参数中传入的对象),这个对象里可以有参数,可以有方法,并且,属性和方法都可以在控制器中修改,新增,但是按照它的设计本意,一般constant创建的服务不会去修改它的内容,需要修改内容,最好用value来创建服务. </p>
<p>注意点：<br>1.它是一个引用对象,无论被注入多少个控制器中,实际都指向同一个对象,所以,无论修改其中的哪一个,其它所有的服务都会被改变.</p>
<p>2.服务修改过后,ng不会自动同步,简单的说,就是它没有做到自动双向绑定数据,比如在这里给服务新增了love属性:angular.extend(myConfig,{love:’zxg’}),我需要使用$scope.$watch(myConfig.love,function(){$scope.love = myConfig.love;})这样才能把love属性值同步到视图中.</p>
<p>3.constant服务不能通过decorator进行装饰</p>
<h2 id="value服务"><a href="#value服务" class="headerlink" title="value服务"></a>value服务</h2><p><code>app.value(&#39;name&#39;,obj)</code></p>
<p>name为服务的名字,obj为一个json对象.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">serviceApp.value(<span class="string">'myConfig'</span>,&#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">'code_bunny'</span>,</div><div class="line">    <span class="attr">age</span>:<span class="number">12</span>,</div><div class="line">    <span class="attr">getId</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line">serviceApp.config(<span class="function"><span class="keyword">function</span>(<span class="params">$provide</span>)</span>&#123;</div><div class="line">    $provide.decorator(<span class="string">'myConfig'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$delegate</span>)</span>&#123;</div><div class="line">        $delegate.money = <span class="string">'100w'</span>;</div><div class="line">        <span class="keyword">return</span> $delegate</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>value创建服务返回一个json对象(也就是第二个参数中传入的对象),这个对象里可以有参数,可以有方法,并且,属性和方法都可以在控制器中修改,新增,按照它的设计本意,如果属性和方法需要被修改内容,就用value来创建服务. </p>
<p>注意点:</p>
<p>1.同constant注意点1</p>
<p>2.同constant注意点2</p>
<p>3.value可以被装饰,所以这里myConfig服务拥有了money属性.</p>
<h2 id="factory服务"><a href="#factory服务" class="headerlink" title="factory服务"></a>factory服务</h2><p>app.factory(‘name’,function(){return obj})</p>
<p>name为服务的名字,第二个参数传入一个函数,函数需要有一个返回值obj,返回一个对象.实际被注入的服务就是这个对象.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">serviceApp.factory(<span class="string">'myConfig'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> myname = <span class="string">'code_bunny'</span>;</div><div class="line">    <span class="keyword">var</span> age = <span class="number">12</span>;</div><div class="line">    <span class="keyword">var</span> id = <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">name</span>: myname,</div><div class="line">        <span class="attr">age</span>: age,</div><div class="line">        <span class="attr">getId</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> id</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>或者是这样的写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">serviceApp.factory(<span class="string">'myConfig'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> constructorFun()</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">constructorFun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> myname = <span class="string">'code_bunny'</span>;</div><div class="line">    <span class="keyword">var</span> age = <span class="number">12</span>;</div><div class="line">    <span class="keyword">var</span> id = <span class="number">1</span>;</div><div class="line">    <span class="keyword">this</span>.name = myname;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.getId = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> id</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>装饰部分代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">serviceApp.config(<span class="function"><span class="keyword">function</span>(<span class="params">$provide</span>)</span>&#123;</div><div class="line">    $provide.decorator(<span class="string">'myConfig'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$delegate</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log($delegate);</div><div class="line">        $delegate.money = <span class="string">'100w'</span>;</div><div class="line">        <span class="keyword">return</span> $delegate</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>factory服务是最常见最常用的服务类型,几乎可以满足90%的自己开发的需求,使用它可以编写一些逻辑,通过这些逻辑最后返回所需要的对象.比如使用$http来获取一些数据.我们就在factory创建的服务里抓取数据,最后返回.</p>
<p>它和constant,value最大的区别是,factory服务是有一个处理过程,经过这个过程,才返回结果的. </p>
<p>注意点:</p>
<p>1.同constant注意点1</p>
<p>2.同constant注意点2</p>
<p>3.factory返回的服务也可以被装饰,所以这里myConfig服务拥有了money属性</p>
<h2 id="service服务"><a href="#service服务" class="headerlink" title="service服务"></a>service服务</h2><p><code>app.service(&#39;name&#39;,constructor)</code></p>
<p>name为服务的名字,constructor是一个构造函数.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">serviceApp.service(<span class="string">'myConfig'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> myname = <span class="string">'code_bunny'</span>;</div><div class="line">    <span class="keyword">var</span> age = <span class="number">12</span>;</div><div class="line">    <span class="keyword">var</span> id = <span class="number">1</span>;</div><div class="line">    <span class="keyword">this</span>.name = myname;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.getId = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> id</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>或者是这样</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">serviceApp.service(<span class="string">'myConfig'</span>,constructorFun);</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">constructorFun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> myname = <span class="string">'code_bunny'</span>;</div><div class="line">    <span class="keyword">var</span> age = <span class="number">12</span>;</div><div class="line">    <span class="keyword">var</span> id = <span class="number">1</span>;</div><div class="line">    <span class="keyword">this</span>.name = myname;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.getId = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> id</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>装饰部分代码同上.</p>
<p>service和factory的区别在于,它第二个参数传入的是一个构造函数,最后被注入的服务是这个构造函数实例化以后的结果.所以基本上使用service创建的服务的,也都可以使用factory来创建.</p>
<p>所以这里,factory服务的第二种写法和使用service是一致的:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">serviceApp.factory(<span class="string">'myConfig'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> constructorFun()</div><div class="line">&#125;);</div><div class="line"><span class="comment">//等价于</span></div><div class="line">serviceApp.service(<span class="string">'myConfig'</span>,constructorFun);</div></pre></td></tr></table></figure>
<p>1.同constant注意点1</p>
<p>2.同constant注意点2</p>
<p>3.service返回的服务也可以被装饰,所以这里myConfig服务拥有了money属性</p>
<h2 id="provider服务"><a href="#provider服务" class="headerlink" title="provider服务"></a>provider服务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">app.provider(&apos;name&apos;,function()&#123;</div><div class="line">　　return &#123;</div><div class="line">　　　</div><div class="line">　　　　$get:function()&#123;</div><div class="line">　　　　　　...</div><div class="line">　　　　　　return obj</div><div class="line">　　　　&#125;</div><div class="line">     &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>name为服务的名字,第二个参数接受一个函数,函数返回一个对象,返回的对象比如要有$get方法,$get方法必须要返回一个对象obj,这个对象就是真正被注入的服务.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">serviceApp.provider(<span class="string">'myConfig'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> &#123;</div><div class="line">       <span class="attr">$get</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">           <span class="keyword">var</span> myname = <span class="string">'code_bunny'</span>;</div><div class="line">           <span class="keyword">var</span> age = <span class="number">12</span>;</div><div class="line">           <span class="keyword">var</span> id = <span class="number">1</span>;</div><div class="line">           <span class="keyword">return</span> &#123;</div><div class="line">               <span class="attr">name</span>: myname,</div><div class="line">               <span class="attr">age</span>: age,</div><div class="line">               <span class="attr">getId</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                   <span class="keyword">return</span> id</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>装饰部分代码同上.</p>
<p>provider服务的第二个参数的返回值中必须要有$get方法(除了$get,还可以有其它方法,后面的例子会说到),$get方法就相当于factory服务的第二个参数,最后要返回一个对象,这个对象就是真正被注入的服务</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">serviceApp.provider(<span class="string">'myConfig'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> id = <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">setID</span>:<span class="function"><span class="keyword">function</span>(<span class="params">newID</span>)</span>&#123;</div><div class="line">            id = newID</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">$get</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> myname = <span class="string">'code_bunny'</span>;</div><div class="line">            <span class="keyword">var</span> age = <span class="number">12</span>;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="attr">name</span>: myname,</div><div class="line">                <span class="attr">age</span>: age,</div><div class="line">                <span class="attr">getId</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> id</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">serviceApp.config(<span class="function"><span class="keyword">function</span>(<span class="params">myConfigProvider</span>)</span>&#123;</div><div class="line">    myConfigProvider.setID(<span class="number">2</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里的provider服务不仅仅返回了$get方法,还返回了setID方法,然后id变量是写在函数里的,申明是在返回值的外面,形成一个闭包,可以被内部修改.</p>
<p>然后,在provider服务里定义的方法,可以在config函数里调用.注意调用的格式</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">serviceApp.config(<span class="function"><span class="keyword">function</span>(<span class="params">myConfigProvider</span>)</span>&#123;</div><div class="line">    myConfigProvider.setID(<span class="number">2</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>被注入的服务名不叫<code>myConfig</code>,而是<code>myConfigProvider</code>.然后在函数里面可以调用<code>myConfigProvider</code>的setID方法(也就是myConfig的setID方法).</p>
<p>通过这种方式,使得我们的服务可以被手动配置,比如这里可以配置id.</p>
<p>provider服务最大的特点就是可配置</p>
<p>ng有很多内置的服务都有这样的功能,比如<code>$route</code>服务,<code>$location</code>服务,当我们通过<code>$routeProvider</code>和<code>$locationProvider</code>来配置的时候,其本质就是这些服务是通过provider创建的.</p>
<p>1.同constant注意点1</p>
<p>2.同constant注意点2</p>
<p>3.provider返回的服务也可以被装饰,所以这里myConfig服务拥有了money属性</p>
<h2 id="装饰服务"><a href="#装饰服务" class="headerlink" title="装饰服务"></a>装饰服务</h2><p>装饰服务的定义</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">app.config(<span class="function"><span class="keyword">function</span>(<span class="params">$provide</span>)</span>&#123;</div><div class="line">    $provide.decorator(<span class="string">'name'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$delegate</span>)</span>&#123;  </div><div class="line">        $delegate.money = <span class="string">'100w'</span>;   </div><div class="line">        <span class="keyword">return</span> $delegate</div><div class="line">    &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>同样是通过<code>config</code>,在参数函数中注入<code>$provider</code>服务,<code>$provider</code>服务有个<code>decorator</code>方法,它接受两个参数,第一个参数’name’,是要被装饰的服务的名字,第二个参数是一个函数,函数中注入<code>$delegate</code>,<code>$delegate</code>就是被装饰的服务的实例,然后在函数中操作<code>$delegate</code>,就相当于操作了该服务的实例.</p>
<p>注意点</p>
<p>1.最后一定要return $delegate,这样服务才算被装饰完成了.</p>
<p>2.constant服务是不能被装饰的.</p>
<h2 id="不同服务的应用场景"><a href="#不同服务的应用场景" class="headerlink" title="不同服务的应用场景"></a>不同服务的应用场景</h2><p>1.服务的实例被注入到控制器以后,都是一个引用对象,无论被注入多少个控制器中,实际都指向同一个对象,所以,无论修改其中的哪一个,其它所有的服务都会被改变.</p>
<p>2.服务的实例被修改过后,ng不会自动同步,需要使用$scope.$watch()监测其变化并手动刷新视图.</p>
<p>3.constant服务不能通过decorator进行装饰.</p>
<p>4.一些固定的参数和方法,使用constant</p>
<p>5.可能被修改的参数和方法,使用value</p>
<p>6.通过逻辑处理后得到的参数或方法,使用factory</p>
<p>7.可以使用factory的也可以使用service,反之亦然(一般就是用factory)</p>
<p>8.可以手动配置参数的服务,使用provider</p>
<h2 id="可以创建不同实例的服务"><a href="#可以创建不同实例的服务" class="headerlink" title="可以创建不同实例的服务"></a>可以创建不同实例的服务</h2><p>之前我们说到,所有的服务的实例都是引用对象,无论被注入多少个控制器中,实际都指向同一个对象,所以,无论修改其中的哪一个,其它所有的服务都会被改变.这就是ng服务的设计模式,一般不需要去改变,但如果有特殊需要,要能够每次注入控制器后得到新的实例,可以这样做:</p>
<p>我们给服务添加了一个方法,每次执行一次这个方法,都会创建一个新的实例,这样,虽然在控制器里注入的是服务实例还是同一个,但是在调用创建实例方法的时候,都会创建一个新的实例,然后就可以单独修改这个实例,而不会影响到其它控制器:如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> serviceApp = angular.module(<span class="string">'serviceApp'</span>,[]);</div><div class="line">serviceApp.controller(<span class="string">'myCtrl'</span>,</div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">$scope,myConfig</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> myConfigConstant = myConfig.create();</div><div class="line">    $scope.name = myConfigConstant.name;</div><div class="line">    $scope.age = myConfigConstant.age;</div><div class="line">    angular.extend(myConfigConstant,&#123;<span class="attr">love</span>:<span class="string">'zxg'</span>&#125;);</div><div class="line">    $scope.love = myConfigConstant.love;</div><div class="line">    $scope.id = myConfigConstant.getId();</div><div class="line">    $scope.$watch(myConfigConstant.name,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</div><div class="line">    </span>&#123;$scope.name = myConfigConstant.name;&#125;);</div><div class="line">    myConfigConstant.name = <span class="string">'white_bunny'</span>;</div><div class="line">&#125;);</div><div class="line">serviceApp.controller(<span class="string">'myOtherCtrl'</span>,</div><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params">$scope,myConfig</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> myConfigConstant = myConfig.create();</div><div class="line">    $scope.love = myConfigConstant.love;</div><div class="line">    $scope.name = myConfigConstant.name;</div><div class="line">    $scope.$watch(myConfigConstant.name,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</div><div class="line">    </span>&#123;$scope.name = myConfigConstant.name;&#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/************************创建实例的服务************************/</span></div><div class="line">serviceApp.factory(<span class="string">'myConfig'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line"><span class="comment">//服务返回的对象有一个create方法,该方法每次被执行都会返回一个新的constructorFun实例 </span></div><div class="line">　　　　create: constructorFun.createNew</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//创建一个构造函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">constructorFun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> myName = <span class="string">'code_bunny'</span>;</div><div class="line">    <span class="keyword">var</span> age = <span class="number">12</span>;</div><div class="line">    <span class="keyword">var</span> id = <span class="number">1</span>;</div><div class="line">    <span class="keyword">this</span>.name = myName;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.id = id</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//给构造函数添加createNew方法,用于实例化一个constructorFun.</span></div><div class="line">constructorFun.createNew = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> constructorFun()</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//给构造函数添加原型的方法.使得它的实例可以继承.</span></div><div class="line">constructorFun.prototype = &#123;</div><div class="line">    <span class="attr">getId</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;服务&quot;&gt;&lt;a href=&quot;#服务&quot; class=&quot;headerlink&quot; title=&quot;服务&quot;&gt;&lt;/a&gt;服务&lt;/h2&gt;&lt;p&gt;angular会自动创建实例并注入，不需要手工创建 service在整个应用的生命周期存在，可以共享数据，服务只会实例化一次，在angula
    
    </summary>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>angular知识点扫盲</title>
    <link href="http://yoursite.com/2017/02/14/angular%E7%9F%A5%E8%AF%86%E7%82%B9%E6%89%AB%E7%9B%B2/"/>
    <id>http://yoursite.com/2017/02/14/angular知识点扫盲/</id>
    <published>2017-02-14T10:16:37.000Z</published>
    <updated>2017-02-24T15:45:42.376Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模块的概念"><a href="#模块的概念" class="headerlink" title="模块的概念"></a>模块的概念</h2><p>angular是典型的MVVM的框架</p>
<ul>
<li>Model:数据模型层</li>
<li>viewModel:视图模型层</li>
<li>Controller:控制器，控制逻辑</li>
</ul>
<p><code>ng-app=&quot;myApp&quot;</code></p>
<blockquote>
<p>启动angular项目的，myApp表示通过模块来启动项目，会产生一个根作用域（全局作用域）<br>一切从模块开始</p>
</blockquote>
<h3 id="创建模块"><a href="#创建模块" class="headerlink" title="创建模块"></a>创建模块</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">angular.module(name, [requires], [configFn]);</div></pre></td></tr></table></figure>
<ul>
<li><p>模块的名字<br>name：字符串类型，代表模块的名称；</p>
</li>
<li><p>依赖的模块<br>requires：字符串的数组，代表该模块依赖的其他模块列表，如果不依赖其他模块，用空数组即可</p>
</li>
<li><p>模块的配置<br>configFn：用来对该模块进行一些配置。</p>
</li>
</ul>
<h3 id="启动多个模块"><a href="#启动多个模块" class="headerlink" title="启动多个模块"></a>启动多个模块</h3><p>将不同的模块应用到不同的div上，达到启动多个ng-app的效果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;div ng-controller=&quot;appCtrl&quot; id=&quot;div1&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</div><div class="line">&lt;div ng-controller=&quot;appCtrl&quot; id=&quot;div2&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</div><div class="line">var app1 = angular.module(&apos;appModule2&apos;,[]);</div><div class="line">app1.controller(&apos;appCtrl&apos;, function ($scope,$interval) &#123;</div><div class="line">    $scope.name = &apos;hello&apos;;</div><div class="line">&#125;);</div><div class="line">var app = angular.module(&apos;appModule1&apos;,[]);</div><div class="line">app.controller(&apos;appCtrl&apos;, function ($scope,$interval) &#123;</div><div class="line">    $scope.name = &apos;angular&apos;;</div><div class="line">&#125;);</div><div class="line">angular.bootstrap(div1,[&apos;appModule1&apos;]);</div><div class="line">angular.bootstrap(div2,[&apos;appModule2&apos;]);</div></pre></td></tr></table></figure>
<h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><h3 id="创建控制器"><a href="#创建控制器" class="headerlink" title="创建控制器"></a>创建控制器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'app'</span>).controller(<span class="string">'appCtrl'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;);</div></pre></td></tr></table></figure>
<h3 id="使用控制器"><a href="#使用控制器" class="headerlink" title="使用控制器"></a>使用控制器</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div ng-controller=<span class="string">"ctrl"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div></pre></td></tr></table></figure>
<h3 id="控制器中的-scope"><a href="#控制器中的-scope" class="headerlink" title="控制器中的$scope"></a>控制器中的$scope</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">angular.module(<span class="string">'app'</span>).controller(<span class="string">'appCtrl'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;&#125;);</div></pre></td></tr></table></figure>
<p>当前作用域$scope,$scope就是viewModel</p>
<h3 id="控制器的特点"><a href="#控制器的特点" class="headerlink" title="控制器的特点"></a>控制器的特点</h3><ul>
<li>controller和DOM平行，确定控制器管辖的范围</li>
<li>控制器可以声明变量和方法</li>
<li>控制器可以嵌套</li>
<li>子控制器可以继承父控制器</li>
</ul>
<h3 id="控制器的合理使用"><a href="#控制器的合理使用" class="headerlink" title="控制器的合理使用"></a>控制器的合理使用</h3><ul>
<li>不要复用controller</li>
<li>不要在controller中操作DOM</li>
<li>不要再controller里格式化数据，使用过滤器</li>
<li>控制器之间交互是通过事件进行的</li>
</ul>
<h2 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h2><p>适用范围：表单元素，具体指<code>input</code> <code>select</code> <code>radio</code> <code>checkbox</code> <code>textarea</code><br> 实现双向数据绑定 <code>ng-model=&quot;name&quot;</code>, 如果作用域上有name变量会将name变量放到输入框中,如果没有则会在作用域上声明这个数据，如果更改数据会导致作用域上的数据发生变化。</p>
<p>那么，是如何实现双向数据绑定的呢？</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">ng-app</span>=<span class="string">"appModule"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>angular-test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">zf-model</span>=<span class="string">"age"</span>&gt;</span></div><div class="line">&#123;&#123;age&#125;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">zf-model</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">&#123;&#123;name&#125;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/angular/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></div><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'appModule'</span>,[]);</div><div class="line">app.run(<span class="function"><span class="keyword">function</span> (<span class="params">$rootScope,$interval</span>) </span>&#123;</div><div class="line">    $rootScope.name = <span class="number">100</span>;</div><div class="line">    $rootScope.age = <span class="number">250</span>;</div><div class="line">    $interval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $rootScope.age++</div><div class="line">    &#125;,<span class="number">1000</span>);</div><div class="line">&#125;);</div><div class="line">app.directive(<span class="string">'zfModel'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">link</span>:<span class="function"><span class="keyword">function</span> (<span class="params">scope,element,attrs</span>) </span>&#123;</div><div class="line">            <span class="comment">//取zfModel对应的值是name/age</span></div><div class="line">            <span class="built_in">console</span>.log(attrs.zfModel);</div><div class="line">            <span class="comment">//1.更改视图里的内容，要更改作用域上的数据 v-m</span></div><div class="line">            <span class="comment">//jquery中的change是失去焦点触发</span></div><div class="line">            element.on(<span class="string">'input'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                scope[attrs.zfModel] = element.val();</div><div class="line">                <span class="comment">//原生js 不会自动通知视图刷新</span></div><div class="line">                scope.$apply();</div><div class="line">            &#125;);</div><div class="line">            <span class="comment">//2.如果数据变化，要将内容绑定到视图上 m-v</span></div><div class="line">            scope.$watch(attrs.zfModel,<span class="function"><span class="keyword">function</span> (<span class="params">newVal,oldVal</span>) </span>&#123;</div><div class="line">                element.val(newVal);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="ng-show和ng-if"><a href="#ng-show和ng-if" class="headerlink" title="ng-show和ng-if"></a>ng-show和ng-if</h2><ul>
<li>如果频繁切换显示或者隐藏用ng-show/ng-hide</li>
<li>ng-if如果定下来不再展示 或者判断数据是否存在用ng-if(会产生一个独立的作用域)<br> ng-if如果第一层不满足条件里面的代码不会继续执行</li>
</ul>
<h2 id="ng-class"><a href="#ng-class" class="headerlink" title="ng-class"></a>ng-class</h2><p>ng-class 和 class不冲突，动态的永远比静态的优先级高</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-class</span>=<span class="string">"&#123;true:'size',false:'background'&#125;"</span>[<span class="attr">flag</span>]&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>用法：比如可控制奇偶行的各行变色的情况</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-class</span>=<span class="string">"&#123;true:'even',false:'odd'&#125;[$index%2===0]"</span>&gt;</span></div></pre></td></tr></table></figure>
<p> 处理上面的的方法，angular还提供了自己的api,比如：ng-class-odd  ng-class-even<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">table</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">tr</span> <span class="attr">ng-repeat</span>=<span class="string">"x in records"</span> <span class="attr">ng-class-odd</span>=<span class="string">"'striped'"</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;x.Name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;x.Country&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </div><div class="line">     <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p>定义指令：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">zf-text</span>&gt;</span><span class="tag">&lt;/<span class="name">zf-text</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"zf-text"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- directive:zf-text --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">zf-text</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../lib/angular/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="actionscript"></div><div class="line"> angular.module(<span class="string">"myApp"</span>, [])</div><div class="line">     .directive(<span class="string">'zfText'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">         <span class="keyword">return</span> &#123;</div><div class="line">             restrict: <span class="string">'ECAM'</span>,</div><div class="line">             replace: <span class="literal">true</span>,</div><div class="line">             template: <span class="string">'&lt;h1&gt;hello world !&lt;/h1&gt;'</span>,</div><div class="line">             link: <span class="function"><span class="keyword">function</span> <span class="params">(scope, link, attr)</span> </span>&#123;</div><div class="line"></div><div class="line">             &#125;</div><div class="line"></div><div class="line">         &#125;</div><div class="line">     &#125;);</span></div></pre></td></tr></table></figure>
<p>require:’^?group’,<br>^表示当前找不到则向上一级找，找不到则报错<br>^?表示当前找不到则向上一级找,找不到则不报错，注入进来的东西是null<br>controller:function($scope){},<br>restrict:’EA’限制替换的范围<br>template:’’,要替换的模板/templateUrl:’tmpl/open.html’<br>replace:false,不替换外部的标签<br>transclude:true,保留指令中的内容插入到带有ng-transclude的标签中<br>link:function(scope,element,attrs,ctrl){ 操作dom元素<br>scope当前指令所在的作用域，自己没有作用域则向上查找<br>element jq对象（angular内置的），jquery要引入到angular之前，angular发现自己加载过了jquery，就不会加载自己的jquery了<br>attrs 当前指令所有属性的集合<br>ctrl代表的就是当前依赖的指令的控制器的实例<br>},<br>scope:{<br>title:’@’,通过属性传递 获取的是属性对应的字符串<br>name:’=n’,通过属性传递 获取的是属性对应作用域上的变量<br>fn:’&amp;say’ 通过属性传递一个方法，必须以对象的方式传递 say({n:1});<br>}/true<br>1.{} 完全和父作用域断绝关系<br>2.true 产生作用域但是不断绝作用域的关系</p>
<p>注意事项：</p>
<p>如果你希望你的指令是<code>zfText</code>的形式的话在指令中应该写成是<code>zftext</code>但是这样不符合我们定义的规范<br>replace:true 指令标签会被模板代替掉，模板必须包含一个根元素，<br>如果是注释的指令，必须写上replace:true否则的不会显示，因为模板写在注释里面了。<br>restrict:可选，可以设置这个指令在DOM中可以何种形式被声明，默认的是AE<br>当angular中和jquery同时引入的顺序问题？<br>jquery放在前面  angular发现全局的$  就不会加载angular自带的jqLite</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>ng-click(ng-事件名)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-click</span>=<span class="string">"fn($event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h2><h3 id="ng-disabled"><a href="#ng-disabled" class="headerlink" title="ng-disabled"></a>ng-disabled</h3><p>当表单元素被设置disabled属性为true时元素不可用</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-disabled</span>=<span class="string">'true'</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="ng-readonly"><a href="#ng-readonly" class="headerlink" title="ng-readonly"></a>ng-readonly</h3><p>当表单元素被设置readonly属性为true时元素仅读<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-readonly</span>=<span class="string">"true"</span> <span class="attr">value</span>=<span class="string">"仅读"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="select循环数据"><a href="#select循环数据" class="headerlink" title="select循环数据"></a>select循环数据</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">ng-model</span>=<span class="string">"name"</span> <span class="attr">ng-options</span>=<span class="string">"t.id as t.name for t in type"</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>定义select中的数据</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'appCtrl'</span>,[<span class="string">'$scope'</span>,<span class="string">'$interval'</span>,</div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">$s,$interval</span>) </span>&#123;</div><div class="line">   $s.type = [</div><div class="line">       &#123;<span class="attr">name</span>:<span class="string">'人类'</span>,<span class="attr">id</span>:<span class="number">1</span>&#125;,</div><div class="line">       &#123;<span class="attr">name</span>:<span class="string">'动物'</span>,<span class="attr">id</span>:<span class="number">2</span>&#125;,</div><div class="line">       &#123;<span class="attr">name</span>:<span class="string">'动物'</span>,<span class="attr">id</span>:<span class="number">3</span>&#125;]</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="内置过滤器"><a href="#内置过滤器" class="headerlink" title="内置过滤器"></a>内置过滤器</h3><p>不会改变原数据，只是改变展示方式</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;'abcd' | uppercase&#125;&#125;</div><div class="line">&#123;&#123;'ABCD' | lowercase&#125;&#125;</div><div class="line">&#123;&#123;100000 | number&#125;&#125;</div><div class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>&#123;&#123; &#123;name:1&#125; | json:4&#125;&#125;<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div><div class="line">&#123;&#123;1486437459166 | date:'yy-MM-dd hh时mm分ss秒'&#125;&#125;</div><div class="line">&#123;&#123;100 | currency:'£'&#125;&#125;</div><div class="line">&#123;&#123;'欢迎你来xxx' | limitTo:3&#125;&#125;</div><div class="line">&#123;&#123;[&#123;name:1&#125;,&#123;name:3&#125;,&#123;name:2&#125;] | orderBy:'name':true&#125;&#125;是否倒序</div><div class="line">&#123;&#123;[&#123;name:1&#125;,&#123;name:3&#125;,&#123;name:2&#125;] | filter:3&#125;&#125;</div></pre></td></tr></table></figure>
<h3 id="自定义过滤器"><a href="#自定义过滤器" class="headerlink" title="自定义过滤器"></a>自定义过滤器</h3><p>过滤器和控制器没有关系，过滤器和控制器的声明方式是平齐的通过模块创建<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.filter(<span class="string">'myFilter'</span>,<span class="function"><span class="keyword">function</span><span class="params">(input,options)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">'结果'</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="sce编译html数据"><a href="#sce编译html数据" class="headerlink" title="$sce编译html数据"></a>$sce编译html数据</h2><p>后台返回的数据中带有各种各样的html标签<br>对于angular 1.2一下的版本我们必须要使用$sce这个服务来解决我们的问题。所谓sce即“Strict Contextual Escaping”的缩写。翻译成中文就是“严格的上下文模式”也可理解为<strong>安全绑定</strong>吧。来看看怎么用吧。</p>
<p>把它封装成一个过滤器就可以在模板上随时调用了</p>
<p>javascript code</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.filter(<span class="string">'to_trusted'</span>, [<span class="string">'$sce'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$sce</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">text</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> $sce.trustAsHtml(text);</div><div class="line">&#125;;</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>html code:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ng-bind-html</span>=<span class="string">"currentWork.description | to_trusted"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="ng-bind-和双花括号"><a href="#ng-bind-和双花括号" class="headerlink" title="ng-bind 和双花括号"></a>ng-bind 和双花括号</h2><ul>
<li>可以将作用域上的值取出来</li>
<li>可以赋值 ，可以做运算，可以做三元表达式  但是不能写++</li>
<li>ng-model只能放置变量  取非的话会报错</li>
</ul>
<h2 id="ng-href"><a href="#ng-href" class="headerlink" title="ng-href"></a>ng-href</h2><p>表达式生效前不要加载该资源,防止空链接</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-href</span>=<span class="string">"&#123;&#123; myHref &#125;&#125;"</span>&gt;</span>baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'appModule'</span>,[]);</div><div class="line">app.controller(<span class="string">'appCtrl'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">$scope,$timeout</span>) </span>&#123;</div><div class="line">  $timeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      $scope.myHref = <span class="string">'http://www.baidu.com'</span>;</div><div class="line">  &#125;,<span class="number">20000</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="ng-src"><a href="#ng-src" class="headerlink" title="ng-src"></a>ng-src</h2><p>表达式生效前不引用该资源,防止出现404<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">ng-src</span>=<span class="string">"&#123;&#123;imgSrc&#125;&#125;"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'appModule'</span>,[]);</div><div class="line">app.controller(<span class="string">'appCtrl'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">$scope,$timeout</span>) </span>&#123;</div><div class="line">    $timeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        $scope.imgSrc = <span class="string">'picture address'</span>;</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="指令的分类"><a href="#指令的分类" class="headerlink" title="指令的分类"></a>指令的分类</h2><h3 id="装饰性"><a href="#装饰性" class="headerlink" title="装饰性"></a>装饰性</h3><p>装饰性指令（link（链接函数：链接作用域和视图的））给标签赋予功能， red  drag  一般是A  </p>
<p>例如封装拖拽的一个类指令</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">app.directive(<span class="string">'drag'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">restrict</span>:<span class="string">'A'</span>,</div><div class="line">        <span class="attr">link</span>:<span class="function"><span class="keyword">function</span> (<span class="params">scope,element</span>) </span>&#123;</div><div class="line">        <span class="comment">//在当前元素下 按下鼠标</span></div><div class="line">        element.on(<span class="string">'mousedown'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">            <span class="comment">//求当前盒子距离鼠标的位置的距离</span></div><div class="line">            <span class="keyword">var</span> disX = e.pageX - $(<span class="keyword">this</span>).offset().left;</div><div class="line">            <span class="keyword">var</span> disY = e.pageY - $(<span class="keyword">this</span>).offset().top;</div><div class="line">            <span class="comment">//给文档绑定鼠标移动，防止失去焦点</span></div><div class="line">            $(<span class="built_in">document</span>).on(<span class="string">'mousemove'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> L =  e.pageX - disX;</div><div class="line">                <span class="keyword">var</span> T =  e.pageY - disY;</div><div class="line">                element.css(&#123;<span class="attr">top</span>:T,<span class="attr">left</span>:L&#125;);</div><div class="line">            &#125;);</div><div class="line">            <span class="comment">//当鼠标抬起后 移除up和move事件</span></div><div class="line">            $(<span class="built_in">document</span>).on(<span class="string">'mouseup'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                $(<span class="built_in">document</span>).off();</div><div class="line">            &#125;);</div><div class="line">            e.preventDefault();</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="组件式"><a href="#组件式" class="headerlink" title="组件式"></a>组件式</h3><p>组件式（会有模板） </p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">app.directive(<span class="string">'red'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">restrict</span>:<span class="string">'A'</span>,</div><div class="line">    <span class="attr">link</span>:<span class="function"><span class="keyword">function</span> (<span class="params">$scope,element,attrs</span>) </span>&#123;</div><div class="line">        <span class="comment">//链接函数 链接作用域和视图的</span></div><div class="line">        <span class="comment">//scope 代表当前指令所在的作用域。</span></div><div class="line">        <span class="comment">//$scope.aa = 100;</span></div><div class="line">        <span class="comment">//element 代表的是当前指令所在的那个元素 并且是jq对象</span></div><div class="line">        <span class="comment">//angular.element包装过的对象</span></div><div class="line">      element.css(&#123;<span class="attr">border</span>:<span class="string">'1px solid red'</span>,<span class="attr">fontSize</span>:<span class="number">80</span>&#125;);</div><div class="line">    &#125;</div><div class="line"> &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="ng-cloak"><a href="#ng-cloak" class="headerlink" title="ng-cloak"></a>ng-cloak</h2><p>防止闪烁一片,一般在body标签中添加ng-cloak<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-attr">[ng-cloak]</span>&#123;<span class="attribute">display</span>:none&#125;</div></pre></td></tr></table></figure></p>
<h2 id="ng-repeat"><a href="#ng-repeat" class="headerlink" title="ng-repeat"></a>ng-repeat</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"(key,value) in obj track by $index"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="apply方法"><a href="#apply方法" class="headerlink" title="$apply方法"></a>$apply方法</h2><h3 id="原生的方法不会刷新视图"><a href="#原生的方法不会刷新视图" class="headerlink" title="原生的方法不会刷新视图"></a>原生的方法不会刷新视图</h3><p>html code</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"appCtrl"</span>&gt;</span></div><div class="line">    &#123;&#123;name&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>控制器</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'appCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">$s</span>) </span>&#123;</div><div class="line">        $s.name = <span class="number">1</span>;</div><div class="line">        setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            $s.name++</div><div class="line">        &#125;,<span class="number">1000</span>)</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<h3 id="通知视图刷新"><a href="#通知视图刷新" class="headerlink" title="通知视图刷新"></a>通知视图刷新</h3><p>方式一</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'appCtrl'</span>,[<span class="string">'$scope'</span>,<span class="string">'$interval'</span>,</div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">$s,$interval</span>) </span>&#123;</div><div class="line">    $s.name = <span class="number">1</span>;</div><div class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $s.name++;</div><div class="line">        $s.$apply();</div><div class="line">    &#125;,<span class="number">1000</span>);</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>方式二<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'appCtrl'</span>,[<span class="string">'$scope'</span>,<span class="string">'$interval'</span>,</div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">$s,$interval</span>) </span>&#123;</div><div class="line">    $s.name = <span class="number">1</span>;</div><div class="line">    setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $s.$apply(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            $s.name++;</div><div class="line">        &#125;);</div><div class="line">    &#125;,<span class="number">1000</span>);</div><div class="line">&#125;]);</div></pre></td></tr></table></figure></p>
<h3 id="自带的指令会刷新视图"><a href="#自带的指令会刷新视图" class="headerlink" title="自带的指令会刷新视图"></a>自带的指令会刷新视图</h3><h4 id="timeout"><a href="#timeout" class="headerlink" title="$timeout"></a>$timeout</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'appCtrl'</span>,[<span class="string">'$scope'</span>,<span class="string">'$timeout'</span>,</div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">$s,$timeout</span>) </span>&#123;</div><div class="line">    $s.name = <span class="number">1</span>;</div><div class="line">    $timeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $s.name++;</div><div class="line">    &#125;,<span class="number">1000</span>);</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<h4 id="interval"><a href="#interval" class="headerlink" title="$interval"></a>$interval</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'appCtrl'</span>,[<span class="string">'$scope'</span>,<span class="string">'$interval'</span>,</div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">$s,$interval</span>) </span>&#123;</div><div class="line">    $s.name = <span class="number">1</span>;</div><div class="line">    $interval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $s.name++;</div><div class="line">    &#125;,<span class="number">1000</span>);</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>总结：angular自带的指令（服务）都可以自动调用$apply方法,但是原生的方法是无法调用的<br>比如setInterval,setTimeout等在，此时就需要我们手动的触发这个$apply去执行脏检查</p>
<h4 id="取消定时器"><a href="#取消定时器" class="headerlink" title="取消定时器"></a>取消定时器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'appCtrl'</span>,[<span class="string">'$scope'</span>,<span class="string">'$interval'</span>,</div><div class="line"><span class="function"><span class="keyword">function</span> (<span class="params">$s,$interval</span>) </span>&#123;</div><div class="line">    $s.name = <span class="number">1</span>;</div><div class="line">    <span class="keyword">var</span> timer = $interval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        $s.name++;</div><div class="line">        $interval.cancel(timer);</div><div class="line">    &#125;,<span class="number">1000</span>);</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<h2 id="watch"><a href="#watch" class="headerlink" title="$watch"></a>$watch</h2><h3 id="watch监听模型上的值"><a href="#watch监听模型上的值" class="headerlink" title="$watch监听模型上的值"></a>$watch监听模型上的值</h3><p>页面代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"appCtrl"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"name"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>监听方式一：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'appCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">   $scope.$watch(<span class="string">'name'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">newVal,oldVal</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(newVal,oldVal);</div><div class="line">   &#125;)</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<p>监听方式二：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'appCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">$s</span>) </span>&#123;</div><div class="line">       $s.$watch(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> $s.name;</div><div class="line">       &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">newVal,oldVal</span>) </span>&#123;</div><div class="line">           <span class="built_in">console</span>.log(newVal,oldVal);</div><div class="line">       &#125;);</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<h3 id="watch监听方法"><a href="#watch监听方法" class="headerlink" title="$watch监听方法"></a>$watch监听方法</h3><p>页面代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"appCtrl"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"val1"</span>&gt;</span></div><div class="line">   +</div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"val2"</span>&gt;</span></div><div class="line">    &#123;&#123;total()&#125;&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>控制器</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'appCtrl'</span>,[<span class="string">'$scope'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">        $scope.total = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> $scope.val1+$s.val2;</div><div class="line">        &#125;;</div><div class="line">        $scope.$watch($scope.total, <span class="function"><span class="keyword">function</span> (<span class="params">newVal,oldVal</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(newVal,oldVal);</div><div class="line">        &#125;)</div><div class="line">&#125;]);</div></pre></td></tr></table></figure>
<h2 id="组件之间的通信"><a href="#组件之间的通信" class="headerlink" title="组件之间的通信"></a>组件之间的通信</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">ng-app</span>=<span class="string">"appModule"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>珠峰培训http://www.zhufengpeixun.cn<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></div><div class="line">        <span class="selector-class">.title</span>&#123;<span class="attribute">width</span>: <span class="number">300px</span>;<span class="attribute">height</span>: <span class="number">50px</span>;<span class="attribute">background</span>: orangered&#125;</div><div class="line">        <span class="selector-class">.content</span>&#123;<span class="attribute">width</span>: <span class="number">300px</span>;<span class="attribute">height</span>: <span class="number">200px</span>;<span class="attribute">background</span>: <span class="number">#e4e4e4</span>&#125;</div><div class="line">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 300px;float: left"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">group</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">opener</span> <span class="attr">title</span>=<span class="string">"section1"</span>&gt;</span>content1<span class="tag">&lt;/<span class="name">opener</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">opener</span> <span class="attr">title</span>=<span class="string">"section2"</span>&gt;</span>content2<span class="tag">&lt;/<span class="name">opener</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">opener</span> <span class="attr">title</span>=<span class="string">"section3"</span>&gt;</span>content3<span class="tag">&lt;/<span class="name">opener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">group</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/angular/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript"></div><div class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'appModule'</span>,[]);</div><div class="line"><span class="comment">//平级的指令 不能实现交互</span></div><div class="line">app.directive(<span class="string">'group'</span>,<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        controller:<span class="function"><span class="keyword">function</span> <span class="params">($scope)</span> </span>&#123;</div><div class="line">            <span class="comment">//收集儿子的作用域</span></div><div class="line">            $scope.arr = [];</div><div class="line">            <span class="keyword">this</span>.collect = <span class="function"><span class="keyword">function</span> <span class="params">(s)</span> </span>&#123;</div><div class="line">                $scope.arr.push(s);</div><div class="line">            &#125;;</div><div class="line">            <span class="keyword">this</span>.tell = <span class="function"><span class="keyword">function</span> <span class="params">(s)</span> </span>&#123;<span class="comment">//s是当前点击的作用域</span></div><div class="line">                $scope.arr.forEach(<span class="function"><span class="keyword">function</span> <span class="params">(item)</span> </span>&#123;</div><div class="line">                    <span class="keyword">if</span>(item!=s)&#123;</div><div class="line">                        item.flag = <span class="literal">false</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">app.directive(<span class="string">'opener'</span>,<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        require:<span class="string">'^?group'</span>,</div><div class="line">        templateUrl:<span class="string">'tmpl/open.html'</span>,</div><div class="line">        transclude:<span class="literal">true</span>,</div><div class="line">        link:<span class="function"><span class="keyword">function</span> <span class="params">(scope,element,attrs,groupCtrl)</span> </span>&#123;</div><div class="line">            scope.flag = <span class="literal">false</span>;</div><div class="line">            groupCtrl.collect(scope);</div><div class="line">            scope.toggle = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">//1.取反自己的显示隐藏</span></div><div class="line">                scope.flag = !scope.flag;</div><div class="line">                <span class="comment">//2. 告诉父亲除了我其他人都关掉</span></div><div class="line">                groupCtrl.tell(scope);</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        scope:&#123;</div><div class="line">            title:<span class="string">'@'</span>,</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="jsonp"><a href="#jsonp" class="headerlink" title="jsonp"></a>jsonp</h2><p>这是一个jsonp实现的案例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">ng-app</span>=<span class="string">"appModule"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>jsonp<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./node_modules/bootstrap/dist/css/bootstrap.css"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"myCtrl"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"h3 text-danger"</span>&gt;</span>百度搜索<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">ng-keyup</span>=<span class="string">"search($event)"</span> <span class="attr">ng-model</span>=<span class="string">"query"</span> <span class="attr">ng-keydown</span>=<span class="string">"down($event)"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span> <span class="attr">ng-repeat</span>=<span class="string">"item in lists track by $index"</span> <span class="attr">ng-class</span>=<span class="string">"&#123;active:index==$index&#125;"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--index是当前按上下键后 选择数组中的某一个索引--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"node_modules/angular/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></div><div class="line">    <span class="keyword">var</span> app = angular.module(<span class="string">'appModule'</span>, []);</div><div class="line">    <span class="comment">//angular提供给我们一个方法$http angular中的ajax用法同jquery</span></div><div class="line">    app.controller(<span class="string">'myCtrl'</span>, [<span class="string">'$scope'</span>, <span class="string">'$http'</span>, <span class="string">'$sce'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, $http, $sce</span>) </span>&#123;</div><div class="line">        <span class="comment">//百度接口要设置callback 并且callback名字要是cb</span></div><div class="line">        $scope.lists = [];</div><div class="line">        <span class="comment">//声明一个选中的索引</span></div><div class="line">        $scope.index = <span class="number">-1</span>;</div><div class="line">        <span class="comment">//down触发的默认事件</span></div><div class="line">        $scope.down = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> keyCode  = e.keyCode; <span class="comment">//当按下上键时阻止默认事件</span></div><div class="line">            <span class="keyword">if</span>(keyCode == <span class="number">38</span>)&#123;</div><div class="line">                e.preventDefault();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">var</span> timer = <span class="string">''</span>;</div><div class="line">        $scope.search = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> keyCode = e.keyCode;</div><div class="line">            <span class="keyword">if</span>(keyCode == <span class="number">38</span>||keyCode == <span class="number">40</span>)&#123;</div><div class="line">                <span class="keyword">if</span> (keyCode == <span class="number">38</span>) &#123; <span class="comment">//上</span></div><div class="line">                    $scope.index-=<span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span>($scope.index==<span class="number">-2</span>)&#123; <span class="comment">//首次按上键的问题</span></div><div class="line">                        $scope.index = $scope.lists.length<span class="number">-1</span>;</div><div class="line">                        $scope.query = $scope.temp;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span>($scope.index == <span class="number">-1</span> || $scope.index==<span class="number">-2</span>)&#123; <span class="comment">//当现在在0的时候 按上-1 到最后面 并且将临时值赋予给输入框</span></div><div class="line">                        $scope.index = $scope.lists.length;</div><div class="line">                        $scope.query = $scope.temp;</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (keyCode == <span class="number">40</span>) &#123; <span class="comment">//下</span></div><div class="line">                    $scope.index+=<span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span>($scope.index == $scope.lists.length)&#123; <span class="comment">//当到了最后一个时候回到初始值</span></div><div class="line">                        $scope.index = <span class="number">-1</span>;</div><div class="line">                        $scope.query = $scope.temp;</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                clearTimeout(timer);</div><div class="line">                <span class="comment">//按上下键时 等待1s跳转页面</span></div><div class="line">                timer=setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                   <span class="built_in">window</span>.open(<span class="string">'https://www.baidu.com/s?wd='</span>+$scope.query)</div><div class="line">                &#125;,<span class="number">1000</span>);</div><div class="line">                <span class="comment">//给输入框赋予一个选择的值</span></div><div class="line">                <span class="keyword">return</span> $scope.query = $scope.lists[$scope.index];</div><div class="line">            &#125;</div><div class="line">            $http.jsonp(</div><div class="line">                    $sce.trustAsResourceUrl(</div><div class="line">                        <span class="string">'https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd='</span> + $scope.query),</div><div class="line">                    &#123;<span class="attr">jsonpCallbackParam</span>: <span class="string">'cb'</span>&#125;</div><div class="line">            ).then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123; <span class="comment">//成功的回调</span></div><div class="line">                $scope.temp = $scope.query;<span class="comment">//保存初始的根据什么搜索的</span></div><div class="line">                $scope.lists = res.data.s;</div><div class="line">            &#125;);</div><div class="line">        &#125;;</div><div class="line">    &#125;]);</div><div class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="控制器之间的交互"><a href="#控制器之间的交互" class="headerlink" title="控制器之间的交互"></a>控制器之间的交互</h2><p>控制器间的交互是通过事件进行监听的</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"parentCtrl"</span>&gt;</span></div><div class="line">商品总价 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"total"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"childCtrl"</span>&gt;</span></div><div class="line">    商品的名称 &#123;&#123;product.name&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    商品的单价 &#123;&#123;product.price&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    商品的数量 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> </div><div class="line">    <span class="attr">ng-model</span>=<span class="string">"product.count"</span> <span class="attr">ng-change</span>=<span class="string">"total()"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>子控制器</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">app.controller(<span class="string">'childCtrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">     $scope.product = &#123;<span class="attr">name</span>:<span class="string">'火车'</span>, <span class="attr">price</span>:<span class="number">10</span>,<span class="attr">count</span>:<span class="number">1</span>&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>父控制器</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">app.controller(<span class="string">'parentCtrl'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</div><div class="line">        $scope.total = <span class="number">10</span>;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="emit发射事件"><a href="#emit发射事件" class="headerlink" title="$emit发射事件"></a>$emit发射事件</h3><p>修改子控制器代码,当数量变化时通知父控制器</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$scope.product = &#123;<span class="attr">name</span>:<span class="string">'火车'</span>, <span class="attr">price</span>:<span class="number">10</span>,<span class="attr">count</span>:<span class="number">1</span>&#125;</div><div class="line"> $scope.total = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  $scope.$emit(<span class="string">'total'</span>,$scope.product.price*$scope.product.count);</div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<h3 id="on监听子控制器事件"><a href="#on监听子控制器事件" class="headerlink" title="$on监听子控制器事件"></a>$on监听子控制器事件</h3><p>监听子控制器发射的事件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$scope.total = <span class="number">10</span>;</div><div class="line"> $scope.$on(<span class="string">'total'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev,data</span>) </span>&#123;</div><div class="line">    $scope.total = data;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure>
<h3 id="broadcast向下广播"><a href="#broadcast向下广播" class="headerlink" title="$broadcast向下广播"></a>$broadcast向下广播</h3><p>当总价改变，向下通知所有子控制器</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$scope.$watch(<span class="string">'total'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $scope.$broadcast(<span class="string">'count'</span>,$scope.total);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="on接收父控制器广播的事件"><a href="#on接收父控制器广播的事件" class="headerlink" title="$on接收父控制器广播的事件"></a>$on接收父控制器广播的事件</h3><p>子控制器接收父控制器广播的内容<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$scope.$on(<span class="string">'count'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">ev,data</span>) </span>&#123;</div><div class="line">    $scope.product.count = data/$scope.product.price;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;模块的概念&quot;&gt;&lt;a href=&quot;#模块的概念&quot; class=&quot;headerlink&quot; title=&quot;模块的概念&quot;&gt;&lt;/a&gt;模块的概念&lt;/h2&gt;&lt;p&gt;angular是典型的MVVM的框架&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model:数据模型层&lt;/li&gt;
&lt;li&gt;viewM
    
    </summary>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title>node中的events事件</title>
    <link href="http://yoursite.com/2017/02/14/node%E4%B8%AD%E7%9A%84events%E4%BA%8B%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/02/14/node中的events事件/</id>
    <published>2017-02-14T09:37:57.000Z</published>
    <updated>2017-02-14T10:09:12.113Z</updated>
    
    <content type="html"><![CDATA[<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>有时被称作发布/订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知所有观察者对象，使它们能够自动更新自己。举个再简单不过的例子：张三后天结婚，他通知他的朋友后天来喝喜酒，等到了那一天，大家都过来庆祝张三结婚，在这里面张三结婚就是一个主题对象，他的朋友就是观察者，张三通知朋友就相当于订阅事件，当天朋友过来就相当于emit了，他们就主动的过来了(自动跟新自己的状态)。</p>
<ul>
<li>订阅事件  on      </li>
<li>发布事件  emit  </li>
<li>关闭订阅  off</li>
</ul>
<p>下面就让我们自己实现一个发布订阅模式的例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>._events = &#123;&#125;;</div><div class="line">&#125;</div><div class="line"><span class="comment">//订阅</span></div><div class="line">Man.prototype.on = <span class="function"><span class="keyword">function</span> (<span class="params">eventName, callback</span>) </span>&#123;</div><div class="line">    <span class="comment">//先查看是否是第一次放进去，如果是构造出一个数组   &#123;'有钱',[bad]&#125;;</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._events[eventName]) &#123;</div><div class="line">        <span class="keyword">this</span>._events[eventName].push(callback);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//如果是第一次的话</span></div><div class="line">        <span class="keyword">this</span>._events[eventName] = [callback];</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//发布事件</span></div><div class="line">Man.prototype.emit = <span class="function"><span class="keyword">function</span> (<span class="params">eventName, ...args</span>) </span>&#123;</div><div class="line">    <span class="comment">//找到对应的关系，让其执行</span></div><div class="line">    <span class="comment">//var arg = Array.prototype.slice.call(arguments, 1);</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._events[eventName]) &#123;</div><div class="line">        <span class="keyword">this</span>._events[eventName].forEach(<span class="function"><span class="params">callback</span> =&gt;</span> &#123;</div><div class="line">            callback.apply(<span class="keyword">this</span>, args);</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Man.prototype.off = <span class="function"><span class="keyword">function</span> (<span class="params">eventName, callback</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._events[eventName]) &#123;</div><div class="line">        <span class="keyword">this</span>._events[eventName] = <span class="keyword">this</span>._events[eventName].filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</div><div class="line">            <span class="keyword">return</span> item !== callback;</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bad</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//arguments：&#123; '0': '张三', '1': '李四' &#125;  node中为了区分类数组和数组</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i] + <span class="string">"学坏"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">girlFriend</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[i] + <span class="string">"找女朋友"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man();</div><div class="line">man.on(<span class="string">'有钱'</span>, bad);<span class="comment">//&#123;'有钱':[bad,girlFriend]&#125;</span></div><div class="line">man.on(<span class="string">'有钱'</span>, girlFriend);</div><div class="line">man.off(<span class="string">'有钱'</span>, bad);<span class="comment">//解绑事件</span></div><div class="line">man.emit(<span class="string">'有钱'</span>, <span class="string">'张三'</span>, <span class="string">'李四'</span>);</div></pre></td></tr></table></figure>
<p>然而，node中帮我实现了这个接口，方便了我们编程</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//node自带的模式</span></div><div class="line"><span class="keyword">var</span> eventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>);</div><div class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Man</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">learnBad</span>(<span class="params">who</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(who + <span class="string">"learnBad"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">findGirl</span>(<span class="params">who</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(who + <span class="string">"findGirl"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Man();</div><div class="line"><span class="comment">//实现继承</span></div><div class="line">util.inherits(Man, eventEmitter);</div><div class="line"><span class="comment">//man.on('有钱', learnBad);</span></div><div class="line"><span class="comment">//man.on('有钱', findGirl);</span></div><div class="line">man.once(<span class="string">'有钱'</span>, learnBad);<span class="comment">//once  绑定一次，执行后再在数组中移除</span></div><div class="line">man.once(<span class="string">'有钱'</span>, findGirl);</div><div class="line">man.emit(<span class="string">'有钱'</span>, <span class="string">'张三'</span>);</div><div class="line">man.emit(<span class="string">'有钱'</span>, <span class="string">'张三'</span>);</div><div class="line">man.emit(<span class="string">'有钱'</span>, <span class="string">'张三'</span>);</div><div class="line">man.emit(<span class="string">'有钱'</span>, <span class="string">'张三'</span>);</div><div class="line"><span class="comment">//once值执行一次  执行完了就在数组中移除掉那一项</span></div><div class="line"><span class="comment">// removeListener 移除事件  </span></div><div class="line"><span class="comment">// removeAllListeners  移除所有的事件</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot;观察者模式&quot;&gt;&lt;/a&gt;观察者模式&lt;/h3&gt;&lt;p&gt;有时被称作发布/订阅模式，观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>流</title>
    <link href="http://yoursite.com/2017/02/12/%E6%B5%81/"/>
    <id>http://yoursite.com/2017/02/12/流/</id>
    <published>2017-02-12T15:57:37.000Z</published>
    <updated>2017-04-24T09:26:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="流的概念"><a href="#流的概念" class="headerlink" title="流的概念"></a>流的概念</h2><p>流是一组有序的，有起点和终点的字节数据传输手段 它不关心文件的整体内容，只关注是否从文件中读到了数据，以及读到数据之后的处理 流是一个抽象接口，被 Node中的很多对象所实现。比如HTTP 服务器request和response对象都是流。</p>
<h2 id="可读流createReadStream"><a href="#可读流createReadStream" class="headerlink" title="可读流createReadStream"></a>可读流createReadStream</h2><p>实现了stream.Readable接口的对象,将对象数据读取为流数据,当监听data事件后,开始发射数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fs.createReadStream = <span class="function"><span class="keyword">function</span>(<span class="params">path, options</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ReadStream(path, options);</div><div class="line">&#125;;</div><div class="line">util.inherits(ReadStream, Readable);</div></pre></td></tr></table></figure></p>
<h3 id="创建可读流"><a href="#创建可读流" class="headerlink" title="创建可读流"></a>创建可读流</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> rs = fs.createReadStream(path,[options]);</div></pre></td></tr></table></figure>
<ul>
<li>path读取文件的路径</li>
<li>options<br>  flags打开文件要做的操作,默认为’r’<br>  encoding默认为null<br>  start开始读取的索引位置<br>  end结束读取的索引位置<br>  highWaterMark读取缓存区默认的大小64kb</li>
<li>注意：<br>  如果指定utf8编码highWaterMark要大于3个字节</li>
</ul>
<h3 id="监听data事件"><a href="#监听data事件" class="headerlink" title="监听data事件"></a>监听data事件</h3><p>流切换到流动模式,数据会被尽可能快的读出,相当于打开了水管  谁会不停的流入   知道流干了为止<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rs.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h3 id="监听end事件"><a href="#监听end事件" class="headerlink" title="监听end事件"></a>监听end事件</h3><p>该事件会在读完数据后被触发</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rs.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'读取完成'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="监听error事件"><a href="#监听error事件" class="headerlink" title="监听error事件"></a>监听error事件</h3><p>数据读取过程中出错被触发</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rs.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="设置编码"><a href="#设置编码" class="headerlink" title="设置编码"></a>设置编码</h3><p>与在创建时指定{encoding:’utf8’}效果相同，设置编码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rs.setEncoding(<span class="string">'utf8'</span>);</div></pre></td></tr></table></figure>
<h3 id="暂停触发data恢复触发data"><a href="#暂停触发data恢复触发data" class="headerlink" title="暂停触发data恢复触发data"></a>暂停触发data恢复触发data</h3><p>通过pause()方法和resume()方法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">rs.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    rs.pause();</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">&#125;);</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    rs.resume();</div><div class="line">&#125;,<span class="number">2000</span>);</div></pre></td></tr></table></figure>
<h2 id="可写流createWriteStream"><a href="#可写流createWriteStream" class="headerlink" title="可写流createWriteStream"></a>可写流createWriteStream</h2><p>实现了stream.Writable接口的对象来将流数据写入到对象中</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">fs.createWriteStream = <span class="function"><span class="keyword">function</span>(<span class="params">path, options</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> WriteStream(path, options);</div><div class="line">&#125;;</div><div class="line">util.inherits(WriteStream, Writable);</div></pre></td></tr></table></figure>
<h3 id="创建可写流"><a href="#创建可写流" class="headerlink" title="创建可写流"></a>创建可写流</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ws = fs.createWriteStream(path,[options]);</div></pre></td></tr></table></figure>
<ul>
<li>path写入的文件路径</li>
<li>options<br>  flags打开文件要做的操作,默认为’w’<br>  encoding默认为utf8<br>  highWaterMark写入缓存区的默认大小16kb</li>
</ul>
<h3 id="write方法"><a href="#write方法" class="headerlink" title="write方法"></a>write方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ws.write(chunk,[encoding],[callback]);</div></pre></td></tr></table></figure>
<ul>
<li>chunk写入的数据buffer/string</li>
<li>encoding编码格式chunk为字符串时有用，可选</li>
<li>callback 写入成功后的回调</li>
</ul>
<p>返回值为布尔值，系统缓存区满时为false,未满时为true</p>
<h3 id="end方法"><a href="#end方法" class="headerlink" title="end方法"></a>end方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ws.end(chunk,[encoding],[callback]);</div></pre></td></tr></table></figure>
<p>调用该方法关闭文件,迫使系统缓存区的数据立即写入文件中。不能再次写入</p>
<h3 id="监听drain事件"><a href="#监听drain事件" class="headerlink" title="监听drain事件"></a>监听drain事件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> ws = fs.createWriteStream(<span class="string">'./2.txt'</span>,&#123;<span class="attr">highWaterMark</span>:<span class="number">5</span>&#125;);</div><div class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> flag = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">while</span> (flag&amp;&amp;i&lt;<span class="number">10</span>)&#123;</div><div class="line">        flag = ws.write(<span class="string">''</span>+i++);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">write();</div><div class="line">ws.on(<span class="string">'drain'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    write();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="pipe方法"><a href="#pipe方法" class="headerlink" title="pipe方法"></a>pipe方法</h2><h3 id="pipe方法的原理"><a href="#pipe方法的原理" class="headerlink" title="pipe方法的原理"></a>pipe方法的原理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</div><div class="line"><span class="keyword">var</span> ws = fs.createWriteStream(<span class="string">'./2.txt'</span>);</div><div class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">'./1.txt'</span>);</div><div class="line">rs.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> flag = ws.write(data);</div><div class="line">    <span class="keyword">if</span>(!flag)</div><div class="line">    rs.pause();</div><div class="line">&#125;);</div><div class="line">ws.on(<span class="string">'drain'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    rs.resume();</div><div class="line">&#125;);</div><div class="line">rs.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    ws.end();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="pipe方法的用法"><a href="#pipe方法的用法" class="headerlink" title="pipe方法的用法"></a>pipe方法的用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">readStream.pipe(writeStream);</div><div class="line"><span class="keyword">var</span> source = fs.createReadStream(<span class="string">'./1.txt'</span>);</div><div class="line"><span class="keyword">var</span> target = fs.createWriteStream(<span class="string">'./2.txt'</span>);</div><div class="line">source.pipe(target);</div></pre></td></tr></table></figure>
<p>将数据的滞留量限制到一个可接受的水平，以使得不同速度的来源和目标不会淹没可用内存。</p>
<p>在node.js很多方法都有同步和异步成对的出现，一般情况下能用异步，绝不用同步</p>
<p><code>fs.readFile</code>读取文件是读到内存中  不能读取比内存大的文件,一般是读取64kb以下的文件</p>
<p>pipe和readFile的区别</p>
<p>readFile—–可以查看到读取到的内容<br>pipe—– 异步的  不关心读到的内容是什么</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;流的概念&quot;&gt;&lt;a href=&quot;#流的概念&quot; class=&quot;headerlink&quot; title=&quot;流的概念&quot;&gt;&lt;/a&gt;流的概念&lt;/h2&gt;&lt;p&gt;流是一组有序的，有起点和终点的字节数据传输手段 它不关心文件的整体内容，只关注是否从文件中读到了数据，以及读到数据之后的处理
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>玩转npm</title>
    <link href="http://yoursite.com/2017/02/12/%E7%8E%A9%E8%BD%ACnpm/"/>
    <id>http://yoursite.com/2017/02/12/玩转npm/</id>
    <published>2017-02-12T08:18:38.000Z</published>
    <updated>2017-02-14T09:33:28.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么使用npm"><a href="#为什么使用npm" class="headerlink" title="为什么使用npm"></a>为什么使用npm</h2><p>NPM（node package manager），通常称为node包管理器。顾名思义，它的主要功能就是管理node包，包括：安装、卸载、更新、查看、搜索、发布等。常见的使用场景有以下几种： </p>
<ul>
<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>
<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。 </li>
<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li>
</ul>
<h2 id="npm安装模式"><a href="#npm安装模式" class="headerlink" title="npm安装模式"></a>npm安装模式</h2><p>如果你了解环境变量里面的，用户变量和系统变量。可以做一个类比进行理解。当然，windows上面的环境变量概念比较好理解。</p>
<h3 id="本地安装"><a href="#本地安装" class="headerlink" title="本地安装"></a>本地安装</h3><p><strong>本地模式下安装包的特点</strong></p>
<ul>
<li>不会写入PATH变量（也就是环境变量，无法在全局引用该安装包，不能在终端直接使用）</li>
<li>能够在不同的node_modules目录，安装不同版本的安装包</li>
<li>能够通过<code>require()</code>来引入安装包</li>
<li>使用<code>“npm install [@]”</code>安装的包，默认会安装在当前目录的“node_modules”目录下（如果没有该目录，在执行命令的时候，会自动帮你创建）。</li>
</ul>
<p><strong>默认采用本地模式安装</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install &lt;pkg&gt;</div></pre></td></tr></table></figure>
<p><strong>信息写入<code>package.json</code>文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install &lt;pkg&gt; --save</div></pre></td></tr></table></figure>
<p>这个命令在安装包的同时，将信息写入<code>package.json</code>。</p>
<p>@version表示指定安装包的版本号，是可选项目，默认安装最新版本。<br>项目路径中如果有<code>package.json</code>文件，使用<code>npm instal</code>据<code>dependencies</code>配置安装所有的依赖包。<br>如果这样配置，当代码提交到github时，就不用提交node_modules这个文件夹。</p>
<h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><p><strong>全局模式安装包的特点</strong></p>
<ul>
<li>不需要重复安装</li>
<li>不能使用require()引入</li>
<li>会写入PATH，并建立软链接，使用命令行的方式使用</li>
<li>不方便指定特定的版本运行</li>
</ul>
<p><strong>采用全局模式安装</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g &lt;pkg&gt;</div></pre></td></tr></table></figure>
<p><strong>信息写入</strong></p>
<p>安装包所在的路径(window下)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">C:\Program Files\nodejs\node_global\node_modules</div></pre></td></tr></table></figure>
<p><strong>查看安装包路径</strong></p>
<p>查看当前包的安装路径<br><code>npm root</code><br>查看全局的包的安装路径<br><code>npm root -g</code></p>
<p><strong>设置全局模式安装目录</strong></p>
<p><font color="red">设置后，以全局模式将会安装在此目录中，不过需要手动加入PATH，切记</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config set prefix &lt;global dir&gt;</div></pre></td></tr></table></figure></p>
<p>设置npm缓存文件的存放路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm config set cache &lt;cache dir&gt;</div></pre></td></tr></table></figure>
<p><strong>查看默认模式</strong></p>
<p><font color="green">默认返回：false</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm get global   查看当前的安装模式</div><div class="line">npm set global=true  来设定安装模式</div></pre></td></tr></table></figure></p>
<p><strong>设置为默认以全局模式安装，就不用每次加”-g”参数</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm set global=true</div><div class="line">npm config set global=true</div></pre></td></tr></table></figure>
<p>当<code>npm set global=false</code>设置了之后,但是<code>取出来还是等于true</code>的解决方案：</p>
<p>使用<code>npm config ls</code>的设置以及文件，然后找到.npmrc这个文件的路径，删掉这个文件或者用vim编辑里面的<code>global=true</code>该为<code>false</code>即可</p>
<h2 id="npm的常用命令汇总"><a href="#npm的常用命令汇总" class="headerlink" title="npm的常用命令汇总"></a>npm的常用命令汇总</h2><h3 id="初始化package-json文件"><a href="#初始化package-json文件" class="headerlink" title="初始化package.json文件"></a>初始化<code>package.json</code>文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init (-y)</div></pre></td></tr></table></figure>
<p>会引导你创建一个package.json文件，包括名称、版本、作者这些信息等</p>
<h3 id="查看node模块的package-json文件夹"><a href="#查看node模块的package-json文件夹" class="headerlink" title="查看node模块的package.json文件夹"></a>查看node模块的package.json文件夹</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm view moduleNames</div></pre></td></tr></table></figure>
<p>注意事项：如果想要查看package.json文件夹下某个标签的内容，可以使用<code>$npm view moduleName labelName</code></p>
<h3 id="查看当前目录下已安装的node包"><a href="#查看当前目录下已安装的node包" class="headerlink" title="查看当前目录下已安装的node包"></a>查看当前目录下已安装的node包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm list</div></pre></td></tr></table></figure>
<h3 id="查看帮助命令"><a href="#查看帮助命令" class="headerlink" title="查看帮助命令"></a>查看帮助命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm help</div></pre></td></tr></table></figure>
<h3 id="查看包的依赖关系"><a href="#查看包的依赖关系" class="headerlink" title="查看包的依赖关系"></a>查看包的依赖关系</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm help</div></pre></td></tr></table></figure>
<h3 id="npm-检查包是否已经过时"><a href="#npm-检查包是否已经过时" class="headerlink" title="npm 检查包是否已经过时"></a>npm 检查包是否已经过时</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm outdated</div></pre></td></tr></table></figure>
<p>此命令会列出所有已经过时的包，可以及时进行包的更新</p>
<h3 id="跟新包"><a href="#跟新包" class="headerlink" title="跟新包"></a>跟新包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm update moduleName</div></pre></td></tr></table></figure>
<h3 id="卸载node模块"><a href="#卸载node模块" class="headerlink" title="卸载node模块"></a>卸载node模块</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm uninstall moudleName</div></pre></td></tr></table></figure>
<h3 id="搜索包"><a href="#搜索包" class="headerlink" title="搜索包"></a>搜索包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm search packageName</div></pre></td></tr></table></figure>
<h3 id="查看当前包的安装路径"><a href="#查看当前包的安装路径" class="headerlink" title="查看当前包的安装路径"></a>查看当前包的安装路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm root -g</div></pre></td></tr></table></figure>
<h3 id="查看npm安装的版本"><a href="#查看npm安装的版本" class="headerlink" title="查看npm安装的版本"></a>查看npm安装的版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm -v</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么使用npm&quot;&gt;&lt;a href=&quot;#为什么使用npm&quot; class=&quot;headerlink&quot; title=&quot;为什么使用npm&quot;&gt;&lt;/a&gt;为什么使用npm&lt;/h2&gt;&lt;p&gt;NPM（node package manager），通常称为node包管理器。顾名思义，它的
    
    </summary>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>认识node中的Buffer</title>
    <link href="http://yoursite.com/2017/02/11/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90node%E4%B8%AD%E7%9A%84Buffer/"/>
    <id>http://yoursite.com/2017/02/11/深入解析node中的Buffer/</id>
    <published>2017-02-11T08:23:14.000Z</published>
    <updated>2017-02-12T06:35:40.044Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是buffer"><a href="#什么是buffer" class="headerlink" title="什么是buffer"></a>什么是buffer</h2><p>(1)、所谓缓冲区Buffer，就是 “临时存贮区” 的意思，是暂时存放输入输出数据的一段内存。<br>(2)、JS语言没有二进制数据类型，而在处理TCP和文件流的时候，必须要处理二进制数据。<br>(3)、NodeJS提供了一个Buffer对象来提供对二进制数据的操作<br>(4)、是一个表示固定内存分配的全局对象，也就是说要放到缓存区中的字节数需要提前确定<br>(5)、Buffer好比由一个多位字节元素组成的数组，可以有效的在javascript中表示二进制数据</p>
<h2 id="字节的理解"><a href="#字节的理解" class="headerlink" title="字节的理解"></a>字节的理解</h2><ul>
<li>字节(Byte)是计算机存储时的一种计量单位，一个字节等于8位二进制数</li>
<li>一个位就代表一个0或1，每8个位（bit）组成一个字节（Byte）</li>
<li>字节是通过网络传输信息的单位</li>
<li>一个字节最大值十进制数是255</li>
</ul>
<h2 id="Buffer的创建方式"><a href="#Buffer的创建方式" class="headerlink" title="Buffer的创建方式"></a>Buffer的创建方式</h2><h3 id="通过长度定义"><a href="#通过长度定义" class="headerlink" title="通过长度定义"></a>通过长度定义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Buffer(size);</div></pre></td></tr></table></figure>
<h3 id="通过数组定义"><a href="#通过数组定义" class="headerlink" title="通过数组定义"></a>通过数组定义</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Buffer(array);</div></pre></td></tr></table></figure>
<h3 id="字符串创建"><a href="#字符串创建" class="headerlink" title="字符串创建"></a>字符串创建</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Buffer(array);</div></pre></td></tr></table></figure>
<h3 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> Buffer(<span class="number">3</span>);</div><div class="line"><span class="comment">//超过255，则对256取模，不识别则为0</span></div><div class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> Buffer([<span class="number">257</span>, <span class="number">18</span>, <span class="number">19</span>]);</div><div class="line"><span class="comment">// 负数则加256 读汉字的时候会读成buffer</span></div><div class="line"><span class="keyword">var</span> buffer=<span class="keyword">new</span> Buffer(<span class="string">"好"</span>);</div></pre></td></tr></table></figure>
<h2 id="buffer常用方法"><a href="#buffer常用方法" class="headerlink" title="buffer常用方法"></a>buffer常用方法</h2><h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><p>手动初始化,擦干净桌子,将buffer内容清0<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">buffer.fill(<span class="number">0</span>)</div></pre></td></tr></table></figure></p>
<h3 id="write"><a href="#write" class="headerlink" title="write"></a>write</h3><p>参数 <code>string, offset, length, encoding</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">buffer.write(<span class="string">'前'</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="string">'utf8'</span>);</div><div class="line">buffer.write(<span class="string">'端'</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="string">'utf8'</span>); <span class="comment">//前端</span></div></pre></td></tr></table></figure></p>
<h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h3><p>将buffer转换成字符串类型 start end 是截取的buffer的长度<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">buffer.toString(<span class="string">'utf-8'</span>,<span class="number">3</span>,<span class="number">6</span>);</div></pre></td></tr></table></figure></p>
<p>###　slice</p>
<p>slice克隆的是地址，不会产生新的buffer<br>截取乱码问题的解决：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> Buffer(<span class="string">'前端'</span>);<span class="comment">//&lt;Buffer e5 89 8d e7 ab af&gt;</span></div><div class="line"><span class="built_in">console</span>.log(buffer.toString(<span class="string">'utf-8'</span>,<span class="number">0</span>,<span class="number">4</span>));</div></pre></td></tr></table></figure></p>
<p>结果返回的是：出现乱码，解决截取乱码问题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> StringDecoder  = <span class="built_in">require</span>(<span class="string">'string_decoder'</span>).StringDecoder;</div><div class="line"><span class="keyword">var</span> sd = <span class="keyword">new</span> StringDecoder;</div><div class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> Buffer(<span class="string">'前端'</span>);</div><div class="line"><span class="built_in">console</span>.log(sd.write(buffer.slice(<span class="number">0</span>,<span class="number">4</span>)));</div><div class="line"><span class="built_in">console</span>.log(sd.write(buffer.slice(<span class="number">4</span>)));</div></pre></td></tr></table></figure></p>
<h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>复制Buffer 把多个buffer拷贝到一个大buffer上</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">将要拷贝的buffer.copy(<span class="string">'大buffer'</span>,<span class="string">'小buffer的开始的位置'</span>,<span class="string">'小buffer的结束的位置'</span>)</div><div class="line"><span class="comment">//示例：</span></div><div class="line"><span class="comment">//buffer可以调用toString转换成字符串</span></div><div class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> Buffer(<span class="number">9</span>);</div><div class="line"><span class="keyword">var</span> buffer1 = <span class="keyword">new</span> Buffer(<span class="string">'我很'</span>);</div><div class="line"><span class="keyword">var</span> buffer2 = <span class="keyword">new</span> Buffer(<span class="string">'帅'</span>);</div><div class="line">buffer2.copy(buffer,<span class="number">6</span>);</div><div class="line">buffer1.copy(buffer,<span class="number">0</span>);</div><div class="line"><span class="built_in">console</span>.log(buffer.toString()); </div><div class="line"><span class="comment">//后两个参数默认不写表示从头拷贝到尾部</span></div></pre></td></tr></table></figure>
<h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p>concat返回一个新数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Buffer.concat([buffer1,buffer2,buffer3],totalLength);</div></pre></td></tr></table></figure>
<p>优化node自带的concat的方法<br>myConcat 可以将多个buffer拼接到一起如果 长度过长截取有效长度，过短截取指定长度，不给默认全拼接<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Buffer.myConcat = <span class="function"><span class="keyword">function</span> (<span class="params">list,totalLength</span>) </span>&#123;</div><div class="line">    <span class="comment">//1.判断totalLength是否传递</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> totalLength == <span class="string">'undefined'</span>) &#123;</div><div class="line">        <span class="comment">//3.长度没有传 算出数组中的每个buffer的长度累加length 构建buffer在一个个copy进去</span></div><div class="line">        totalLength = <span class="number">0</span>;</div><div class="line">        list.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">            totalLength += item.length;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//2.如果传递构建一个大buffer将list中buffer</span></div><div class="line">    <span class="comment">// 一个个copy到buffer上，最后截取有效长度slice()</span></div><div class="line">    <span class="keyword">var</span> buffer = <span class="keyword">new</span> Buffer(totalLength);</div><div class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</div><div class="line">    list.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</div><div class="line">        item.copy(buffer, index);</div><div class="line">        index += item.length; </div><div class="line">        <span class="comment">//维护偏移量 下一次的拷贝 是上一次的考入的长度的累加</span></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> buffer.slice(<span class="number">0</span>, index);</div><div class="line">    <span class="comment">//index是最后考入的总长度</span></div><div class="line">    <span class="comment">//4.如果过短不考虑</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<h3 id="isBuffer"><a href="#isBuffer" class="headerlink" title="isBuffer"></a>isBuffer</h3><p>判断是否是buffer</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Buffer.isBuffer</div></pre></td></tr></table></figure>
<h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Buffer.byteLength(<span class="string">'前端'</span>);<span class="comment">//获取字节长度</span></div><div class="line">buffer.length;<span class="comment">//获取字符串所代表的buffer的长度</span></div></pre></td></tr></table></figure>
<h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><p><strong>将任意进制字符串转换为十进制</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">parseInt</span>(<span class="string">"11"</span>, <span class="number">2</span>); <span class="comment">// 3 2进制转10进制</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">"77"</span>, <span class="number">8</span>); <span class="comment">// 63 8进制转10进制</span></div><div class="line"><span class="built_in">parseInt</span>(<span class="string">"e7"</span>, <span class="number">16</span>); <span class="comment">//175 16进制转10进制</span></div></pre></td></tr></table></figure></p>
<p><strong>将10进制转换为其它进制字符串</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="number">3</span>).toString(<span class="number">2</span>) <span class="comment">// "11" 十进制转2进制</span></div><div class="line">(<span class="number">17</span>).toString(<span class="number">16</span>) <span class="comment">// "11" 十进制转16进制</span></div><div class="line">(<span class="number">33</span>).toString(<span class="number">32</span>) <span class="comment">// "11" 十提制转32进制</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是buffer&quot;&gt;&lt;a href=&quot;#什么是buffer&quot; class=&quot;headerlink&quot; title=&quot;什么是buffer&quot;&gt;&lt;/a&gt;什么是buffer&lt;/h2&gt;&lt;p&gt;(1)、所谓缓冲区Buffer，就是 “临时存贮区” 的意思，是暂时存放输入输出数据
    
    </summary>
    
    
      <category term="Buffer" scheme="http://yoursite.com/tags/Buffer/"/>
    
  </entry>
  
</feed>
